{
  "api/i5.Toolkit.Core.AppConsole.ActivationVisibilityManager.html": {
    "href": "api/i5.Toolkit.Core.AppConsole.ActivationVisibilityManager.html",
    "title": "Class ActivationVisibilityManager | i5 Toolkit Documentation",
    "keywords": "Class ActivationVisibilityManager Visibility manager which changes the visibility by activating/deactivating the gameobject Inheritance object VisibilityManager ActivationVisibilityManager Implements IVisibilityManager Namespace: i5.Toolkit.Core.AppConsole Assembly: cs.temp.dll.dll Syntax public class ActivationVisibilityManager : VisibilityManager, IVisibilityManager Properties IsVisible Gets or sets the current visibility of the gameobject Declaration public override bool IsVisible { get; set; } Property Value Type Description bool Overrides VisibilityManager.IsVisible Implements IVisibilityManager"
  },
  "api/i5.Toolkit.Core.AppConsole.AutoScroller.html": {
    "href": "api/i5.Toolkit.Core.AppConsole.AutoScroller.html",
    "title": "Class AutoScroller | i5 Toolkit Documentation",
    "keywords": "Class AutoScroller Auto scroller which is automatically scrolls a scrollview to the bottom The scroll view can be activated by an UI element and deactivated by manually scrolling the view Inheritance object AutoScroller Namespace: i5.Toolkit.Core.AppConsole Assembly: cs.temp.dll.dll Syntax public class AutoScroller Constructors AutoScroller(IScrollView, IRectangle, IActivateable) Creates a new instance of the auto scroller Declaration public AutoScroller(IScrollView scrollView, IRectangle content, IActivateable elementToStartScroller) Parameters Type Name Description IScrollView scrollView The view which should be scrolled IRectangle content The content rectangle inside of the scrollview IActivateable elementToStartScroller The interaction element which starts the scroller Properties ScrollerActive If true, the scroller will make sure that the scrollview is always scrolled to the bottom Declaration public bool ScrollerActive { get; set; } Property Value Type Description bool Methods NotifyScrollValueChanged() Notifies the scroller that the scroll view was changed This can be due to two reasons: The user scrolled the UI element The size of the scroll view's content changed Declaration public void NotifyScrollValueChanged() OnEnable() Scrolls the scrollview to the bottom when the object is enabled Declaration public void OnEnable()"
  },
  "api/i5.Toolkit.Core.AppConsole.AutoScrollerBehaviour.html": {
    "href": "api/i5.Toolkit.Core.AppConsole.AutoScrollerBehaviour.html",
    "title": "Class AutoScrollerBehaviour | i5 Toolkit Documentation",
    "keywords": "Class AutoScrollerBehaviour MonoBehaviour for binding the auto scroller logic Inheritance object AutoScrollerBehaviour Namespace: i5.Toolkit.Core.AppConsole Assembly: cs.temp.dll.dll Syntax public class AutoScrollerBehaviour : MonoBehaviour Properties AutoScroller The instance which controls the auto scrolling Declaration public AutoScroller AutoScroller { get; } Property Value Type Description AutoScroller Methods OnAutoScrollButtonPressed() Called if the button which activates the automatic scrolling is pressed Declaration public void OnAutoScrollButtonPressed() OnScrollValueChanged() Called if the scroll value changes and notifies the auto scroller Declaration public void OnScrollValueChanged()"
  },
  "api/i5.Toolkit.Core.AppConsole.Console.html": {
    "href": "api/i5.Toolkit.Core.AppConsole.Console.html",
    "title": "Class Console | i5 Toolkit Documentation",
    "keywords": "Class Console Handles the console logic Inheritance object Console Implements IConsole Namespace: i5.Toolkit.Core.AppConsole Assembly: cs.temp.dll.dll Syntax public class Console : IConsole Constructors Console() Creates a new console Declaration public Console() Properties IsCapturing If true, the console captures messages Declaration public bool IsCapturing { get; set; } Property Value Type Description bool Messages Captured messages Declaration public List<ILogMessage> Messages { get; protected set; } Property Value Type Description System.Collections.Generic.List<T><ILogMessage> Methods AddMessage(ILogMessage) Declaration protected void AddMessage(ILogMessage message) Parameters Type Name Description ILogMessage message Subscribe() Declaration protected virtual void Subscribe() Unsubscribe() Declaration protected virtual void Unsubscribe() Events OnMessageAdded Event which is invoked when a new message is added to the console Declaration public event Action OnMessageAdded Event Type Type Description Action Implements IConsole"
  },
  "api/i5.Toolkit.Core.AppConsole.ConsoleUI.html": {
    "href": "api/i5.Toolkit.Core.AppConsole.ConsoleUI.html",
    "title": "Class ConsoleUI | i5 Toolkit Documentation",
    "keywords": "Class ConsoleUI Logic for the console's UI connection Inheritance object ConsoleUI TextConsoleUI Namespace: i5.Toolkit.Core.AppConsole Assembly: cs.temp.dll.dll Syntax public abstract class ConsoleUI Constructors ConsoleUI(LogFormatterConfiguration) Creates a new console UI logic Declaration public ConsoleUI(LogFormatterConfiguration logFormatterConfiguration = null) Parameters Type Name Description LogFormatterConfiguration logFormatterConfiguration Determines how messages should be formatted Fields logFormatter Declaration protected ILogFormatter logFormatter Field Value Type Description ILogFormatter Properties CaptureInBackground If true, the console captures messages, even if the object is deactivated Declaration public bool CaptureInBackground { get; set; } Property Value Type Description bool Console Console which handles the message capturing Declaration public IConsole Console { get; set; } Property Value Type Description IConsole Methods OnDisable() Called if hte object is disabled Stops capturing if it should not capture in background Declaration public void OnDisable() OnEnable() Called if the object is enabled Starts capturing messages Declaration public void OnEnable() UpdateUI() Declaration protected abstract void UpdateUI()"
  },
  "api/i5.Toolkit.Core.AppConsole.ConsoleUIBehaviour.html": {
    "href": "api/i5.Toolkit.Core.AppConsole.ConsoleUIBehaviour.html",
    "title": "Class ConsoleUIBehaviour | i5 Toolkit Documentation",
    "keywords": "Class ConsoleUIBehaviour MonoBehaviour to connect console UI to Unity Inheritance object ConsoleUIBehaviour TextMeshProUGUIConsoleUI Namespace: i5.Toolkit.Core.AppConsole Assembly: cs.temp.dll.dll Syntax public abstract class ConsoleUIBehaviour : MonoBehaviour Fields captureInBackground Declaration protected bool captureInBackground Field Value Type Description bool consoleUI Declaration protected ConsoleUI consoleUI Field Value Type Description ConsoleUI Methods Awake() Declaration protected virtual void Awake() OnDisable() Declaration protected virtual void OnDisable() OnEnable() Declaration protected virtual void OnEnable()"
  },
  "api/i5.Toolkit.Core.AppConsole.DefaultConsoleFormatter.html": {
    "href": "api/i5.Toolkit.Core.AppConsole.DefaultConsoleFormatter.html",
    "title": "Class DefaultConsoleFormatter | i5 Toolkit Documentation",
    "keywords": "Class DefaultConsoleFormatter Default console formatter which should be used if no configuration file is provided Inheritance object DefaultConsoleFormatter Implements ILogFormatter Namespace: i5.Toolkit.Core.AppConsole Assembly: cs.temp.dll.dll Syntax public class DefaultConsoleFormatter : ILogFormatter Methods Format(ILogMessage) Formats the given log messages to text output The default formatter returns the log message's content Declaration public string Format(ILogMessage logMessage) Parameters Type Name Description ILogMessage logMessage The log message to format Returns Type Description string Returns a formatted string Implements ILogFormatter"
  },
  "api/i5.Toolkit.Core.AppConsole.html": {
    "href": "api/i5.Toolkit.Core.AppConsole.html",
    "title": "Namespace i5.Toolkit.Core.AppConsole | i5 Toolkit Documentation",
    "keywords": "Namespace i5.Toolkit.Core.AppConsole Classes ActivationVisibilityManager Visibility manager which changes the visibility by activating/deactivating the gameobject AutoScroller Auto scroller which is automatically scrolls a scrollview to the bottom The scroll view can be activated by an UI element and deactivated by manually scrolling the view AutoScrollerBehaviour MonoBehaviour for binding the auto scroller logic Console Handles the console logic ConsoleUI Logic for the console's UI connection ConsoleUIBehaviour MonoBehaviour to connect console UI to Unity DefaultConsoleFormatter Default console formatter which should be used if no configuration file is provided LogColorFormatterConfiguration A configuration object for formatting log messages using colors LogFormatterConfiguration A console formatter configuration object which can be set up as a scriptable object LogMessage Log message as posted by the Unity API TextConsoleUI Console UI for text displays TextMeshProUGUIConsoleUI MonoBehaviour for constructing console UIs with the TextMeshProUGUI TMPLogColorFormatter Color-coded log formatter for TextMeshPro TMPLogColorFormatterConfiguration The color log format configuration for TextMeshPro displays VisibilityManager MonoBehaviour for managing an object's visiblity VisibilitySetter Binding component for handling user input and delegating it to the visibility manager Interfaces IConsole Console for capturing messages ILogColorFormatter Log formatter that uses color coding ILogFormatter Formatter that can format log messages to text output ILogMessage Log message IVisibilityManager Visibility manager that handles showing and hiding Unity objects"
  },
  "api/i5.Toolkit.Core.AppConsole.IConsole.html": {
    "href": "api/i5.Toolkit.Core.AppConsole.IConsole.html",
    "title": "Interface IConsole | i5 Toolkit Documentation",
    "keywords": "Interface IConsole Console for capturing messages Namespace: i5.Toolkit.Core.AppConsole Assembly: cs.temp.dll.dll Syntax public interface IConsole Properties IsCapturing If true, the console is capturing messages Declaration bool IsCapturing { get; set; } Property Value Type Description bool Messages List of captured messages Declaration List<ILogMessage> Messages { get; } Property Value Type Description System.Collections.Generic.List<T><ILogMessage> Events OnMessageAdded Event which is invoked if a message was captured Declaration event Action OnMessageAdded Event Type Type Description Action"
  },
  "api/i5.Toolkit.Core.AppConsole.ILogColorFormatter.html": {
    "href": "api/i5.Toolkit.Core.AppConsole.ILogColorFormatter.html",
    "title": "Interface ILogColorFormatter | i5 Toolkit Documentation",
    "keywords": "Interface ILogColorFormatter Log formatter that uses color coding Inherited Members ILogFormatter.Format(ILogMessage) Namespace: i5.Toolkit.Core.AppConsole Assembly: cs.temp.dll.dll Syntax public interface ILogColorFormatter : ILogFormatter Properties AssertColor The color for assert messages Declaration Color AssertColor { get; set; } Property Value Type Description Color DefaultColor The color for unexpected message types Declaration Color DefaultColor { get; set; } Property Value Type Description Color ErrorColor The color for error messages Declaration Color ErrorColor { get; set; } Property Value Type Description Color ExceptionColor The color for exception messages Declaration Color ExceptionColor { get; set; } Property Value Type Description Color LogColor The color for log messages Declaration Color LogColor { get; set; } Property Value Type Description Color WarningColor The color for warning messages Declaration Color WarningColor { get; set; } Property Value Type Description Color"
  },
  "api/i5.Toolkit.Core.AppConsole.ILogFormatter.html": {
    "href": "api/i5.Toolkit.Core.AppConsole.ILogFormatter.html",
    "title": "Interface ILogFormatter | i5 Toolkit Documentation",
    "keywords": "Interface ILogFormatter Formatter that can format log messages to text output Namespace: i5.Toolkit.Core.AppConsole Assembly: cs.temp.dll.dll Syntax public interface ILogFormatter Methods Format(ILogMessage) Formats the given log message to text output Declaration string Format(ILogMessage logMessage) Parameters Type Name Description ILogMessage logMessage The log message to format Returns Type Description string Returns formatted text output based on the log message"
  },
  "api/i5.Toolkit.Core.AppConsole.ILogMessage.html": {
    "href": "api/i5.Toolkit.Core.AppConsole.ILogMessage.html",
    "title": "Interface ILogMessage | i5 Toolkit Documentation",
    "keywords": "Interface ILogMessage Log message Namespace: i5.Toolkit.Core.AppConsole Assembly: cs.temp.dll.dll Syntax public interface ILogMessage Properties LogType The type of log message Declaration LogType LogType { get; } Property Value Type Description LogType StackTrace The stack trace of the log message Declaration string StackTrace { get; } Property Value Type Description string"
  },
  "api/i5.Toolkit.Core.AppConsole.IVisibilityManager.html": {
    "href": "api/i5.Toolkit.Core.AppConsole.IVisibilityManager.html",
    "title": "Interface IVisibilityManager | i5 Toolkit Documentation",
    "keywords": "Interface IVisibilityManager Visibility manager that handles showing and hiding Unity objects Namespace: i5.Toolkit.Core.AppConsole Assembly: cs.temp.dll.dll Syntax public interface IVisibilityManager Properties IsVisible If true, an object is visible Declaration bool IsVisible { get; set; } Property Value Type Description bool"
  },
  "api/i5.Toolkit.Core.AppConsole.LogColorFormatterConfiguration.html": {
    "href": "api/i5.Toolkit.Core.AppConsole.LogColorFormatterConfiguration.html",
    "title": "Class LogColorFormatterConfiguration | i5 Toolkit Documentation",
    "keywords": "Class LogColorFormatterConfiguration A configuration object for formatting log messages using colors Inheritance object LogFormatterConfiguration LogColorFormatterConfiguration TMPLogColorFormatterConfiguration Inherited Members LogFormatterConfiguration.GenerateFormatter() Namespace: i5.Toolkit.Core.AppConsole Assembly: cs.temp.dll.dll Syntax public abstract class LogColorFormatterConfiguration : LogFormatterConfiguration Fields assertColor Declaration protected Color assertColor Field Value Type Description Color errorColor Declaration protected Color errorColor Field Value Type Description Color exceptionColor Declaration protected Color exceptionColor Field Value Type Description Color logColor Declaration protected Color logColor Field Value Type Description Color warningColor Declaration protected Color warningColor Field Value Type Description Color"
  },
  "api/i5.Toolkit.Core.AppConsole.LogFormatterConfiguration.html": {
    "href": "api/i5.Toolkit.Core.AppConsole.LogFormatterConfiguration.html",
    "title": "Class LogFormatterConfiguration | i5 Toolkit Documentation",
    "keywords": "Class LogFormatterConfiguration A console formatter configuration object which can be set up as a scriptable object Inheritance object LogFormatterConfiguration LogColorFormatterConfiguration Namespace: i5.Toolkit.Core.AppConsole Assembly: cs.temp.dll.dll Syntax public abstract class LogFormatterConfiguration : ScriptableObject Methods GenerateFormatter() Creates a formatter instance which can be used to format messages Declaration public abstract ILogFormatter GenerateFormatter() Returns Type Description ILogFormatter Returns the formatter instance with the set up configuration"
  },
  "api/i5.Toolkit.Core.AppConsole.LogMessage.html": {
    "href": "api/i5.Toolkit.Core.AppConsole.LogMessage.html",
    "title": "Class LogMessage | i5 Toolkit Documentation",
    "keywords": "Class LogMessage Log message as posted by the Unity API Inheritance object LogMessage Implements ILogMessage Namespace: i5.Toolkit.Core.AppConsole Assembly: cs.temp.dll.dll Syntax public class LogMessage : ILogMessage Constructors LogMessage(string, string, LogType) Creates a new log message instance Declaration public LogMessage(string content, string stackTrace, LogType logType) Parameters Type Name Description string content The content of the log message string stackTrace The stack trace of the log message LogType logType The typ of log message Properties Content Content of the log message Declaration public string Content { get; } Property Value Type Description string LogType Type of the log message Declaration public LogType LogType { get; } Property Value Type Description LogType StackTrace Stack trace of the log message Declaration public string StackTrace { get; } Property Value Type Description string Implements ILogMessage"
  },
  "api/i5.Toolkit.Core.AppConsole.TextConsoleUI.html": {
    "href": "api/i5.Toolkit.Core.AppConsole.TextConsoleUI.html",
    "title": "Class TextConsoleUI | i5 Toolkit Documentation",
    "keywords": "Class TextConsoleUI Console UI for text displays Inheritance object ConsoleUI TextConsoleUI Inherited Members ConsoleUI.CaptureInBackground ConsoleUI.logFormatter ConsoleUI.Console ConsoleUI.OnEnable() ConsoleUI.OnDisable() Namespace: i5.Toolkit.Core.AppConsole Assembly: cs.temp.dll.dll Syntax public class TextConsoleUI : ConsoleUI Constructors TextConsoleUI(ITextDisplay, LogFormatterConfiguration) Creates the console UI logic instance Declaration public TextConsoleUI(ITextDisplay consoleTextDisplay, LogFormatterConfiguration logFormatterConfiguration = null) Parameters Type Name Description ITextDisplay consoleTextDisplay The text display on which messages should be shown LogFormatterConfiguration logFormatterConfiguration The formatter configuration that defines how messages are formatted Methods UpdateUI() Declaration protected override void UpdateUI() Overrides ConsoleUI.UpdateUI()"
  },
  "api/i5.Toolkit.Core.AppConsole.TextMeshProUGUIConsoleUI.html": {
    "href": "api/i5.Toolkit.Core.AppConsole.TextMeshProUGUIConsoleUI.html",
    "title": "Class TextMeshProUGUIConsoleUI | i5 Toolkit Documentation",
    "keywords": "Class TextMeshProUGUIConsoleUI MonoBehaviour for constructing console UIs with the TextMeshProUGUI Inheritance object ConsoleUIBehaviour TextMeshProUGUIConsoleUI Inherited Members ConsoleUIBehaviour.captureInBackground ConsoleUIBehaviour.consoleUI ConsoleUIBehaviour.OnEnable() ConsoleUIBehaviour.OnDisable() Namespace: i5.Toolkit.Core.AppConsole Assembly: cs.temp.dll.dll Syntax public class TextMeshProUGUIConsoleUI : ConsoleUIBehaviour Fields logFormatterConfiguration Declaration protected LogFormatterConfiguration logFormatterConfiguration Field Value Type Description LogFormatterConfiguration Methods Awake() Declaration protected override void Awake() Overrides ConsoleUIBehaviour.Awake()"
  },
  "api/i5.Toolkit.Core.AppConsole.TMPLogColorFormatter.html": {
    "href": "api/i5.Toolkit.Core.AppConsole.TMPLogColorFormatter.html",
    "title": "Class TMPLogColorFormatter | i5 Toolkit Documentation",
    "keywords": "Class TMPLogColorFormatter Color-coded log formatter for TextMeshPro Inheritance object TMPLogColorFormatter Implements ILogColorFormatter ILogFormatter Namespace: i5.Toolkit.Core.AppConsole Assembly: cs.temp.dll.dll Syntax public class TMPLogColorFormatter : ILogColorFormatter, ILogFormatter Properties AssertColor The color for assert messages Declaration public Color AssertColor { get; set; } Property Value Type Description Color DefaultColor The color for unexpected message types Declaration public Color DefaultColor { get; set; } Property Value Type Description Color ErrorColor The color for error messages Declaration public Color ErrorColor { get; set; } Property Value Type Description Color ExceptionColor The color for exception messages Declaration public Color ExceptionColor { get; set; } Property Value Type Description Color LogColor The color for log messages Declaration public Color LogColor { get; set; } Property Value Type Description Color WarningColor The color for warning messages Declaration public Color WarningColor { get; set; } Property Value Type Description Color Methods Format(ILogMessage) Formats the given log message to text output Declaration public string Format(ILogMessage message) Parameters Type Name Description ILogMessage message The message to format Returns Type Description string Returns formatted text output based on the log message Implements ILogColorFormatter ILogFormatter"
  },
  "api/i5.Toolkit.Core.AppConsole.TMPLogColorFormatterConfiguration.html": {
    "href": "api/i5.Toolkit.Core.AppConsole.TMPLogColorFormatterConfiguration.html",
    "title": "Class TMPLogColorFormatterConfiguration | i5 Toolkit Documentation",
    "keywords": "Class TMPLogColorFormatterConfiguration The color log format configuration for TextMeshPro displays Inheritance object LogFormatterConfiguration LogColorFormatterConfiguration TMPLogColorFormatterConfiguration Inherited Members LogColorFormatterConfiguration.logColor LogColorFormatterConfiguration.warningColor LogColorFormatterConfiguration.errorColor LogColorFormatterConfiguration.exceptionColor LogColorFormatterConfiguration.assertColor Namespace: i5.Toolkit.Core.AppConsole Assembly: cs.temp.dll.dll Syntax public class TMPLogColorFormatterConfiguration : LogColorFormatterConfiguration Methods GenerateFormatter() Generates a formatter for TextMeshPro configurers Declaration public override ILogFormatter GenerateFormatter() Returns Type Description ILogFormatter Returns the set up formatter Overrides LogFormatterConfiguration.GenerateFormatter()"
  },
  "api/i5.Toolkit.Core.AppConsole.VisibilityManager.html": {
    "href": "api/i5.Toolkit.Core.AppConsole.VisibilityManager.html",
    "title": "Class VisibilityManager | i5 Toolkit Documentation",
    "keywords": "Class VisibilityManager MonoBehaviour for managing an object's visiblity Inheritance object VisibilityManager ActivationVisibilityManager Implements IVisibilityManager Namespace: i5.Toolkit.Core.AppConsole Assembly: cs.temp.dll.dll Syntax public abstract class VisibilityManager : MonoBehaviour, IVisibilityManager Properties IsVisible Declaration public abstract bool IsVisible { get; set; } Property Value Type Description bool Implements IVisibilityManager"
  },
  "api/i5.Toolkit.Core.AppConsole.VisibilitySetter.html": {
    "href": "api/i5.Toolkit.Core.AppConsole.VisibilitySetter.html",
    "title": "Class VisibilitySetter | i5 Toolkit Documentation",
    "keywords": "Class VisibilitySetter Binding component for handling user input and delegating it to the visibility manager Inheritance object VisibilitySetter Namespace: i5.Toolkit.Core.AppConsole Assembly: cs.temp.dll.dll Syntax public class VisibilitySetter : MonoBehaviour Fields activationKey Declaration public KeyCode activationKey Field Value Type Description KeyCode consoleVisibilityManager Declaration public VisibilityManager consoleVisibilityManager Field Value Type Description VisibilityManager"
  },
  "api/i5.Toolkit.Core.Caching.CacheAwareContentLoader.html": {
    "href": "api/i5.Toolkit.Core.Caching.CacheAwareContentLoader.html",
    "title": "Class CacheAwareContentLoader | i5 Toolkit Documentation",
    "keywords": "Class CacheAwareContentLoader A content loader that integrates the cache functionality Any file which is loaded via this content loader is stored in the cache and taken from there in future requests Inheritance object CacheAwareContentLoader Namespace: i5.Toolkit.Core.Caching Assembly: cs.temp.dll.dll Syntax public class CacheAwareContentLoader : IContentLoader<string> Constructors CacheAwareContentLoader(IFileCache) Creates a new cache aware content loader Declaration public CacheAwareContentLoader(IFileCache cache = null) Parameters Type Name Description IFileCache cache A reference to the cache that should be used. If it is not set, it will be pulled via the service manager Properties Cache The cache where the downloaded content is stored Declaration public IFileCache Cache { get; set; } Property Value Type Description IFileCache InternalContentLoader The content loader which should be used for the actual access to the content By default, it is initialized with the UnityWebRequestLoader Declaration public IContentLoader<string> InternalContentLoader { get; set; } Property Value Type Description IContentLoader<><string> Methods LoadAsync(string) Load the file that is specified by the uri. Uses the chache when possible. Declaration public Task<WebResponse<string>> LoadAsync(string uri) Parameters Type Name Description string uri Path to the file that should be loaded. Returns Type Description Task<><WebResponse<string>> Returns the loaded file, either from cache or the given uri"
  },
  "api/i5.Toolkit.Core.Caching.CacheEntry.html": {
    "href": "api/i5.Toolkit.Core.Caching.CacheEntry.html",
    "title": "Class CacheEntry | i5 Toolkit Documentation",
    "keywords": "Class CacheEntry One data entry in the cache Inheritance object CacheEntry Namespace: i5.Toolkit.Core.Caching Assembly: cs.temp.dll.dll Syntax public class CacheEntry Constructors CacheEntry(string, string, DateTime) Creates a new cache entry Declaration public CacheEntry(string localFileName, string fileHash, DateTime cacheDate) Parameters Type Name Description string localFileName The name of the file string fileHash The hash of the file DateTime cacheDate The date of the cache entry Fields fileHash Hash checksum of the file Declaration public string fileHash Field Value Type Description string localFileName Name of the file Declaration public string localFileName Field Value Type Description string Properties CacheDate Date of the entry Declaration public DateTime CacheDate { get; set; } Property Value Type Description DateTime"
  },
  "api/i5.Toolkit.Core.Caching.FileCacheService.html": {
    "href": "api/i5.Toolkit.Core.Caching.FileCacheService.html",
    "title": "Class FileCacheService | i5 Toolkit Documentation",
    "keywords": "Class FileCacheService Service for caching files locally so that they do not need to be downloaded repeatedly Inheritance object FileCacheService Implements IFileCache Namespace: i5.Toolkit.Core.Caching Assembly: cs.temp.dll.dll Syntax public class FileCacheService : IService, IFileCache Constructors FileCacheService(bool, bool, string, float, IDirectoryAccessor) Creates a new file cache service Declaration public FileCacheService(bool sessionPersistence = false, bool useSafeMode = true, string cacheLocationOverride = null, float daysValid = 365, IDirectoryAccessor directoryAccessor = null) Parameters Type Name Description bool sessionPersistence If true, the tracked cache is stored and recovered in future application startups bool useSafeMode If true, files are hashed, meaning that cached content cannot be switched out by external influences string cacheLocationOverride If set, the cache will be stored in the given place instead of the default path float daysValid Number of days that an entry in the cache should stay valid before requiring a re-download IDirectoryAccessor directoryAccessor Fields persistentCacheFileName The name under which the cache registry is stored Declaration public const string persistentCacheFileName = \"i5cache.json\" Field Value Type Description string Properties CacheLocation Points to the folder where the cached files are stored and where the cache registry can be found Declaration public string CacheLocation { get; } Property Value Type Description string ContentLoader Module that should be used for fetching the file's content Declaration public IContentLoader<string> ContentLoader { get; set; } Property Value Type Description IContentLoader<><string> DaysValid The amount of days for which a cached file is valid Declaration public float DaysValid { get; } Property Value Type Description float DirectoryAccessor Module should should be used for accessing directories Declaration public IDirectoryAccessor DirectoryAccessor { get; set; } Property Value Type Description IDirectoryAccessor FileAccessor Module that should be used for accessing files Declaration public IFileAccessor FileAccessor { get; set; } Property Value Type Description IFileAccessor FileCount Number of files in which are tracked in the cache Declaration public int FileCount { get; } Property Value Type Description int FileHasher Module for generating hash ids for files Declaration public IFileHasher FileHasher { get; set; } Property Value Type Description IFileHasher SessionPersistence If true, cache entries are stored persistently and read again on application startup Declaration public bool SessionPersistence { get; } Property Value Type Description bool UseSafeMode If true, cached files are hashed so that they cannot be switched out Declaration public bool UseSafeMode { get; } Property Value Type Description bool Methods AddOrUpdateInCacheAsync(string) Caches a file and registers it in the cache. If the file is already cached, this method forces the download of the file again and updates the cache entry Declaration public Task<string> AddOrUpdateInCacheAsync(string path) Parameters Type Name Description string path The path to the remote file resource, most likely an URL Returns Type Description Task<><string> Returns the path in local storage where the file was stored Cleanup() Called when the service is shut down Declaration public void Cleanup() GetCachedFileLocation(string) Returns the local file path where the file of the given URL path is cached If the file is not cached, it will return an empty string Declaration public string GetCachedFileLocation(string path) Parameters Type Name Description string path The path to the remote file, probably an URL Returns Type Description string Returns the path in local storage to the cached version; if no version is cached, an empty string is returned Initialize(IServiceManager) Called when the service is registered at the service manager Declaration public void Initialize(IServiceManager owner) Parameters Type Name Description IServiceManager owner The service manager which now owns the service IsFileInCache(string) Checks whether the remote file at the given URL path is already cached Declaration public bool IsFileInCache(string path) Parameters Type Name Description string path The path to the remote file, probably an URL Returns Type Description bool Returns whether the file is already cached Implements IFileCache"
  },
  "api/i5.Toolkit.Core.Caching.FileHasher.html": {
    "href": "api/i5.Toolkit.Core.Caching.FileHasher.html",
    "title": "Class FileHasher | i5 Toolkit Documentation",
    "keywords": "Class FileHasher Generates hash checksums for files Inheritance object FileHasher Implements IFileHasher Namespace: i5.Toolkit.Core.Caching Assembly: cs.temp.dll.dll Syntax public class FileHasher : IFileHasher Properties FileAccessor Declaration public IFileAccessor FileAccessor { get; set; } Property Value Type Description IFileAccessor Methods CalculateMD5Hash(string) Calculates a hash for the given file using MD5 Declaration public string CalculateMD5Hash(string filePath) Parameters Type Name Description string filePath The path to the file Returns Type Description string Returns the MD5 hash of the given file Implements IFileHasher"
  },
  "api/i5.Toolkit.Core.Caching.html": {
    "href": "api/i5.Toolkit.Core.Caching.html",
    "title": "Namespace i5.Toolkit.Core.Caching | i5 Toolkit Documentation",
    "keywords": "Namespace i5.Toolkit.Core.Caching Classes CacheAwareContentLoader A content loader that integrates the cache functionality Any file which is loaded via this content loader is stored in the cache and taken from there in future requests CacheEntry One data entry in the cache FileCacheService Service for caching files locally so that they do not need to be downloaded repeatedly FileHasher Generates hash checksums for files Interfaces IFileCache A file cache for storing local copies for remote files IFileHasher Contract for hashing files"
  },
  "api/i5.Toolkit.Core.Caching.IFileCache.html": {
    "href": "api/i5.Toolkit.Core.Caching.IFileCache.html",
    "title": "Interface IFileCache | i5 Toolkit Documentation",
    "keywords": "Interface IFileCache A file cache for storing local copies for remote files Namespace: i5.Toolkit.Core.Caching Assembly: cs.temp.dll.dll Syntax public interface IFileCache Properties CacheLocation States where the cache is stored on the file system Declaration string CacheLocation { get; } Property Value Type Description string DaysValid States how long entries should stay valid before they need to be re-downloaded Declaration float DaysValid { get; } Property Value Type Description float FileCount The number of files which are currently stored in the cache Declaration int FileCount { get; } Property Value Type Description int SessionPersistence If true, cached files should be stored between app sessions Declaration bool SessionPersistence { get; } Property Value Type Description bool UseSafeMode If true, cached files are protected against switching them Declaration bool UseSafeMode { get; } Property Value Type Description bool Methods AddOrUpdateInCacheAsync(string) Adds a new entry to the cache or forces an update to an existing entry Declaration Task<string> AddOrUpdateInCacheAsync(string path) Parameters Type Name Description string path The path to the remote file, probably an URL Returns Type Description Task<><string> Returns the file path of the cached file on the local file system GetCachedFileLocation(string) Looks up the path to the cached file, given a path to the remote Declaration string GetCachedFileLocation(string path) Parameters Type Name Description string path The path to the remote file, probably an URL Returns Type Description string Retruns the path to the local cached file or an empty string if the file is not cached IsFileInCache(string) Checks whether the file at the given URL path was already cached Declaration bool IsFileInCache(string path) Parameters Type Name Description string path The path to the remote file, probably an URL Returns Type Description bool Returns true if the file is cached, otherwise false"
  },
  "api/i5.Toolkit.Core.Caching.IFileHasher.html": {
    "href": "api/i5.Toolkit.Core.Caching.IFileHasher.html",
    "title": "Interface IFileHasher | i5 Toolkit Documentation",
    "keywords": "Interface IFileHasher Contract for hashing files Namespace: i5.Toolkit.Core.Caching Assembly: cs.temp.dll.dll Syntax public interface IFileHasher Methods CalculateMD5Hash(string) Calculates a hash for the given file using MD5 Declaration string CalculateMD5Hash(string path) Parameters Type Name Description string path Returns Type Description string Returns the MD5 hash of the given file"
  },
  "api/i5.Toolkit.Core.DeepLinkAPI.DeepLinkArgs.html": {
    "href": "api/i5.Toolkit.Core.DeepLinkAPI.DeepLinkArgs.html",
    "title": "Class DeepLinkArgs | i5 Toolkit Documentation",
    "keywords": "Class DeepLinkArgs Arguments with further information about the received deep link Inheritance object DeepLinkArgs Namespace: i5.Toolkit.Core.DeepLinkAPI Assembly: cs.temp.dll.dll Syntax public class DeepLinkArgs Constructors DeepLinkArgs(Dictionary<string, string>, Uri) Creates a new instance of the deep link arguments Declaration public DeepLinkArgs(Dictionary<string, string> parameters, Uri deepLink) Parameters Type Name Description System.Collections.Generic.Dictionary<TKey, TValue><string, string> parameters The parameters of the deep link call Uri deepLink The full deep link Properties DeepLink The full deep link uri Declaration public Uri DeepLink { get; } Property Value Type Description Uri Parameters The list of parameters that the deep link contained Declaration public Dictionary<string, string> Parameters { get; } Property Value Type Description System.Collections.Generic.Dictionary<TKey, TValue><string, string> Scheme The scheme of the deep link, e.g. i5:// Declaration public string Scheme { get; } Property Value Type Description string"
  },
  "api/i5.Toolkit.Core.DeepLinkAPI.DeepLinkAttribute.html": {
    "href": "api/i5.Toolkit.Core.DeepLinkAPI.DeepLinkAttribute.html",
    "title": "Class DeepLinkAttribute | i5 Toolkit Documentation",
    "keywords": "Class DeepLinkAttribute Attribute which marks a method as a target for deep links Requires a set up DeepLinkingService. Moreover, the class which contains a method with this attribute needs to be registered using AddDeepLinkListener(object) Inheritance object DeepLinkAttribute Namespace: i5.Toolkit.Core.DeepLinkAPI Assembly: cs.temp.dll.dll Syntax public class DeepLinkAttribute : Attribute Constructors DeepLinkAttribute(string, string) Marks the method as a deep link target with the given path Declaration public DeepLinkAttribute(string path, string scheme = \"\") Parameters Type Name Description string path The path of the deep link If you want to react to i5://myPath, enter \"myPath\". string scheme Filters the scheme. If left empty, all schemes are allowed, otherwise only the exact matches will be considered. For instance, to react to any scheme, e.g. i5://myPath but also dbis://myPath, leave it empty. To only react on i5://myPath but not dbis://myPath, enter \"i5\" as the scheme. Properties Path The path of the deep link If you want to react to i5://myPath, enter \"myPath\". Declaration public string Path { get; set; } Property Value Type Description string Scheme Filters the scheme. If left empty, all schemes are allowed, otherwise only the exact matches will be considered. For instance, to react to any scheme, e.g. i5://myPath but also dbis://myPath, leave it empty. To only react on i5://myPath but not dbis://myPath, enter \"i5\" as the scheme. Declaration public string Scheme { get; set; } Property Value Type Description string"
  },
  "api/i5.Toolkit.Core.DeepLinkAPI.DeepLinkingService.html": {
    "href": "api/i5.Toolkit.Core.DeepLinkAPI.DeepLinkingService.html",
    "title": "Class DeepLinkingService | i5 Toolkit Documentation",
    "keywords": "Class DeepLinkingService Service that allows deep links to access the application Use DeepLinkAttribute to mark methods as targets of deep links. Moreover, add classes using DeepLinkAttribute to the list of listeners in this service using AddDeepLinkListener(object). Inheritance object DeepLinkingService Implements IDeepLinkingService Namespace: i5.Toolkit.Core.DeepLinkAPI Assembly: cs.temp.dll.dll Syntax public class DeepLinkingService : IDeepLinkingService Properties ApplicationAPI Reference to an application adapter. In production, this is initialized with an adapter to Unity's Application/>. Declaration public IApplication ApplicationAPI { get; set; } Property Value Type Description IApplication RegisteredListenersCount The number of objects that will be searched for deep link targets Declaration public int RegisteredListenersCount { get; } Property Value Type Description int Methods AddDeepLinkListener(object) Adds the given object instance to the list of objects that are scanned for deep link targets Add every class that has a method with the DeepLinkAttribute so that it can be found. Declaration public void AddDeepLinkListener(object listener) Parameters Type Name Description object listener The object to add the the list of listeners Cleanup() Cleans up the service Declaration public void Cleanup() Initialize(IServiceManager) Initializes the service. Subscribes to the deep link event and checks if a deep link already occurred. Declaration public void Initialize(IServiceManager owner) Parameters Type Name Description IServiceManager owner The service manager that owns this service RemoveDeepLinkListener(object) Removes the instance from the list of listeners that will be scanned Declaration public void RemoveDeepLinkListener(object listener) Parameters Type Name Description object listener The object instance to remove from the listener list Implements IDeepLinkingService"
  },
  "api/i5.Toolkit.Core.DeepLinkAPI.html": {
    "href": "api/i5.Toolkit.Core.DeepLinkAPI.html",
    "title": "Namespace i5.Toolkit.Core.DeepLinkAPI | i5 Toolkit Documentation",
    "keywords": "Namespace i5.Toolkit.Core.DeepLinkAPI Classes DeepLinkArgs Arguments with further information about the received deep link DeepLinkAttribute Attribute which marks a method as a target for deep links Requires a set up DeepLinkingService. Moreover, the class which contains a method with this attribute needs to be registered using AddDeepLinkListener(object) DeepLinkingService Service that allows deep links to access the application Use DeepLinkAttribute to mark methods as targets of deep links. Moreover, add classes using DeepLinkAttribute to the list of listeners in this service using AddDeepLinkListener(object). Interfaces IDeepLinkingService"
  },
  "api/i5.Toolkit.Core.DeepLinkAPI.IDeepLinkingService.html": {
    "href": "api/i5.Toolkit.Core.DeepLinkAPI.IDeepLinkingService.html",
    "title": "Interface IDeepLinkingService | i5 Toolkit Documentation",
    "keywords": "Interface IDeepLinkingService Namespace: i5.Toolkit.Core.DeepLinkAPI Assembly: cs.temp.dll.dll Syntax public interface IDeepLinkingService Methods AddDeepLinkListener(object) Declaration void AddDeepLinkListener(object listener) Parameters Type Name Description object listener RemoveDeepLinkListener(object) Declaration void RemoveDeepLinkListener(object listener) Parameters Type Name Description object listener"
  },
  "api/i5.Toolkit.Core.Editor.TestHelpers.EditModeTestUtilities.html": {
    "href": "api/i5.Toolkit.Core.Editor.TestHelpers.EditModeTestUtilities.html",
    "title": "Class EditModeTestUtilities | i5 Toolkit Documentation",
    "keywords": "Class EditModeTestUtilities Inheritance object EditModeTestUtilities Namespace: i5.Toolkit.Core.Editor.TestHelpers Assembly: cs.temp.dll.dll Syntax public static class EditModeTestUtilities Methods ResetScene() Declaration public static void ResetScene()"
  },
  "api/i5.Toolkit.Core.Editor.TestHelpers.html": {
    "href": "api/i5.Toolkit.Core.Editor.TestHelpers.html",
    "title": "Namespace i5.Toolkit.Core.Editor.TestHelpers | i5 Toolkit Documentation",
    "keywords": "Namespace i5.Toolkit.Core.Editor.TestHelpers Classes EditModeTestUtilities"
  },
  "api/i5.Toolkit.Core.ExperienceAPI.Actor.html": {
    "href": "api/i5.Toolkit.Core.ExperienceAPI.Actor.html",
    "title": "Class Actor | i5 Toolkit Documentation",
    "keywords": "Class Actor The actor/agent of an xAPI statement Inheritance object Actor Namespace: i5.Toolkit.Core.ExperienceAPI Assembly: cs.temp.dll.dll Syntax public class Actor Constructors Actor(string, string) Creates a new actor instance. Declaration public Actor(string mail, string name) Parameters Type Name Description string mail The mail address of the actor. string name The name of the actor. Actor(string) Creates a new actor instance. Declaration public Actor(string mail) Parameters Type Name Description string mail The mail address of the actor Fields name The name of the actor. Optional. Declaration public string name Field Value Type Description string Properties Mbox The mail address in the mailto: scheme. Required Declaration public string Mbox { get; set; } Property Value Type Description string"
  },
  "api/i5.Toolkit.Core.ExperienceAPI.Context.html": {
    "href": "api/i5.Toolkit.Core.ExperienceAPI.Context.html",
    "title": "Class Context | i5 Toolkit Documentation",
    "keywords": "Class Context xAPI statement Context class. Optional. Inheritance object Context Namespace: i5.Toolkit.Core.ExperienceAPI Assembly: cs.temp.dll.dll Syntax public class Context Constructors Context() Creates a new context instance Declaration public Context() Properties ParentActivityIDs A list holding the IDs of activities that serve as context-parent to this statement. There is usually just one parent activity, but the standard allows for more. The IDs need to be IRIs, the same ones used in xAPI Object IDs. Declaration public List<string> ParentActivityIDs { get; set; } Property Value Type Description System.Collections.Generic.List<T><string> Methods AddParentActivity(string) Adds parent activity to the context. Declaration public void AddParentActivity(string parentActivityId) Parameters Type Name Description string parentActivityId The ID of the parent activity"
  },
  "api/i5.Toolkit.Core.ExperienceAPI.ExperienceAPIClient.html": {
    "href": "api/i5.Toolkit.Core.ExperienceAPI.ExperienceAPIClient.html",
    "title": "Class ExperienceAPIClient | i5 Toolkit Documentation",
    "keywords": "Class ExperienceAPIClient A client for connecting to the xAPI Web service Inheritance object ExperienceAPIClient Namespace: i5.Toolkit.Core.ExperienceAPI Assembly: cs.temp.dll.dll Syntax public class ExperienceAPIClient Constructors ExperienceAPIClient() Creates a new xAPI client with default settings Declaration public ExperienceAPIClient() ExperienceAPIClient(Uri, string, string) Creates a new xAPI client with the given configuration Declaration public ExperienceAPIClient(Uri xApiEndpoint, string authorizationToken, string version) Parameters Type Name Description Uri xApiEndpoint The target URI of the xAPI string authorizationToken The authorization token to allow the client to access the xAPI string version The version of the xAPI Properties AuthorizationToken The authorization token to allow the client to access the xAPI Declaration public string AuthorizationToken { get; set; } Property Value Type Description string IsInAdvancedMode States whether the client operates in advanced mode or standard mode. In advanced mode, more complex statements can be serialized. To enable advanced mode, load the Newtonsoft JSON library for Unity under https://github.com/jilleJr/Newtonsoft.Json-for-Unity. Declaration public bool IsInAdvancedMode { get; } Property Value Type Description bool Version The API version. By default 1.0.3 Declaration public string Version { get; set; } Property Value Type Description string WebConnector The Web connector that determines how the API is queried Declaration public IRestConnector WebConnector { get; set; } Property Value Type Description IRestConnector XApiEndpoint The target uri where the xAPI can be found Declaration public Uri XApiEndpoint { get; set; } Property Value Type Description Uri Methods SendStatementAsync(Actor, Verb, XApiObject) Sends a new statement to the xAPI repository Initializes the statement with the given actor, verb and object Declaration public Task<WebResponse<string>> SendStatementAsync(Actor actor, Verb verb, XApiObject obj) Parameters Type Name Description Actor actor The actor of the statement Verb verb The verb of the statement XApiObject obj The object of the statement Returns Type Description Task<><WebResponse<string>> Returns the result of the Web query; if successful, this contains the generated statement id SendStatementAsync(Statement) Sends a new statement to the xAPI repository Declaration public Task<WebResponse<string>> SendStatementAsync(Statement statement) Parameters Type Name Description Statement statement The xAPI statement that should be sent Returns Type Description Task<><WebResponse<string>> Returns the result of the Web query; if successful, this contains the generated statement id SendStatementAsync(string, string, string) Sends a new statement to the xAPI repository Initializes the statement with the given actor, verb and object ids Declaration public Task<WebResponse<string>> SendStatementAsync(string actorMail, string verbUrl, string objectUrl) Parameters Type Name Description string actorMail The mail address of the statement's actor string verbUrl The id of the statement's verb (should be a url) string objectUrl The id of the statement's object Returns Type Description Task<><WebResponse<string>> Returns the result of the Web query; if successful, this contains the generated statement id"
  },
  "api/i5.Toolkit.Core.ExperienceAPI.html": {
    "href": "api/i5.Toolkit.Core.ExperienceAPI.html",
    "title": "Namespace i5.Toolkit.Core.ExperienceAPI | i5 Toolkit Documentation",
    "keywords": "Namespace i5.Toolkit.Core.ExperienceAPI Classes Actor The actor/agent of an xAPI statement Context xAPI statement Context class. Optional. ExperienceAPIClient A client for connecting to the xAPI Web service Result xAPI statement Result class. Optional. Statement A statement for the xAPI Verb The verb of an xAPI statement XApiObject Object of an xAPI statement. The object type here is always Activity."
  },
  "api/i5.Toolkit.Core.ExperienceAPI.Result.html": {
    "href": "api/i5.Toolkit.Core.ExperienceAPI.Result.html",
    "title": "Class Result | i5 Toolkit Documentation",
    "keywords": "Class Result xAPI statement Result class. Optional. Inheritance object Result Namespace: i5.Toolkit.Core.ExperienceAPI Assembly: cs.temp.dll.dll Syntax public class Result Constructors Result() Creates a new xAPI result instance Declaration public Result() Fields completion Completion property of a Result. Indicates whether or not the Activity was completed. Declaration public bool? completion Field Value Type Description bool? duration Duration property of a Result. Period of time over which the Statement occurred. Must be ISO 8601 Duration compatible. Declaration public TimeSpan? duration Field Value Type Description TimeSpan? extensions Extensions property of a Result. Keys MUST be IRIs. Declaration public Dictionary<string, string> extensions Field Value Type Description System.Collections.Generic.Dictionary<TKey, TValue><string, string> response Response property of a Result. A response appropriately formatted for the given Activity. Declaration public string response Field Value Type Description string success Success property of a Result. Indicates whether or not the attempt on the Activity was successful. Declaration public bool? success Field Value Type Description bool? Methods AddMeasurementAttempt(string, string) Adds a measurement attempt as a result of an activity. Realised as an extenstion of the Result field. Declaration public void AddMeasurementAttempt(string measurementIRI, string measuredValue) Parameters Type Name Description string measurementIRI The IRI to be used to define the result extension. string measuredValue The value of the measurement."
  },
  "api/i5.Toolkit.Core.ExperienceAPI.Statement.html": {
    "href": "api/i5.Toolkit.Core.ExperienceAPI.Statement.html",
    "title": "Class Statement | i5 Toolkit Documentation",
    "keywords": "Class Statement A statement for the xAPI Inheritance object Statement Namespace: i5.Toolkit.Core.ExperienceAPI Assembly: cs.temp.dll.dll Syntax public class Statement Constructors Statement(Actor, Verb, XApiObject) Creates a new instance of an xAPI Statement. Declaration public Statement(Actor actor, Verb verb, XApiObject xapiObject) Parameters Type Name Description Actor actor The Actor object of the statement. Verb verb The Verb object of the statement. XApiObject xapiObject The XApiObject of the statement. Statement(string, string, string) Creates a new instance of an xAPI statement Declaration public Statement(string actorMail, string verbUrl, string objectUrl) Parameters Type Name Description string actorMail The mail address of the actor string verbUrl The id of the verb (should be a url) string objectUrl The id of the object (should be a url) Fields actor The actor of the xAPI statement Declaration public Actor actor Field Value Type Description Actor context The context of the xAPI statement. An optional property that provides a place to add contextual information to a Statement. Declaration public Context context Field Value Type Description Context object The object of the xAPI statement Declaration public XApiObject @object Field Value Type Description XApiObject result The result of the xAPI statement. An optional property that represents a measured outcome related to the Statement in which it is included. Declaration public Result result Field Value Type Description Result timestamp The time at which the experience occured. Optional, but if not provided will be given by the LRS upon receipt/storing. Declaration public DateTime? timestamp Field Value Type Description DateTime? verb The verb of the xAPI statement Declaration public Verb verb Field Value Type Description Verb Methods ToJSONString() Declaration public string ToJSONString() Returns Type Description string"
  },
  "api/i5.Toolkit.Core.ExperienceAPI.Verb.html": {
    "href": "api/i5.Toolkit.Core.ExperienceAPI.Verb.html",
    "title": "Class Verb | i5 Toolkit Documentation",
    "keywords": "Class Verb The verb of an xAPI statement Inheritance object Verb Namespace: i5.Toolkit.Core.ExperienceAPI Assembly: cs.temp.dll.dll Syntax public class Verb Constructors Verb(string) Creates a Verb instance. Declaration public Verb(string verbID) Parameters Type Name Description string verbID The verb ID as a URI. Fields displayLanguageDictionary The human readable representation of the Verb in one or more languages. Keys are language/region codes (e.g. en-us, es, ...). Values are the display names of the verbs in that language. Optional/Dictionary can be empty. Declaration public Dictionary<string, string> displayLanguageDictionary Field Value Type Description System.Collections.Generic.Dictionary<TKey, TValue><string, string> id The id of the verb. MUST be an IRI. Required. Declaration public string id Field Value Type Description string Methods CutToVerbName(string) Retreives the verb name from a verb IRI. As it is standard to put the verb name at the end of an IRI, it is then possible to be retreived. E.g. 'http://test.org/x/y/z/.../verbName' gives 'verbName'. Declaration public static string CutToVerbName(string verbID) Parameters Type Name Description string verbID Returns Type Description string"
  },
  "api/i5.Toolkit.Core.ExperienceAPI.XApiObject.html": {
    "href": "api/i5.Toolkit.Core.ExperienceAPI.XApiObject.html",
    "title": "Class XApiObject | i5 Toolkit Documentation",
    "keywords": "Class XApiObject Object of an xAPI statement. The object type here is always Activity. Inheritance object XApiObject Namespace: i5.Toolkit.Core.ExperienceAPI Assembly: cs.temp.dll.dll Syntax public class XApiObject Constructors XApiObject(string) Declaration public XApiObject(string objectID) Parameters Type Name Description string objectID Fields descriptionDisplay Dictionary that holds the descriptions of the activity in various languages. Keys are language/region codes (e.g. en-us, es, ...). Values are the names of the object in that language. Optional/Dictionary can be empty. Declaration public Dictionary<string, string> descriptionDisplay Field Value Type Description System.Collections.Generic.Dictionary<TKey, TValue><string, string> id Id of the object. Required. Declaration public string id Field Value Type Description string nameDisplay Dictionary that holds the human readable/visual names of the Activity in various languages. Keys are language/region codes (e.g. en-us, es, ...). Values are the names of the object in that language. Optional/Dictionary can be empty. Declaration public Dictionary<string, string> nameDisplay Field Value Type Description System.Collections.Generic.Dictionary<TKey, TValue><string, string> type Declaration public string type Field Value Type Description string Methods AddDescription(string, string) Add a display description for an object in the desired language Declaration public void AddDescription(string description, string languageCode = \"en-us\") Parameters Type Name Description string description string languageCode Language/region codes such as 'en-us', 'en-uk', 'es'... Default value is 'en-us'. AddName(string, string) Add a display name for an object in the desired language. Declaration public void AddName(string name, string languageCode = \"en-us\") Parameters Type Name Description string name The name of the object in the desired language. string languageCode Language/region codes such as 'en-us', 'en-uk', 'es'... Default value is 'en-us'."
  },
  "api/i5.Toolkit.Core.Experimental.NotificationSystem.html": {
    "href": "api/i5.Toolkit.Core.Experimental.NotificationSystem.html",
    "title": "Namespace i5.Toolkit.Core.Experimental.NotificationSystem | i5 Toolkit Documentation",
    "keywords": "Namespace i5.Toolkit.Core.Experimental.NotificationSystem Classes NotificationMessage NotificationService Interfaces INotificationMessage INotificationService"
  },
  "api/i5.Toolkit.Core.Experimental.NotificationSystem.INotificationMessage.html": {
    "href": "api/i5.Toolkit.Core.Experimental.NotificationSystem.INotificationMessage.html",
    "title": "Interface INotificationMessage | i5 Toolkit Documentation",
    "keywords": "Interface INotificationMessage Namespace: i5.Toolkit.Core.Experimental.NotificationSystem Assembly: cs.temp.dll.dll Syntax public interface INotificationMessage Properties Content Declaration string Content { get; } Property Value Type Description string"
  },
  "api/i5.Toolkit.Core.Experimental.NotificationSystem.INotificationService.html": {
    "href": "api/i5.Toolkit.Core.Experimental.NotificationSystem.INotificationService.html",
    "title": "Interface INotificationService | i5 Toolkit Documentation",
    "keywords": "Interface INotificationService Namespace: i5.Toolkit.Core.Experimental.NotificationSystem Assembly: cs.temp.dll.dll Syntax public interface INotificationService Methods PostNotification(INotificationMessage) Declaration void PostNotification(INotificationMessage message) Parameters Type Name Description INotificationMessage message PostNotification(string) Declaration void PostNotification(string message) Parameters Type Name Description string message Events NotificationPosted Declaration event EventHandler<INotificationMessage> NotificationPosted Event Type Type Description EventHandler<><INotificationMessage>"
  },
  "api/i5.Toolkit.Core.Experimental.NotificationSystem.NotificationMessage.html": {
    "href": "api/i5.Toolkit.Core.Experimental.NotificationSystem.NotificationMessage.html",
    "title": "Class NotificationMessage | i5 Toolkit Documentation",
    "keywords": "Class NotificationMessage Inheritance object NotificationMessage Implements INotificationMessage Namespace: i5.Toolkit.Core.Experimental.NotificationSystem Assembly: cs.temp.dll.dll Syntax public class NotificationMessage : INotificationMessage Constructors NotificationMessage(string) Declaration public NotificationMessage(string content) Parameters Type Name Description string content Properties Content Declaration public string Content { get; } Property Value Type Description string Implements INotificationMessage"
  },
  "api/i5.Toolkit.Core.Experimental.NotificationSystem.NotificationService.html": {
    "href": "api/i5.Toolkit.Core.Experimental.NotificationSystem.NotificationService.html",
    "title": "Class NotificationService | i5 Toolkit Documentation",
    "keywords": "Class NotificationService Inheritance object NotificationService Implements INotificationService Namespace: i5.Toolkit.Core.Experimental.NotificationSystem Assembly: cs.temp.dll.dll Syntax public class NotificationService : INotificationService Constructors NotificationService() Declaration public NotificationService() Methods Cleanup() Declaration public void Cleanup() Initialize(IServiceManager) Declaration public void Initialize(IServiceManager owner) Parameters Type Name Description IServiceManager owner PostNotification(INotificationMessage) Declaration public void PostNotification(INotificationMessage message) Parameters Type Name Description INotificationMessage message PostNotification(string) Declaration public void PostNotification(string message) Parameters Type Name Description string message Events NotificationPosted Declaration public event EventHandler<INotificationMessage> NotificationPosted Event Type Type Description EventHandler<><INotificationMessage> Implements INotificationService"
  },
  "api/i5.Toolkit.Core.Experimental.SystemAdapters.DirectoryAccessorAdapter.html": {
    "href": "api/i5.Toolkit.Core.Experimental.SystemAdapters.DirectoryAccessorAdapter.html",
    "title": "Class DirectoryAccessorAdapter | i5 Toolkit Documentation",
    "keywords": "Class DirectoryAccessorAdapter Inheritance object DirectoryAccessorAdapter Implements IDirectoryAccessor Namespace: i5.Toolkit.Core.Experimental.SystemAdapters Assembly: cs.temp.dll.dll Syntax public class DirectoryAccessorAdapter : IDirectoryAccessor Methods Exists(string) Declaration public bool Exists(string path) Parameters Type Name Description string path Returns Type Description bool Implements IDirectoryAccessor"
  },
  "api/i5.Toolkit.Core.Experimental.SystemAdapters.FileAccessorAdapter.html": {
    "href": "api/i5.Toolkit.Core.Experimental.SystemAdapters.FileAccessorAdapter.html",
    "title": "Class FileAccessorAdapter | i5 Toolkit Documentation",
    "keywords": "Class FileAccessorAdapter Inheritance object FileAccessorAdapter Implements IFileAccessor Namespace: i5.Toolkit.Core.Experimental.SystemAdapters Assembly: cs.temp.dll.dll Syntax public class FileAccessorAdapter : IFileAccessor Methods Delete(string) Declaration public void Delete(string path) Parameters Type Name Description string path Exists(string) Declaration public bool Exists(string path) Parameters Type Name Description string path Returns Type Description bool OpenRead(string) Declaration public FileStream OpenRead(string path) Parameters Type Name Description string path Returns Type Description FileStream ReadAllText(string) Declaration public string ReadAllText(string path) Parameters Type Name Description string path Returns Type Description string WriteAllText(string, string) Declaration public void WriteAllText(string path, string contents) Parameters Type Name Description string path string contents Implements IFileAccessor"
  },
  "api/i5.Toolkit.Core.Experimental.SystemAdapters.html": {
    "href": "api/i5.Toolkit.Core.Experimental.SystemAdapters.html",
    "title": "Namespace i5.Toolkit.Core.Experimental.SystemAdapters | i5 Toolkit Documentation",
    "keywords": "Namespace i5.Toolkit.Core.Experimental.SystemAdapters Classes DirectoryAccessorAdapter FileAccessorAdapter SystemEnvironmentAdapter Interfaces IDirectoryAccessor IFileAccessor ISystemEnvironment"
  },
  "api/i5.Toolkit.Core.Experimental.SystemAdapters.IDirectoryAccessor.html": {
    "href": "api/i5.Toolkit.Core.Experimental.SystemAdapters.IDirectoryAccessor.html",
    "title": "Interface IDirectoryAccessor | i5 Toolkit Documentation",
    "keywords": "Interface IDirectoryAccessor Namespace: i5.Toolkit.Core.Experimental.SystemAdapters Assembly: cs.temp.dll.dll Syntax public interface IDirectoryAccessor Methods Exists(string) Declaration bool Exists(string path) Parameters Type Name Description string path Returns Type Description bool"
  },
  "api/i5.Toolkit.Core.Experimental.SystemAdapters.IFileAccessor.html": {
    "href": "api/i5.Toolkit.Core.Experimental.SystemAdapters.IFileAccessor.html",
    "title": "Interface IFileAccessor | i5 Toolkit Documentation",
    "keywords": "Interface IFileAccessor Namespace: i5.Toolkit.Core.Experimental.SystemAdapters Assembly: cs.temp.dll.dll Syntax public interface IFileAccessor Methods Delete(string) Declaration void Delete(string path) Parameters Type Name Description string path Exists(string) Declaration bool Exists(string path) Parameters Type Name Description string path Returns Type Description bool OpenRead(string) Declaration FileStream OpenRead(string path) Parameters Type Name Description string path Returns Type Description FileStream ReadAllText(string) Declaration string ReadAllText(string path) Parameters Type Name Description string path Returns Type Description string WriteAllText(string, string) Declaration void WriteAllText(string path, string contents) Parameters Type Name Description string path string contents"
  },
  "api/i5.Toolkit.Core.Experimental.SystemAdapters.ISystemEnvironment.html": {
    "href": "api/i5.Toolkit.Core.Experimental.SystemAdapters.ISystemEnvironment.html",
    "title": "Interface ISystemEnvironment | i5 Toolkit Documentation",
    "keywords": "Interface ISystemEnvironment Namespace: i5.Toolkit.Core.Experimental.SystemAdapters Assembly: cs.temp.dll.dll Syntax public interface ISystemEnvironment Methods GetEnvironmentVariable(string) Declaration string GetEnvironmentVariable(string variable) Parameters Type Name Description string variable Returns Type Description string"
  },
  "api/i5.Toolkit.Core.Experimental.SystemAdapters.SystemEnvironmentAdapter.html": {
    "href": "api/i5.Toolkit.Core.Experimental.SystemAdapters.SystemEnvironmentAdapter.html",
    "title": "Class SystemEnvironmentAdapter | i5 Toolkit Documentation",
    "keywords": "Class SystemEnvironmentAdapter Inheritance object SystemEnvironmentAdapter Implements ISystemEnvironment Namespace: i5.Toolkit.Core.Experimental.SystemAdapters Assembly: cs.temp.dll.dll Syntax public class SystemEnvironmentAdapter : ISystemEnvironment Methods GetEnvironmentVariable(string) Declaration public string GetEnvironmentVariable(string variable) Parameters Type Name Description string variable Returns Type Description string Implements ISystemEnvironment"
  },
  "api/i5.Toolkit.Core.Experimental.UnityAdapters.ApplicationAdapter.html": {
    "href": "api/i5.Toolkit.Core.Experimental.UnityAdapters.ApplicationAdapter.html",
    "title": "Class ApplicationAdapter | i5 Toolkit Documentation",
    "keywords": "Class ApplicationAdapter Adapter for Unity's Application Inheritance object ApplicationAdapter Implements IApplication Namespace: i5.Toolkit.Core.Experimental.UnityAdapters Assembly: cs.temp.dll.dll Syntax public class ApplicationAdapter : IApplication Constructors ApplicationAdapter() Creates a new instance of the ApplicationWrapper Declaration public ApplicationAdapter() Properties AbsoluteURL Connects to Application.absoluteURL Declaration public string AbsoluteURL { get; } Property Value Type Description string Events DeepLinkActivated Connects to Application.deepLinkActivated Declaration public event EventHandler<string> DeepLinkActivated Event Type Type Description EventHandler<><string> Implements IApplication"
  },
  "api/i5.Toolkit.Core.Experimental.UnityAdapters.BoxColliderAdapter.html": {
    "href": "api/i5.Toolkit.Core.Experimental.UnityAdapters.BoxColliderAdapter.html",
    "title": "Class BoxColliderAdapter | i5 Toolkit Documentation",
    "keywords": "Class BoxColliderAdapter Inheritance object BoxColliderAdapter Implements IBoxVolume Namespace: i5.Toolkit.Core.Experimental.UnityAdapters Assembly: cs.temp.dll.dll Syntax public class BoxColliderAdapter : IBoxVolume Properties Adaptee Declaration public BoxCollider Adaptee { get; } Property Value Type Description BoxCollider Center Declaration public Vector3 Center { get; set; } Property Value Type Description Vector3 Rotation Declaration public Quaternion Rotation { get; set; } Property Value Type Description Quaternion Size Declaration public Vector3 Size { get; set; } Property Value Type Description Vector3 Implements IBoxVolume"
  },
  "api/i5.Toolkit.Core.Experimental.UnityAdapters.GameObjectAdapter.html": {
    "href": "api/i5.Toolkit.Core.Experimental.UnityAdapters.GameObjectAdapter.html",
    "title": "Class GameObjectAdapter | i5 Toolkit Documentation",
    "keywords": "Class GameObjectAdapter Inheritance object GameObjectAdapter Implements IActivateable Namespace: i5.Toolkit.Core.Experimental.UnityAdapters Assembly: cs.temp.dll.dll Syntax public class GameObjectAdapter : IActivateable Constructors GameObjectAdapter(GameObject) Declaration public GameObjectAdapter(GameObject adaptee) Parameters Type Name Description GameObject adaptee Properties ActiveInHierarchy Declaration public bool ActiveInHierarchy { get; set; } Property Value Type Description bool ActiveSelf Declaration public bool ActiveSelf { get; set; } Property Value Type Description bool Adaptee Declaration public GameObject Adaptee { get; } Property Value Type Description GameObject Implements IActivateable"
  },
  "api/i5.Toolkit.Core.Experimental.UnityAdapters.html": {
    "href": "api/i5.Toolkit.Core.Experimental.UnityAdapters.html",
    "title": "Namespace i5.Toolkit.Core.Experimental.UnityAdapters | i5 Toolkit Documentation",
    "keywords": "Namespace i5.Toolkit.Core.Experimental.UnityAdapters Classes ApplicationAdapter Adapter for Unity's Application BoxColliderAdapter GameObjectAdapter RectTransformAdapter SceneManagerAdapter ScrollRectAdapter TextMeshProTextAdapter TextMeshProUGUITextAdapter TextMeshTextAdapter TransformAdapter Interfaces IActivateable IApplication Interface for the application run-time data IBoxVolume IRectangle ISceneManager IScrollView ITextDisplay ITransformable"
  },
  "api/i5.Toolkit.Core.Experimental.UnityAdapters.IActivateable.html": {
    "href": "api/i5.Toolkit.Core.Experimental.UnityAdapters.IActivateable.html",
    "title": "Interface IActivateable | i5 Toolkit Documentation",
    "keywords": "Interface IActivateable Namespace: i5.Toolkit.Core.Experimental.UnityAdapters Assembly: cs.temp.dll.dll Syntax public interface IActivateable Properties ActiveSelf Declaration bool ActiveSelf { get; set; } Property Value Type Description bool"
  },
  "api/i5.Toolkit.Core.Experimental.UnityAdapters.IApplication.html": {
    "href": "api/i5.Toolkit.Core.Experimental.UnityAdapters.IApplication.html",
    "title": "Interface IApplication | i5 Toolkit Documentation",
    "keywords": "Interface IApplication Interface for the application run-time data Namespace: i5.Toolkit.Core.Experimental.UnityAdapters Assembly: cs.temp.dll.dll Syntax public interface IApplication Properties AbsoluteURL The URL of the document. For non-Web-apps: deep link URL which activated the app Declaration string AbsoluteURL { get; } Property Value Type Description string Events DeepLinkActivated Event which is raised if a deep link is received Declaration event EventHandler<string> DeepLinkActivated Event Type Type Description EventHandler<><string>"
  },
  "api/i5.Toolkit.Core.Experimental.UnityAdapters.IBoxVolume.html": {
    "href": "api/i5.Toolkit.Core.Experimental.UnityAdapters.IBoxVolume.html",
    "title": "Interface IBoxVolume | i5 Toolkit Documentation",
    "keywords": "Interface IBoxVolume Namespace: i5.Toolkit.Core.Experimental.UnityAdapters Assembly: cs.temp.dll.dll Syntax public interface IBoxVolume Properties Center Declaration Vector3 Center { get; set; } Property Value Type Description Vector3 Rotation Declaration Quaternion Rotation { get; set; } Property Value Type Description Quaternion Size Declaration Vector3 Size { get; set; } Property Value Type Description Vector3"
  },
  "api/i5.Toolkit.Core.Experimental.UnityAdapters.IRectangle.html": {
    "href": "api/i5.Toolkit.Core.Experimental.UnityAdapters.IRectangle.html",
    "title": "Interface IRectangle | i5 Toolkit Documentation",
    "keywords": "Interface IRectangle Namespace: i5.Toolkit.Core.Experimental.UnityAdapters Assembly: cs.temp.dll.dll Syntax public interface IRectangle Properties Size Declaration Vector2 Size { get; set; } Property Value Type Description Vector2"
  },
  "api/i5.Toolkit.Core.Experimental.UnityAdapters.ISceneManager.html": {
    "href": "api/i5.Toolkit.Core.Experimental.UnityAdapters.ISceneManager.html",
    "title": "Interface ISceneManager | i5 Toolkit Documentation",
    "keywords": "Interface ISceneManager Namespace: i5.Toolkit.Core.Experimental.UnityAdapters Assembly: cs.temp.dll.dll Syntax public interface ISceneManager Methods GetSceneByBuildIndex(int) Declaration Scene GetSceneByBuildIndex(int index) Parameters Type Name Description int index Returns Type Description Scene LoadSceneAsync(int, LoadSceneMode) Declaration AsyncOperation LoadSceneAsync(int sceneBuildIndex, LoadSceneMode mode) Parameters Type Name Description int sceneBuildIndex LoadSceneMode mode Returns Type Description AsyncOperation LoadSceneAsync(int) Declaration AsyncOperation LoadSceneAsync(int sceneBuildIndex) Parameters Type Name Description int sceneBuildIndex Returns Type Description AsyncOperation UnloadSceneAsync(Scene) Declaration AsyncOperation UnloadSceneAsync(Scene scene) Parameters Type Name Description Scene scene Returns Type Description AsyncOperation"
  },
  "api/i5.Toolkit.Core.Experimental.UnityAdapters.IScrollView.html": {
    "href": "api/i5.Toolkit.Core.Experimental.UnityAdapters.IScrollView.html",
    "title": "Interface IScrollView | i5 Toolkit Documentation",
    "keywords": "Interface IScrollView Namespace: i5.Toolkit.Core.Experimental.UnityAdapters Assembly: cs.temp.dll.dll Syntax public interface IScrollView Properties NormalizedPosition Declaration Vector2 NormalizedPosition { get; set; } Property Value Type Description Vector2"
  },
  "api/i5.Toolkit.Core.Experimental.UnityAdapters.ITextDisplay.html": {
    "href": "api/i5.Toolkit.Core.Experimental.UnityAdapters.ITextDisplay.html",
    "title": "Interface ITextDisplay | i5 Toolkit Documentation",
    "keywords": "Interface ITextDisplay Namespace: i5.Toolkit.Core.Experimental.UnityAdapters Assembly: cs.temp.dll.dll Syntax public interface ITextDisplay Properties Text Declaration string Text { get; set; } Property Value Type Description string"
  },
  "api/i5.Toolkit.Core.Experimental.UnityAdapters.ITransformable.html": {
    "href": "api/i5.Toolkit.Core.Experimental.UnityAdapters.ITransformable.html",
    "title": "Interface ITransformable | i5 Toolkit Documentation",
    "keywords": "Interface ITransformable Namespace: i5.Toolkit.Core.Experimental.UnityAdapters Assembly: cs.temp.dll.dll Syntax public interface ITransformable Properties EulerAngles Declaration Vector3 EulerAngles { get; set; } Property Value Type Description Vector3 LocalEulerAngles Declaration Vector3 LocalEulerAngles { get; set; } Property Value Type Description Vector3 LocalPosition Declaration Vector3 LocalPosition { get; set; } Property Value Type Description Vector3 LocalRotation Declaration Quaternion LocalRotation { get; set; } Property Value Type Description Quaternion LocalScale Declaration Vector3 LocalScale { get; set; } Property Value Type Description Vector3 LossyScale Declaration Vector3 LossyScale { get; } Property Value Type Description Vector3 Position Declaration Vector3 Position { get; set; } Property Value Type Description Vector3 Rotation Declaration Quaternion Rotation { get; set; } Property Value Type Description Quaternion"
  },
  "api/i5.Toolkit.Core.Experimental.UnityAdapters.RectTransformAdapter.html": {
    "href": "api/i5.Toolkit.Core.Experimental.UnityAdapters.RectTransformAdapter.html",
    "title": "Class RectTransformAdapter | i5 Toolkit Documentation",
    "keywords": "Class RectTransformAdapter Inheritance object TransformAdapter RectTransformAdapter Implements ITransformable IRectangle Inherited Members TransformAdapter.Position TransformAdapter.LocalPosition TransformAdapter.Rotation TransformAdapter.LocalRotation TransformAdapter.EulerAngles TransformAdapter.LocalEulerAngles TransformAdapter.LocalScale TransformAdapter.LossyScale Namespace: i5.Toolkit.Core.Experimental.UnityAdapters Assembly: cs.temp.dll.dll Syntax public class RectTransformAdapter : TransformAdapter, ITransformable, IRectangle Constructors RectTransformAdapter(RectTransform) Declaration public RectTransformAdapter(RectTransform adaptee) Parameters Type Name Description RectTransform adaptee Properties Adaptee Declaration public RectTransform Adaptee { get; } Property Value Type Description RectTransform Size Declaration public Vector2 Size { get; set; } Property Value Type Description Vector2 Implements ITransformable IRectangle"
  },
  "api/i5.Toolkit.Core.Experimental.UnityAdapters.SceneManagerAdapter.html": {
    "href": "api/i5.Toolkit.Core.Experimental.UnityAdapters.SceneManagerAdapter.html",
    "title": "Class SceneManagerAdapter | i5 Toolkit Documentation",
    "keywords": "Class SceneManagerAdapter Inheritance object SceneManagerAdapter Implements ISceneManager Namespace: i5.Toolkit.Core.Experimental.UnityAdapters Assembly: cs.temp.dll.dll Syntax public class SceneManagerAdapter : ISceneManager Methods GetSceneByBuildIndex(int) Declaration public Scene GetSceneByBuildIndex(int index) Parameters Type Name Description int index Returns Type Description Scene LoadSceneAsync(int, LoadSceneMode) Declaration public AsyncOperation LoadSceneAsync(int sceneBuildIndex, LoadSceneMode mode) Parameters Type Name Description int sceneBuildIndex LoadSceneMode mode Returns Type Description AsyncOperation LoadSceneAsync(int) Declaration public AsyncOperation LoadSceneAsync(int sceneBuildIndex) Parameters Type Name Description int sceneBuildIndex Returns Type Description AsyncOperation UnloadSceneAsync(Scene) Declaration public AsyncOperation UnloadSceneAsync(Scene scene) Parameters Type Name Description Scene scene Returns Type Description AsyncOperation Implements ISceneManager"
  },
  "api/i5.Toolkit.Core.Experimental.UnityAdapters.ScrollRectAdapter.html": {
    "href": "api/i5.Toolkit.Core.Experimental.UnityAdapters.ScrollRectAdapter.html",
    "title": "Class ScrollRectAdapter | i5 Toolkit Documentation",
    "keywords": "Class ScrollRectAdapter Inheritance object ScrollRectAdapter Implements IScrollView Namespace: i5.Toolkit.Core.Experimental.UnityAdapters Assembly: cs.temp.dll.dll Syntax public class ScrollRectAdapter : IScrollView Constructors ScrollRectAdapter(ScrollRect) Declaration public ScrollRectAdapter(ScrollRect adaptee) Parameters Type Name Description ScrollRect adaptee Properties Adaptee Declaration public ScrollRect Adaptee { get; } Property Value Type Description ScrollRect NormalizedPosition Declaration public Vector2 NormalizedPosition { get; set; } Property Value Type Description Vector2 Implements IScrollView"
  },
  "api/i5.Toolkit.Core.Experimental.UnityAdapters.TextMeshProTextAdapter.html": {
    "href": "api/i5.Toolkit.Core.Experimental.UnityAdapters.TextMeshProTextAdapter.html",
    "title": "Class TextMeshProTextAdapter | i5 Toolkit Documentation",
    "keywords": "Class TextMeshProTextAdapter Inheritance object TextMeshProTextAdapter Implements ITextDisplay Namespace: i5.Toolkit.Core.Experimental.UnityAdapters Assembly: cs.temp.dll.dll Syntax public class TextMeshProTextAdapter : ITextDisplay Constructors TextMeshProTextAdapter(TextMeshPro) Declaration public TextMeshProTextAdapter(TextMeshPro textMesh) Parameters Type Name Description TextMeshPro textMesh Properties Text Declaration public string Text { get; set; } Property Value Type Description string TextMesh Declaration public TextMeshPro TextMesh { get; } Property Value Type Description TextMeshPro Implements ITextDisplay"
  },
  "api/i5.Toolkit.Core.Experimental.UnityAdapters.TextMeshProUGUITextAdapter.html": {
    "href": "api/i5.Toolkit.Core.Experimental.UnityAdapters.TextMeshProUGUITextAdapter.html",
    "title": "Class TextMeshProUGUITextAdapter | i5 Toolkit Documentation",
    "keywords": "Class TextMeshProUGUITextAdapter Inheritance object TextMeshProUGUITextAdapter Implements ITextDisplay Namespace: i5.Toolkit.Core.Experimental.UnityAdapters Assembly: cs.temp.dll.dll Syntax public class TextMeshProUGUITextAdapter : ITextDisplay Constructors TextMeshProUGUITextAdapter(TextMeshProUGUI) Declaration public TextMeshProUGUITextAdapter(TextMeshProUGUI textMesh) Parameters Type Name Description TextMeshProUGUI textMesh Properties Text Declaration public string Text { get; set; } Property Value Type Description string TextMesh Declaration public TextMeshProUGUI TextMesh { get; } Property Value Type Description TextMeshProUGUI Implements ITextDisplay"
  },
  "api/i5.Toolkit.Core.Experimental.UnityAdapters.TextMeshTextAdapter.html": {
    "href": "api/i5.Toolkit.Core.Experimental.UnityAdapters.TextMeshTextAdapter.html",
    "title": "Class TextMeshTextAdapter | i5 Toolkit Documentation",
    "keywords": "Class TextMeshTextAdapter Inheritance object TextMeshTextAdapter Implements ITextDisplay Namespace: i5.Toolkit.Core.Experimental.UnityAdapters Assembly: cs.temp.dll.dll Syntax public class TextMeshTextAdapter : ITextDisplay Constructors TextMeshTextAdapter(TextMesh) Declaration public TextMeshTextAdapter(TextMesh textMesh) Parameters Type Name Description TextMesh textMesh Properties Text Declaration public string Text { get; set; } Property Value Type Description string TextMesh Declaration public TextMesh TextMesh { get; } Property Value Type Description TextMesh Implements ITextDisplay"
  },
  "api/i5.Toolkit.Core.Experimental.UnityAdapters.TransformAdapter.html": {
    "href": "api/i5.Toolkit.Core.Experimental.UnityAdapters.TransformAdapter.html",
    "title": "Class TransformAdapter | i5 Toolkit Documentation",
    "keywords": "Class TransformAdapter Inheritance object TransformAdapter RectTransformAdapter Implements ITransformable Namespace: i5.Toolkit.Core.Experimental.UnityAdapters Assembly: cs.temp.dll.dll Syntax public class TransformAdapter : ITransformable Constructors TransformAdapter(Transform) Declaration public TransformAdapter(Transform adaptee) Parameters Type Name Description Transform adaptee Properties Adaptee Declaration public Transform Adaptee { get; protected set; } Property Value Type Description Transform EulerAngles Declaration public Vector3 EulerAngles { get; set; } Property Value Type Description Vector3 LocalEulerAngles Declaration public Vector3 LocalEulerAngles { get; set; } Property Value Type Description Vector3 LocalPosition Declaration public Vector3 LocalPosition { get; set; } Property Value Type Description Vector3 LocalRotation Declaration public Quaternion LocalRotation { get; set; } Property Value Type Description Quaternion LocalScale Declaration public Vector3 LocalScale { get; set; } Property Value Type Description Vector3 LossyScale Declaration public Vector3 LossyScale { get; } Property Value Type Description Vector3 Position Declaration public Vector3 Position { get; set; } Property Value Type Description Vector3 Rotation Declaration public Quaternion Rotation { get; set; } Property Value Type Description Quaternion Implements ITransformable"
  },
  "api/i5.Toolkit.Core.ModelImporters.html": {
    "href": "api/i5.Toolkit.Core.ModelImporters.html",
    "title": "Namespace i5.Toolkit.Core.ModelImporters | i5 Toolkit Documentation",
    "keywords": "Namespace i5.Toolkit.Core.ModelImporters Classes MtlLibrary Class for parsing and storing material libraries from .mtl files ObjImporter Service for importing and parsing .obj files ObjParseResult Result of one sub-object of a parsing operation for a .obj file Structs VertexData Stores data for one vertex Interfaces IMtlLibrary"
  },
  "api/i5.Toolkit.Core.ModelImporters.IMtlLibrary.html": {
    "href": "api/i5.Toolkit.Core.ModelImporters.IMtlLibrary.html",
    "title": "Interface IMtlLibrary | i5 Toolkit Documentation",
    "keywords": "Interface IMtlLibrary Namespace: i5.Toolkit.Core.ModelImporters Assembly: cs.temp.dll.dll Syntax public interface IMtlLibrary Properties ContentLoader Declaration IContentLoader<string> ContentLoader { get; set; } Property Value Type Description IContentLoader<><string> ExtendedLogging Declaration bool ExtendedLogging { get; set; } Property Value Type Description bool Methods GetMaterialConstructor(string, string) Declaration MaterialConstructor GetMaterialConstructor(string materialLibrary, string materialName) Parameters Type Name Description string materialLibrary string materialName Returns Type Description MaterialConstructor LibraryLoaded(string) Declaration bool LibraryLoaded(string name) Parameters Type Name Description string name Returns Type Description bool LoadLibraryAsyc(string, string) Declaration Task<bool> LoadLibraryAsyc(string absolutePath, string libraryName) Parameters Type Name Description string absolutePath string libraryName Returns Type Description Task<><bool>"
  },
  "api/i5.Toolkit.Core.ModelImporters.MtlLibrary.html": {
    "href": "api/i5.Toolkit.Core.ModelImporters.MtlLibrary.html",
    "title": "Class MtlLibrary | i5 Toolkit Documentation",
    "keywords": "Class MtlLibrary Class for parsing and storing material libraries from .mtl files Inheritance object MtlLibrary Implements IMtlLibrary Namespace: i5.Toolkit.Core.ModelImporters Assembly: cs.temp.dll.dll Syntax public class MtlLibrary : IMtlLibrary Constructors MtlLibrary() Constructor Declaration public MtlLibrary() Properties ContentLoader Gets or sets the module which loads the .mtl files Declaration public IContentLoader<string> ContentLoader { get; set; } Property Value Type Description IContentLoader<><string> ExtendedLogging If set to true, the service will log additional information, e.g. comments in the .mtl file Declaration public bool ExtendedLogging { get; set; } Property Value Type Description bool Methods GetMaterialConstructor(string, string) Returns a material from a library as a material constructor instance Declaration public MaterialConstructor GetMaterialConstructor(string materialLibrary, string materialName) Parameters Type Name Description string materialLibrary The library name which contains the material string materialName The name of the material in the library Returns Type Description MaterialConstructor Returns a material constructor that resembles the material; returns null if the libarary or material does not exist LibraryLoaded(string) Returns true if the library with the given name was loaded Declaration public bool LibraryLoaded(string name) Parameters Type Name Description string name The name of the library Returns Type Description bool Returns true if the library was loaded LoadLibraryAsyc(string, string) Asynchronously loads a material library from the specified URI Declaration public Task<bool> LoadLibraryAsyc(string absolutePath, string libraryName) Parameters Type Name Description string absolutePath Absolute path or uri to the .mtl file string libraryName The name of the library Returns Type Description Task<><bool> Returns true if the library could be loaded Implements IMtlLibrary"
  },
  "api/i5.Toolkit.Core.ModelImporters.ObjImporter.html": {
    "href": "api/i5.Toolkit.Core.ModelImporters.ObjImporter.html",
    "title": "Class ObjImporter | i5 Toolkit Documentation",
    "keywords": "Class ObjImporter Service for importing and parsing .obj files Inheritance object ObjImporter Namespace: i5.Toolkit.Core.ModelImporters Assembly: cs.temp.dll.dll Syntax public class ObjImporter : IService Properties ContentLoader Module that should be used for fetching the .obj file's content Declaration public IContentLoader<string> ContentLoader { get; set; } Property Value Type Description IContentLoader<><string> ExtendedLogging If set to true, additional information, e.g. comments in the .obj file, are logged Declaration public bool ExtendedLogging { get; set; } Property Value Type Description bool MtlLibrary instance of the MtlLibrary Declaration public IMtlLibrary MtlLibrary { get; } Property Value Type Description IMtlLibrary Methods Cleanup() Called by the service manager to clean up the service if it is stopped Declaration public void Cleanup() ImportAsync(string) Asynchronously imports the given .obj file from the specified url either from the local file system or the web. Declaration public Task<GameObject> ImportAsync(string path) Parameters Type Name Description string path The path to the .obj file that is either stored online or on the local file system Returns Type Description Task<><GameObject> The GameObject that was created for the imported .obj Initialize(IServiceManager) Called by the service manager to initialize the service if it is started Declaration public void Initialize(IServiceManager owner) Parameters Type Name Description IServiceManager owner The service manager that owns this service"
  },
  "api/i5.Toolkit.Core.ModelImporters.ObjParseResult.html": {
    "href": "api/i5.Toolkit.Core.ModelImporters.ObjParseResult.html",
    "title": "Class ObjParseResult | i5 Toolkit Documentation",
    "keywords": "Class ObjParseResult Result of one sub-object of a parsing operation for a .obj file Inheritance object ObjParseResult Namespace: i5.Toolkit.Core.ModelImporters Assembly: cs.temp.dll.dll Syntax public class ObjParseResult Constructors ObjParseResult() Creates a new parse result Declaration public ObjParseResult() Properties LibraryPath Path to the material library that is used for the sub-object Declaration public string LibraryPath { get; set; } Property Value Type Description string MaterialName Name of the material which is used for the sub-object Declaration public string MaterialName { get; set; } Property Value Type Description string ObjectConstructor An object constructor which was for the sub-object Declaration public ObjectConstructor ObjectConstructor { get; } Property Value Type Description ObjectConstructor"
  },
  "api/i5.Toolkit.Core.ModelImporters.VertexData.html": {
    "href": "api/i5.Toolkit.Core.ModelImporters.VertexData.html",
    "title": "Struct VertexData | i5 Toolkit Documentation",
    "keywords": "Struct VertexData Stores data for one vertex Namespace: i5.Toolkit.Core.ModelImporters Assembly: cs.temp.dll.dll Syntax public struct VertexData Constructors VertexData(int, int, int) Creates a vertex data object where the vertex index, uv index and normal vector index are set Declaration public VertexData(int vertexIndex, int uvIndex, int normalVectorIndex) Parameters Type Name Description int vertexIndex The index of the vertex int uvIndex The index of the vertex in the UV layout int normalVectorIndex The index of the vertex in the normal vector array VertexData(int, int) Creates a vertex data object where the vertex index and normal vector index are set Declaration public VertexData(int vertexIndex, int normalVectorIndex) Parameters Type Name Description int vertexIndex The index of the vertex int normalVectorIndex The index of the vertex in the normal vector array VertexData(int) Creates a vertex data object with the vertex index only Declaration public VertexData(int vertexIndex) Parameters Type Name Description int vertexIndex The index of the vertex Fields normalVectorIndex The index in the normal vector array Declaration public int normalVectorIndex Field Value Type Description int uvIndex The index in the UV layout Declaration public int uvIndex Field Value Type Description int vertexIndex The index of the vertex Declaration public int vertexIndex Field Value Type Description int Properties UseNormalVectorIndex True if the normal vector index is set Declaration public bool UseNormalVectorIndex { get; } Property Value Type Description bool UseUvIndex True if the UV index is set Declaration public bool UseUvIndex { get; } Property Value Type Description bool Methods Equals(object) Checks if two vertex data objects are equal Declaration public override bool Equals(object obj) Parameters Type Name Description object obj The other vertex data object Returns Type Description bool True if the vertex data objects resemble the same vertex Overrides System.ValueType.Equals(object) GetHashCode() Gets a hash code for the vertex data object Declaration public override int GetHashCode() Returns Type Description int Returns a hash code for the vertex data object Overrides System.ValueType.GetHashCode()"
  },
  "api/i5.Toolkit.Core.Modified3DObjects.html": {
    "href": "api/i5.Toolkit.Core.Modified3DObjects.html",
    "title": "Namespace i5.Toolkit.Core.Modified3DObjects | i5 Toolkit Documentation",
    "keywords": "Namespace i5.Toolkit.Core.Modified3DObjects Classes RoundedCorners Constructs a rounded 3D rectangle with depth"
  },
  "api/i5.Toolkit.Core.Modified3DObjects.RoundedCorners.html": {
    "href": "api/i5.Toolkit.Core.Modified3DObjects.RoundedCorners.html",
    "title": "Class RoundedCorners | i5 Toolkit Documentation",
    "keywords": "Class RoundedCorners Constructs a rounded 3D rectangle with depth Inheritance object RoundedCorners Namespace: i5.Toolkit.Core.Modified3DObjects Assembly: cs.temp.dll.dll Syntax public class RoundedCorners : MonoBehaviour Fields cornerRadius Declaration public float cornerRadius Field Value Type Description float depth Declaration public float depth Field Value Type Description float exactColliders Declaration public bool exactColliders Field Value Type Description bool height Declaration public float height Field Value Type Description float subdivisions Declaration public int subdivisions Field Value Type Description int width Declaration public float width Field Value Type Description float"
  },
  "api/i5.Toolkit.Core.OpenIDConnectClient.AbstractAuthorizationFlowAnswer.html": {
    "href": "api/i5.Toolkit.Core.OpenIDConnectClient.AbstractAuthorizationFlowAnswer.html",
    "title": "Class AbstractAuthorizationFlowAnswer | i5 Toolkit Documentation",
    "keywords": "Class AbstractAuthorizationFlowAnswer Data description of the answer that is received after the access token was requested in the authorization flow Inheritance object AbstractAuthorizationFlowAnswer GitHubAuthorizationFlowAnswer GoogleAuthorizationFlowAnswer LearningLayersAuthorizationFlowAnswer Namespace: i5.Toolkit.Core.OpenIDConnectClient Assembly: cs.temp.dll.dll Syntax public class AbstractAuthorizationFlowAnswer Fields access_token Declaration public string access_token Field Value Type Description string scope Declaration public string scope Field Value Type Description string token_type Declaration public string token_type Field Value Type Description string"
  },
  "api/i5.Toolkit.Core.OpenIDConnectClient.AbstractOidcProvider.html": {
    "href": "api/i5.Toolkit.Core.OpenIDConnectClient.AbstractOidcProvider.html",
    "title": "Class AbstractOidcProvider | i5 Toolkit Documentation",
    "keywords": "Class AbstractOidcProvider Implementation of the Abstract OpenID Connect Provider Inheritance object AbstractOidcProvider GitHubOidcProvider GoogleOidcProvider LearningLayersOidcProvider Implements IOidcProvider Namespace: i5.Toolkit.Core.OpenIDConnectClient Assembly: cs.temp.dll.dll Syntax public abstract class AbstractOidcProvider : IOidcProvider Constructors AbstractOidcProvider() Creates a new instance of the client Declaration protected AbstractOidcProvider() Fields authorizationEndpoint The endpoint for the log in Declaration protected string authorizationEndpoint Field Value Type Description string serverName The OIDC server url - Used for accessing the endpoints published at its well-known URL Declaration protected string serverName Field Value Type Description string tokenEndpoint The end point where the access token can be requested Declaration protected string tokenEndpoint Field Value Type Description string userInfoEndpoint The end point where user information can be requested Declaration protected string userInfoEndpoint Field Value Type Description string Properties AuthorizationFlow Gets or sets the used authorization flow Declaration public AuthorizationFlow AuthorizationFlow { get; set; } Property Value Type Description AuthorizationFlow Browser The implementation that should accesss the browser Declaration public IBrowser Browser { get; set; } Property Value Type Description IBrowser ClientData Client data that are required to authorize the client at the provider Declaration public ClientData ClientData { get; set; } Property Value Type Description ClientData JsonSerializer Serializer that is responsible for parsing JSON data and converting to JSON Declaration public IJsonSerializer JsonSerializer { get; set; } Property Value Type Description IJsonSerializer RestConnector Specifies how the REST API of the Web service is accessed Declaration public IRestConnector RestConnector { get; set; } Property Value Type Description IRestConnector Methods CheckAccessTokenAsync(string) Checks if the access token is valid by checking it at the provider Declaration public virtual Task<bool> CheckAccessTokenAsync(string accessToken) Parameters Type Name Description string accessToken The access token that should be checked Returns Type Description Task<><bool> True if the access token is valid, otherwise false CheckEndpoints(bool) Declaration protected virtual bool CheckEndpoints(bool printError = true) Parameters Type Name Description bool printError Returns Type Description bool DecodeIDToken<T>(string) Decodes a JWT using Base64 to get user info Declaration public virtual T DecodeIDToken<T>(string idtoken) where T : AbstractUserInfo Parameters Type Name Description string idtoken The id token returned in the AuthorizationFlowAnswer Returns Type Description T The user info from the id token Type Parameters Name Description T GetAccessToken(Dictionary<string, string>) Gets the access token from a list of parameters in a Web answer Declaration public virtual string GetAccessToken(Dictionary<string, string> redirectParameters) Parameters Type Name Description System.Collections.Generic.Dictionary<TKey, TValue><string, string> redirectParameters The parameters of the Web answer as a dictionary Returns Type Description string Returns the access token if it exists in the parameters, otherwise an empty string is returned GetAccessTokenFromCodeAsync(string, string) Gets the access token based on a previously retrieved authorization code Declaration public virtual Task<string> GetAccessTokenFromCodeAsync(string code, string redirectUri) Parameters Type Name Description string code The authorization code string redirectUri The redirect URI which was used during the login Returns Type Description Task<><string> Returns the access token if it could be retrieved; otherwise it returns an empty string GetAuthorizationCode(Dictionary<string, string>) Extracts the authorization code from parameters of a Web answer Declaration public virtual string GetAuthorizationCode(Dictionary<string, string> redirectParameters) Parameters Type Name Description System.Collections.Generic.Dictionary<TKey, TValue><string, string> redirectParameters Parameters of a Web answer as a dictionary Returns Type Description string The authorization code if it could be found, otherwise an empty string is returned GetUserInfo<T>(string) Gets information about the logged in user from the idtoken Declaration public virtual IUserInfo GetUserInfo<T>(string idToken) where T : AbstractUserInfo Parameters Type Name Description string idToken The id token to received from authentication Returns Type Description IUserInfo Returns information about the logged in user Type Parameters Name Description T GetUserInfoAsync(string) Gets information about the logged in user from the provider Declaration public virtual Task<IUserInfo> GetUserInfoAsync(string accessToken) Parameters Type Name Description string accessToken The access token to authenticate the user Returns Type Description Task<><IUserInfo> Returns information about the logged in user if the request was successful, otherwise null InitializeEndpointsAsync() Sets the required endpoints Declaration public virtual Task<EndpointsData> InitializeEndpointsAsync() Returns Type Description Task<><EndpointsData> OpenLoginPage(string[], string) Opens the login page in the system's default Web browser Declaration public virtual void OpenLoginPage(string[] scopes, string redirectUri) Parameters Type Name Description string[] scopes The OpenID Connect scopes that the user must agree to string redirectUri The URI to which the browser should redirect after the successful login ParametersContainError(Dictionary<string, string>, out string) Checks if the provider included error messages in the parameters of a Web answer Declaration public virtual bool ParametersContainError(Dictionary<string, string> parameters, out string errorMessage) Parameters Type Name Description System.Collections.Generic.Dictionary<TKey, TValue><string, string> parameters The parameters of a Web answer as a dictionary string errorMessage The error message that the provider included, empty if no error exists Returns Type Description bool Returns true if the parameters contain an error message, otherwise false RequestEndpointsDataAsync() Extracts the required endpoints from the well-known definition of the server Declaration protected Task<EndpointsData> RequestEndpointsDataAsync() Returns Type Description Task<><EndpointsData> ServerName() Declaration public string ServerName() Returns Type Description string Implements IOidcProvider"
  },
  "api/i5.Toolkit.Core.OpenIDConnectClient.AbstractUserInfo.html": {
    "href": "api/i5.Toolkit.Core.OpenIDConnectClient.AbstractUserInfo.html",
    "title": "Class AbstractUserInfo | i5 Toolkit Documentation",
    "keywords": "Class AbstractUserInfo Description of the user information data for the client Inheritance object AbstractUserInfo GitHubUserInfo GoogleUserInfo LearningLayersUserInfo Implements IUserInfo Namespace: i5.Toolkit.Core.OpenIDConnectClient Assembly: cs.temp.dll.dll Syntax public class AbstractUserInfo : IUserInfo Fields email Declaration protected string email Field Value Type Description string name Declaration protected string name Field Value Type Description string Properties Email The email address of the user This is a mapping based on the available user data of the OIDC provider Declaration public virtual string Email { get; } Property Value Type Description string FullName A clear name of the user This is a mapping based on the available user data of the OIDC provider Declaration public virtual string FullName { get; } Property Value Type Description string Username The username of the user This is a mapping based on the available user data of the OIDC provider Declaration public virtual string Username { get; } Property Value Type Description string Implements IUserInfo"
  },
  "api/i5.Toolkit.Core.OpenIDConnectClient.AuthorizationFlow.html": {
    "href": "api/i5.Toolkit.Core.OpenIDConnectClient.AuthorizationFlow.html",
    "title": "Enum AuthorizationFlow | i5 Toolkit Documentation",
    "keywords": "Enum AuthorizationFlow The authorization flow of the OpenID Connect procedure It is recommended to use the Authorization Code flow Namespace: i5.Toolkit.Core.OpenIDConnectClient Assembly: cs.temp.dll.dll Syntax public enum AuthorizationFlow Fields Name Description AUTHORIZATION_CODE IMPLICIT"
  },
  "api/i5.Toolkit.Core.OpenIDConnectClient.ClientData.html": {
    "href": "api/i5.Toolkit.Core.OpenIDConnectClient.ClientData.html",
    "title": "Class ClientData | i5 Toolkit Documentation",
    "keywords": "Class ClientData Describes configurations of client data Inheritance object ClientData Namespace: i5.Toolkit.Core.OpenIDConnectClient Assembly: cs.temp.dll.dll Syntax public class ClientData Constructors ClientData(string, string) Creates a new client data instance with the given parameters Declaration public ClientData(string clientId, string clientSecret) Parameters Type Name Description string clientId The id of the client that is registered at the provider string clientSecret The secret of the client that was issued by the provider Properties ClientId The id of the client that is registered at the provider Declaration public string ClientId { get; } Property Value Type Description string ClientSecret The secret of the client that was issued by the provider Declaration public string ClientSecret { get; } Property Value Type Description string"
  },
  "api/i5.Toolkit.Core.OpenIDConnectClient.ClientDataObject.html": {
    "href": "api/i5.Toolkit.Core.OpenIDConnectClient.ClientDataObject.html",
    "title": "Class ClientDataObject | i5 Toolkit Documentation",
    "keywords": "Class ClientDataObject Scriptable object for storing client data in the assets folder as a separate file This is used so that the client data can be specified and put into a .gitignore file so that they are not uploaded in public repositories, e.g. on GitHub Inheritance object ClientDataObject Namespace: i5.Toolkit.Core.OpenIDConnectClient Assembly: cs.temp.dll.dll Syntax public class ClientDataObject : ScriptableObject Fields clientData The credentials of the client so that it is accepted by the OpenID Connect provider Declaration public ClientData clientData Field Value Type Description ClientData"
  },
  "api/i5.Toolkit.Core.OpenIDConnectClient.EndpointsData.html": {
    "href": "api/i5.Toolkit.Core.OpenIDConnectClient.EndpointsData.html",
    "title": "Class EndpointsData | i5 Toolkit Documentation",
    "keywords": "Class EndpointsData The endpoints of a OIDC provider Inheritance object EndpointsData Namespace: i5.Toolkit.Core.OpenIDConnectClient Assembly: cs.temp.dll.dll Syntax public class EndpointsData Constructors EndpointsData(string, string, string) Declaration public EndpointsData(string authEndpoint, string tokenEndpoint, string userIEndpoint) Parameters Type Name Description string authEndpoint string tokenEndpoint string userIEndpoint Fields authorization_endpoint Declaration public string authorization_endpoint Field Value Type Description string token_endpoint Declaration public string token_endpoint Field Value Type Description string userinfo_endpoint Declaration public string userinfo_endpoint Field Value Type Description string"
  },
  "api/i5.Toolkit.Core.OpenIDConnectClient.GitHubAuthorizationFlowAnswer.html": {
    "href": "api/i5.Toolkit.Core.OpenIDConnectClient.GitHubAuthorizationFlowAnswer.html",
    "title": "Class GitHubAuthorizationFlowAnswer | i5 Toolkit Documentation",
    "keywords": "Class GitHubAuthorizationFlowAnswer Data description of the answer that is received after the access token was requested in the authorization flow of GitHub Inheritance object AbstractAuthorizationFlowAnswer GitHubAuthorizationFlowAnswer Inherited Members AbstractAuthorizationFlowAnswer.access_token AbstractAuthorizationFlowAnswer.token_type AbstractAuthorizationFlowAnswer.scope Namespace: i5.Toolkit.Core.OpenIDConnectClient Assembly: cs.temp.dll.dll Syntax public class GitHubAuthorizationFlowAnswer : AbstractAuthorizationFlowAnswer"
  },
  "api/i5.Toolkit.Core.OpenIDConnectClient.GitHubOidcProvider.html": {
    "href": "api/i5.Toolkit.Core.OpenIDConnectClient.GitHubOidcProvider.html",
    "title": "Class GitHubOidcProvider | i5 Toolkit Documentation",
    "keywords": "Class GitHubOidcProvider Implementation of the OpenID Connect GitHub Provider Inheritance object AbstractOidcProvider GitHubOidcProvider Implements IOidcProvider Inherited Members AbstractOidcProvider.serverName AbstractOidcProvider.authorizationEndpoint AbstractOidcProvider.tokenEndpoint AbstractOidcProvider.userInfoEndpoint AbstractOidcProvider.AuthorizationFlow AbstractOidcProvider.RestConnector AbstractOidcProvider.ClientData AbstractOidcProvider.JsonSerializer AbstractOidcProvider.Browser AbstractOidcProvider.ServerName() AbstractOidcProvider.CheckEndpoints(bool) AbstractOidcProvider.InitializeEndpointsAsync() AbstractOidcProvider.RequestEndpointsDataAsync() AbstractOidcProvider.GetAccessToken(Dictionary<string, string>) AbstractOidcProvider.GetUserInfo<T>(string) AbstractOidcProvider.CheckAccessTokenAsync(string) AbstractOidcProvider.GetAuthorizationCode(Dictionary<string, string>) AbstractOidcProvider.ParametersContainError(Dictionary<string, string>, out string) AbstractOidcProvider.DecodeIDToken<T>(string) Namespace: i5.Toolkit.Core.OpenIDConnectClient Assembly: cs.temp.dll.dll Syntax public class GitHubOidcProvider : AbstractOidcProvider, IOidcProvider Constructors GitHubOidcProvider() Creates a new instance of the GitHub client Declaration public GitHubOidcProvider() Methods GetAccessTokenFromCodeAsync(string, string) Gets the access token based on a previously retrieved authorization code Declaration public override Task<string> GetAccessTokenFromCodeAsync(string code, string redirectUri) Parameters Type Name Description string code The authorization code string redirectUri The redirect URI which was used during the login Returns Type Description Task<><string> Returns the access token if it could be retrieved; otherwise it returns an empty string Overrides AbstractOidcProvider.GetAccessTokenFromCodeAsync(string, string) GetUserInfoAsync(string) Gets information about the logged in user from the GitHub provider Declaration public override Task<IUserInfo> GetUserInfoAsync(string accessToken) Parameters Type Name Description string accessToken The access token to authenticate the user Returns Type Description Task<><IUserInfo> Returns information about the logged in user if the request was successful, otherwise null Overrides AbstractOidcProvider.GetUserInfoAsync(string) OpenLoginPage(string[], string) Opens the GitHUb login page in the system's default Web browser Declaration public override void OpenLoginPage(string[] scopes, string redirectUri) Parameters Type Name Description string[] scopes The OpenID Connect scopes that the user must agree to string redirectUri The URI to which the browser should redirect after the successful login Overrides AbstractOidcProvider.OpenLoginPage(string[], string) Implements IOidcProvider"
  },
  "api/i5.Toolkit.Core.OpenIDConnectClient.GitHubUserInfo.html": {
    "href": "api/i5.Toolkit.Core.OpenIDConnectClient.GitHubUserInfo.html",
    "title": "Class GitHubUserInfo | i5 Toolkit Documentation",
    "keywords": "Class GitHubUserInfo Description of the user information data for the Git Hub client Inheritance object AbstractUserInfo GitHubUserInfo Implements IUserInfo Inherited Members AbstractUserInfo.name AbstractUserInfo.email AbstractUserInfo.Username AbstractUserInfo.Email AbstractUserInfo.FullName Namespace: i5.Toolkit.Core.OpenIDConnectClient Assembly: cs.temp.dll.dll Syntax public class GitHubUserInfo : AbstractUserInfo, IUserInfo Constructors GitHubUserInfo(string, string) Creates a new instance of the GitHub user info with the given parameters Declaration public GitHubUserInfo(string loginName, string email) Parameters Type Name Description string loginName The user name of the user string email The email address of the user Implements IUserInfo"
  },
  "api/i5.Toolkit.Core.OpenIDConnectClient.GoogleAuthorizationFlowAnswer.html": {
    "href": "api/i5.Toolkit.Core.OpenIDConnectClient.GoogleAuthorizationFlowAnswer.html",
    "title": "Class GoogleAuthorizationFlowAnswer | i5 Toolkit Documentation",
    "keywords": "Class GoogleAuthorizationFlowAnswer Data description of the answer that is received after the access token was requested in the authorization flow of Google Inheritance object AbstractAuthorizationFlowAnswer GoogleAuthorizationFlowAnswer Inherited Members AbstractAuthorizationFlowAnswer.access_token AbstractAuthorizationFlowAnswer.token_type AbstractAuthorizationFlowAnswer.scope Namespace: i5.Toolkit.Core.OpenIDConnectClient Assembly: cs.temp.dll.dll Syntax public class GoogleAuthorizationFlowAnswer : AbstractAuthorizationFlowAnswer Fields expires_in Declaration public string expires_in Field Value Type Description string id_token Declaration public string id_token Field Value Type Description string"
  },
  "api/i5.Toolkit.Core.OpenIDConnectClient.GoogleOidcProvider.html": {
    "href": "api/i5.Toolkit.Core.OpenIDConnectClient.GoogleOidcProvider.html",
    "title": "Class GoogleOidcProvider | i5 Toolkit Documentation",
    "keywords": "Class GoogleOidcProvider Implementation of the OpenID Connect Learning Layers Provider More information can be found here: https://auth.las2peer.org/auth/ Inheritance object AbstractOidcProvider GoogleOidcProvider Implements IOidcProvider Inherited Members AbstractOidcProvider.serverName AbstractOidcProvider.authorizationEndpoint AbstractOidcProvider.tokenEndpoint AbstractOidcProvider.userInfoEndpoint AbstractOidcProvider.AuthorizationFlow AbstractOidcProvider.RestConnector AbstractOidcProvider.ClientData AbstractOidcProvider.JsonSerializer AbstractOidcProvider.Browser AbstractOidcProvider.ServerName() AbstractOidcProvider.CheckEndpoints(bool) AbstractOidcProvider.InitializeEndpointsAsync() AbstractOidcProvider.RequestEndpointsDataAsync() AbstractOidcProvider.GetAccessToken(Dictionary<string, string>) AbstractOidcProvider.GetUserInfoAsync(string) AbstractOidcProvider.GetUserInfo<T>(string) AbstractOidcProvider.CheckAccessTokenAsync(string) AbstractOidcProvider.ParametersContainError(Dictionary<string, string>, out string) AbstractOidcProvider.DecodeIDToken<T>(string) Namespace: i5.Toolkit.Core.OpenIDConnectClient Assembly: cs.temp.dll.dll Syntax public class GoogleOidcProvider : AbstractOidcProvider, IOidcProvider Constructors GoogleOidcProvider() Creates a new instance of the Learning Layers client Declaration public GoogleOidcProvider() Methods GenerateCSRFToken() Creates a sequence of 30 random numbers which is used as the session token Declaration public void GenerateCSRFToken() GetAccessTokenFromCodeAsync(string, string) Gets the access token based on a previously retrieved authorization code Declaration public override Task<string> GetAccessTokenFromCodeAsync(string code, string redirectUri) Parameters Type Name Description string code The authorization code string redirectUri The redirect URI which was used during the login Returns Type Description Task<><string> Returns the access token if it could be retrieved; otherwise it returns an empty string Overrides AbstractOidcProvider.GetAccessTokenFromCodeAsync(string, string) GetAuthorizationCode(Dictionary<string, string>) Extracts the authorization code from parameters of a Web answer Declaration public override string GetAuthorizationCode(Dictionary<string, string> redirectParameters) Parameters Type Name Description System.Collections.Generic.Dictionary<TKey, TValue><string, string> redirectParameters Parameters of a Web answer as a dictionary Returns Type Description string The authorization code if it could be found, otherwise an empty string is returned Overrides AbstractOidcProvider.GetAuthorizationCode(Dictionary<string, string>) OpenLoginPage(string[], string) Opens the login page in the system's default Web browser, sets the required endpoints Declaration public override void OpenLoginPage(string[] scopes, string redirectUri) Parameters Type Name Description string[] scopes The OpenID Connect scopes that the user must agree to string redirectUri The URI to which the browser should redirect after the successful login Overrides AbstractOidcProvider.OpenLoginPage(string[], string) Implements IOidcProvider"
  },
  "api/i5.Toolkit.Core.OpenIDConnectClient.GoogleUserInfo.html": {
    "href": "api/i5.Toolkit.Core.OpenIDConnectClient.GoogleUserInfo.html",
    "title": "Class GoogleUserInfo | i5 Toolkit Documentation",
    "keywords": "Class GoogleUserInfo Description of the user information data for the Google client Inheritance object AbstractUserInfo GoogleUserInfo Implements IUserInfo Inherited Members AbstractUserInfo.name AbstractUserInfo.email AbstractUserInfo.Email Namespace: i5.Toolkit.Core.OpenIDConnectClient Assembly: cs.temp.dll.dll Syntax public class GoogleUserInfo : AbstractUserInfo, IUserInfo Constructors GoogleUserInfo(string, string, string) Creates a new instance of the learning layers user info with the given parameters Declaration public GoogleUserInfo(string username, string email, string fullName) Parameters Type Name Description string username The user name of the user string email The email address of the user string fullName The full name of the user Properties FullName A clear name of the user This is a mapping based on the available user data of the OIDC provider Declaration public override string FullName { get; } Property Value Type Description string Overrides AbstractUserInfo.FullName Username An identifier for the user, unique among all Google accounts and never reused. This is a mapping based on the available user data of the OIDC provider Declaration public override string Username { get; } Property Value Type Description string Overrides AbstractUserInfo.Username Implements IUserInfo"
  },
  "api/i5.Toolkit.Core.OpenIDConnectClient.html": {
    "href": "api/i5.Toolkit.Core.OpenIDConnectClient.html",
    "title": "Namespace i5.Toolkit.Core.OpenIDConnectClient | i5 Toolkit Documentation",
    "keywords": "Namespace i5.Toolkit.Core.OpenIDConnectClient Classes AbstractAuthorizationFlowAnswer Data description of the answer that is received after the access token was requested in the authorization flow AbstractOidcProvider Implementation of the Abstract OpenID Connect Provider AbstractUserInfo Description of the user information data for the client ClientData Describes configurations of client data ClientDataObject Scriptable object for storing client data in the assets folder as a separate file This is used so that the client data can be specified and put into a .gitignore file so that they are not uploaded in public repositories, e.g. on GitHub EndpointsData The endpoints of a OIDC provider GitHubAuthorizationFlowAnswer Data description of the answer that is received after the access token was requested in the authorization flow of GitHub GitHubOidcProvider Implementation of the OpenID Connect GitHub Provider GitHubUserInfo Description of the user information data for the Git Hub client GoogleAuthorizationFlowAnswer Data description of the answer that is received after the access token was requested in the authorization flow of Google GoogleOidcProvider Implementation of the OpenID Connect Learning Layers Provider More information can be found here: https://auth.las2peer.org/auth/ GoogleUserInfo Description of the user information data for the Google client LearningLayersAuthorizationFlowAnswer Data description of the answer that is received after the access token was requested in the authorization flow of LearningLayers LearningLayersOidcProvider Implementation of the OpenID Connect Learning Layers Provider More information can be found here: https://auth.las2peer.org/auth/ LearningLayersUserInfo Description of the user information data for the Learning Layers client OpenIDConnectService Service that implements the OpenID Connect authentification OpenIDConnectTester RedirectReceivedEventArgs Event arguments for the redirect event RedirectServerListener Implementation of a server that serves the redirect after the OpenID Connect login Interfaces IOidcProvider Contract that specifies the capabilities of an OpenID Connect provider IRedirectServerListener Contract which specifies the capabilities of the server that listens for redirects IUserInfo Contract specifying how user information that can be accessed from an OIDC provider Enums AuthorizationFlow The authorization flow of the OpenID Connect procedure It is recommended to use the Authorization Code flow"
  },
  "api/i5.Toolkit.Core.OpenIDConnectClient.IOidcProvider.html": {
    "href": "api/i5.Toolkit.Core.OpenIDConnectClient.IOidcProvider.html",
    "title": "Interface IOidcProvider | i5 Toolkit Documentation",
    "keywords": "Interface IOidcProvider Contract that specifies the capabilities of an OpenID Connect provider Namespace: i5.Toolkit.Core.OpenIDConnectClient Assembly: cs.temp.dll.dll Syntax public interface IOidcProvider Properties AuthorizationFlow Gets the authorization flow that should be used for the provider Declaration AuthorizationFlow AuthorizationFlow { get; } Property Value Type Description AuthorizationFlow ClientData Client data that are required to authorize the client at the provider Declaration ClientData ClientData { get; set; } Property Value Type Description ClientData RestConnector Specifies how the REST API of the Web service is accessed Declaration IRestConnector RestConnector { get; set; } Property Value Type Description IRestConnector Methods CheckAccessTokenAsync(string) Checks if the access token is valid by checking it at the provider Declaration Task<bool> CheckAccessTokenAsync(string accessToken) Parameters Type Name Description string accessToken The access token that should be checked Returns Type Description Task<><bool> True if the access token is valid, otherwise false GetAccessToken(Dictionary<string, string>) Gets the access token from a list of parameters in a Web answer Declaration string GetAccessToken(Dictionary<string, string> redirectParameters) Parameters Type Name Description System.Collections.Generic.Dictionary<TKey, TValue><string, string> redirectParameters The parameters of the Web answer as a dictionary Returns Type Description string Returns the access token if it exists in the parameters, otherwise an empty string is returned GetAccessTokenFromCodeAsync(string, string) Gets the access token based on a previously retrieved authorization code Declaration Task<string> GetAccessTokenFromCodeAsync(string code, string redirectUri) Parameters Type Name Description string code The authorization code string redirectUri The redirect URI which was used during the login Returns Type Description Task<><string> Returns the access token if it could be retrieved; otherwise it returns an empty string GetAuthorizationCode(Dictionary<string, string>) Extracts the authorization code from parameters of a Web answer Declaration string GetAuthorizationCode(Dictionary<string, string> redirectParameters) Parameters Type Name Description System.Collections.Generic.Dictionary<TKey, TValue><string, string> redirectParameters Parameters of a Web answer as a dictionary Returns Type Description string The authorization code if it could be found, otherwise an empty string is returned GetUserInfoAsync(string) Gets information about the logged in user from the provider Declaration Task<IUserInfo> GetUserInfoAsync(string accessToken) Parameters Type Name Description string accessToken The access token to authenticate the user Returns Type Description Task<><IUserInfo> Returns information about the logged in user if the request was successful, otherwise null InitializeEndpointsAsync() Sets the required endpoints Declaration Task<EndpointsData> InitializeEndpointsAsync() Returns Type Description Task<><EndpointsData> Returns the fetched endpoints response OpenLoginPage(string[], string) Opens the provider's login page in the system's default Web browser Declaration void OpenLoginPage(string[] scopes, string redirectUri) Parameters Type Name Description string[] scopes The OpenID Connect scopes that the user must agree to string redirectUri The URI to which the browser should redirect after the successful login ParametersContainError(Dictionary<string, string>, out string) Checks if the provider included error messages in the parameters of a Web answer Declaration bool ParametersContainError(Dictionary<string, string> parameters, out string errorMessage) Parameters Type Name Description System.Collections.Generic.Dictionary<TKey, TValue><string, string> parameters The parameters of a Web answer as a dictionary string errorMessage The error message that the provider included, empty if no error exists Returns Type Description bool Returns true if the parameters contain an error message, otherwise false"
  },
  "api/i5.Toolkit.Core.OpenIDConnectClient.IRedirectServerListener.html": {
    "href": "api/i5.Toolkit.Core.OpenIDConnectClient.IRedirectServerListener.html",
    "title": "Interface IRedirectServerListener | i5 Toolkit Documentation",
    "keywords": "Interface IRedirectServerListener Contract which specifies the capabilities of the server that listens for redirects Namespace: i5.Toolkit.Core.OpenIDConnectClient Assembly: cs.temp.dll.dll Syntax public interface IRedirectServerListener Properties ListeningUri Declaration string ListeningUri { get; set; } Property Value Type Description string ResponseString The HTML string which is send as an answer if a request is made to the server Declaration string ResponseString { get; set; } Property Value Type Description string ServerActive If true, the server is currently active Declaration bool ServerActive { get; } Property Value Type Description bool Methods GenerateListeningUri(string) Generates and sets a redirect URI with a free port on which the server will listen once it is started Declaration string GenerateListeningUri(string protocol = \"http\") Parameters Type Name Description string protocol The URI scheme that the URI should use Returns Type Description string Returns a URI with a free port on which the server can listen StartServer() Starts the server Declaration void StartServer() StopServerImmediately() Stops the server immediately, aborting its current operation Declaration void StopServerImmediately() Events RedirectReceived Event which is invoked once a redirect has been received Declaration event EventHandler<RedirectReceivedEventArgs> RedirectReceived Event Type Type Description EventHandler<><RedirectReceivedEventArgs>"
  },
  "api/i5.Toolkit.Core.OpenIDConnectClient.IUserInfo.html": {
    "href": "api/i5.Toolkit.Core.OpenIDConnectClient.IUserInfo.html",
    "title": "Interface IUserInfo | i5 Toolkit Documentation",
    "keywords": "Interface IUserInfo Contract specifying how user information that can be accessed from an OIDC provider Namespace: i5.Toolkit.Core.OpenIDConnectClient Assembly: cs.temp.dll.dll Syntax public interface IUserInfo Properties Email The email address of the logged in user Declaration string Email { get; } Property Value Type Description string FullName The full name of the logged in user Declaration string FullName { get; } Property Value Type Description string Username The user name of the logged in user Declaration string Username { get; } Property Value Type Description string"
  },
  "api/i5.Toolkit.Core.OpenIDConnectClient.LearningLayersAuthorizationFlowAnswer.html": {
    "href": "api/i5.Toolkit.Core.OpenIDConnectClient.LearningLayersAuthorizationFlowAnswer.html",
    "title": "Class LearningLayersAuthorizationFlowAnswer | i5 Toolkit Documentation",
    "keywords": "Class LearningLayersAuthorizationFlowAnswer Data description of the answer that is received after the access token was requested in the authorization flow of LearningLayers Inheritance object AbstractAuthorizationFlowAnswer LearningLayersAuthorizationFlowAnswer Inherited Members AbstractAuthorizationFlowAnswer.access_token AbstractAuthorizationFlowAnswer.token_type AbstractAuthorizationFlowAnswer.scope Namespace: i5.Toolkit.Core.OpenIDConnectClient Assembly: cs.temp.dll.dll Syntax public class LearningLayersAuthorizationFlowAnswer : AbstractAuthorizationFlowAnswer Fields error Declaration public string error Field Value Type Description string error_description Declaration public string error_description Field Value Type Description string expires_in Declaration public int expires_in Field Value Type Description int id_token Declaration public string id_token Field Value Type Description string"
  },
  "api/i5.Toolkit.Core.OpenIDConnectClient.LearningLayersOidcProvider.html": {
    "href": "api/i5.Toolkit.Core.OpenIDConnectClient.LearningLayersOidcProvider.html",
    "title": "Class LearningLayersOidcProvider | i5 Toolkit Documentation",
    "keywords": "Class LearningLayersOidcProvider Implementation of the OpenID Connect Learning Layers Provider More information can be found here: https://auth.las2peer.org/auth/ Inheritance object AbstractOidcProvider LearningLayersOidcProvider Implements IOidcProvider Inherited Members AbstractOidcProvider.serverName AbstractOidcProvider.authorizationEndpoint AbstractOidcProvider.tokenEndpoint AbstractOidcProvider.userInfoEndpoint AbstractOidcProvider.AuthorizationFlow AbstractOidcProvider.RestConnector AbstractOidcProvider.ClientData AbstractOidcProvider.JsonSerializer AbstractOidcProvider.Browser AbstractOidcProvider.ServerName() AbstractOidcProvider.CheckEndpoints(bool) AbstractOidcProvider.InitializeEndpointsAsync() AbstractOidcProvider.RequestEndpointsDataAsync() AbstractOidcProvider.GetAccessTokenFromCodeAsync(string, string) AbstractOidcProvider.GetAccessToken(Dictionary<string, string>) AbstractOidcProvider.GetUserInfoAsync(string) AbstractOidcProvider.GetUserInfo<T>(string) AbstractOidcProvider.CheckAccessTokenAsync(string) AbstractOidcProvider.OpenLoginPage(string[], string) AbstractOidcProvider.GetAuthorizationCode(Dictionary<string, string>) AbstractOidcProvider.ParametersContainError(Dictionary<string, string>, out string) AbstractOidcProvider.DecodeIDToken<T>(string) Namespace: i5.Toolkit.Core.OpenIDConnectClient Assembly: cs.temp.dll.dll Syntax public class LearningLayersOidcProvider : AbstractOidcProvider, IOidcProvider Constructors LearningLayersOidcProvider() Creates a new instance of the Learning Layers client Declaration public LearningLayersOidcProvider() Implements IOidcProvider"
  },
  "api/i5.Toolkit.Core.OpenIDConnectClient.LearningLayersUserInfo.html": {
    "href": "api/i5.Toolkit.Core.OpenIDConnectClient.LearningLayersUserInfo.html",
    "title": "Class LearningLayersUserInfo | i5 Toolkit Documentation",
    "keywords": "Class LearningLayersUserInfo Description of the user information data for the Learning Layers client Inheritance object AbstractUserInfo LearningLayersUserInfo Implements IUserInfo Inherited Members AbstractUserInfo.name AbstractUserInfo.email AbstractUserInfo.Email Namespace: i5.Toolkit.Core.OpenIDConnectClient Assembly: cs.temp.dll.dll Syntax public class LearningLayersUserInfo : AbstractUserInfo, IUserInfo Constructors LearningLayersUserInfo(string, string, string) Creates a new instance of the learning layers user info with the given parameters Declaration public LearningLayersUserInfo(string username, string email, string fullName) Parameters Type Name Description string username The user name of the user string email The email address of the user string fullName The full name of the user Properties FullName A clear name of the user This is a mapping based on the available user data of the OIDC provider Declaration public override string FullName { get; } Property Value Type Description string Overrides AbstractUserInfo.FullName Username The username of the user This is a mapping based on the available user data of the OIDC provider Declaration public override string Username { get; } Property Value Type Description string Overrides AbstractUserInfo.Username Implements IUserInfo"
  },
  "api/i5.Toolkit.Core.OpenIDConnectClient.OpenIDConnectService.html": {
    "href": "api/i5.Toolkit.Core.OpenIDConnectClient.OpenIDConnectService.html",
    "title": "Class OpenIDConnectService | i5 Toolkit Documentation",
    "keywords": "Class OpenIDConnectService Service that implements the OpenID Connect authentification Inheritance object OpenIDConnectService Namespace: i5.Toolkit.Core.OpenIDConnectClient Assembly: cs.temp.dll.dll Syntax public class OpenIDConnectService : IUpdateableService Constructors OpenIDConnectService() Creates a new instance of the OpenID Connect service Declaration public OpenIDConnectService() Properties AccessToken The access token of the logged in user Use this token to access data about the user or to access protected Web resources Declaration public string AccessToken { get; } Property Value Type Description string Enabled If set to true, the Update method will be executed every frame Declaration public bool Enabled { get; set; } Property Value Type Description bool IsLoggedIn Is true if the user of the application is currently logged in Declaration public bool IsLoggedIn { get; } Property Value Type Description bool OidcProvider The provider that should be used for the OpenID Connect procedure Declaration public IOidcProvider OidcProvider { get; set; } Property Value Type Description IOidcProvider RedirectURI The URI which should be shown to the user after the login For UWP and Android apps, change the Uri schema to something unique and also change it in the project settings This way, the app will be opened again on the redirect. If this URI is not set, a standard page is shown. Declaration public string RedirectURI { get; set; } Property Value Type Description string Scopes List of scopes that the user must agree to and which give the client access to specific data Declaration public string[] Scopes { get; set; } Property Value Type Description string[] ServerListener A server listener implementation that listens for the redirect Declaration public IRedirectServerListener ServerListener { get; set; } Property Value Type Description IRedirectServerListener Methods CheckAccessToken() Checks if the access token is valid Declaration public Task<bool> CheckAccessToken() Returns Type Description Task<><bool> Returns true if the access token could be verified at the provider Cleanup() Called by the service manager once the service is unregistered Stops the server if it is running and logs the user out Declaration public void Cleanup() GetUserDataAsync() Gets the user's information Declaration public Task<IUserInfo> GetUserDataAsync() Returns Type Description Task<><IUserInfo> Returns user data from the OIDC provider HandleActivation(DeepLinkArgs) Handles the activation by deep links Allows both the login path, e.g. i5:/login or i5:/ for backwards compatibility. Declaration public void HandleActivation(DeepLinkArgs deepLinkArgs) Parameters Type Name Description DeepLinkArgs deepLinkArgs The parameters of the deep link activation Initialize(IServiceManager) Initialization which is called by the server manager once the service is registered Declaration public void Initialize(IServiceManager owner) Parameters Type Name Description IServiceManager owner The service manager that owns this service LoginWithAccessToken(string) Directly sets the access token and triggers the login event Can be used to log in a user again with the same access token after initially logging out Declaration public void LoginWithAccessToken(string accessToken) Parameters Type Name Description string accessToken Logout() Logs the user out Declaration public void Logout() OpenLoginPageAsync() Opens a login page in the system's default browser so that the user can log in Requires a configured OpenID Connect provider Declaration public Task OpenLoginPageAsync() Returns Type Description Task ServerListener_RedirectReceived(object, RedirectReceivedEventArgs) Called by the server listener once a redirect was received Declaration public void ServerListener_RedirectReceived(object sender, RedirectReceivedEventArgs e) Parameters Type Name Description object sender The sender of the event RedirectReceivedEventArgs e The arguments of the redirect event Update() Called each frame by the service manager Handles the redirect processing on the main thread Declaration public void Update() Events LoginCompleted Event which is raised once the login was successfully completed Declaration public event EventHandler LoginCompleted Event Type Type Description EventHandler LogoutCompleted Event which is reaised once the logout was completed Declaration public event EventHandler LogoutCompleted Event Type Type Description EventHandler"
  },
  "api/i5.Toolkit.Core.OpenIDConnectClient.OpenIDConnectTester.html": {
    "href": "api/i5.Toolkit.Core.OpenIDConnectClient.OpenIDConnectTester.html",
    "title": "Class OpenIDConnectTester | i5 Toolkit Documentation",
    "keywords": "Class OpenIDConnectTester Inheritance object OpenIDConnectTester Namespace: i5.Toolkit.Core.OpenIDConnectClient Assembly: cs.temp.dll.dll Syntax public class OpenIDConnectTester : MonoBehaviour"
  },
  "api/i5.Toolkit.Core.OpenIDConnectClient.RedirectReceivedEventArgs.html": {
    "href": "api/i5.Toolkit.Core.OpenIDConnectClient.RedirectReceivedEventArgs.html",
    "title": "Class RedirectReceivedEventArgs | i5 Toolkit Documentation",
    "keywords": "Class RedirectReceivedEventArgs Event arguments for the redirect event Inheritance object RedirectReceivedEventArgs Namespace: i5.Toolkit.Core.OpenIDConnectClient Assembly: cs.temp.dll.dll Syntax public class RedirectReceivedEventArgs : EventArgs Constructors RedirectReceivedEventArgs(Dictionary<string, string>, string) Creates a new instance of the redirect event arguments Declaration public RedirectReceivedEventArgs(Dictionary<string, string> requestParameters, string redirectUri) Parameters Type Name Description System.Collections.Generic.Dictionary<TKey, TValue><string, string> requestParameters The parameters that were given in the redirect string redirectUri The URI to which the redirect lead Properties RedirectParameters The parameters that were given in the redirect Declaration public Dictionary<string, string> RedirectParameters { get; } Property Value Type Description System.Collections.Generic.Dictionary<TKey, TValue><string, string> RedirectUri The URI to which the redirect lead Declaration public string RedirectUri { get; } Property Value Type Description string"
  },
  "api/i5.Toolkit.Core.OpenIDConnectClient.RedirectServerListener.html": {
    "href": "api/i5.Toolkit.Core.OpenIDConnectClient.RedirectServerListener.html",
    "title": "Class RedirectServerListener | i5 Toolkit Documentation",
    "keywords": "Class RedirectServerListener Implementation of a server that serves the redirect after the OpenID Connect login Inheritance object RedirectServerListener Implements IRedirectServerListener Namespace: i5.Toolkit.Core.OpenIDConnectClient Assembly: cs.temp.dll.dll Syntax public class RedirectServerListener : IRedirectServerListener Constructors RedirectServerListener() Creates a new instance of the RedirectServerListener Declaration public RedirectServerListener() Properties ListeningUri The URI whrere the server listens for the redirect Declaration public string ListeningUri { get; set; } Property Value Type Description string ResponseString HTML response that is given on the redirect request Declaration public string ResponseString { get; set; } Property Value Type Description string ServerActive True if the server is active Declaration public bool ServerActive { get; } Property Value Type Description bool Methods GenerateListeningUri(string) Generates a redirect URI where the server can listen for the redirect Declaration public string GenerateListeningUri(string protocol = \"http\") Parameters Type Name Description string protocol Specify a custom URI schema. If the app version of this registers as a handler for the URI schema, the app will be opened again. Returns Type Description string Returns a free URI where the server can listen StartServer() Starts the server Declaration public void StartServer() StopServerImmediately() Stops the server immediately and aborts the current operation Declaration public void StopServerImmediately() Events RedirectReceived Event which is raised once a redirect is received Declaration public event EventHandler<RedirectReceivedEventArgs> RedirectReceived Event Type Type Description EventHandler<><RedirectReceivedEventArgs> Implements IRedirectServerListener"
  },
  "api/i5.Toolkit.Core.ProceduralGeometry.GeometryConstructor.html": {
    "href": "api/i5.Toolkit.Core.ProceduralGeometry.GeometryConstructor.html",
    "title": "Class GeometryConstructor | i5 Toolkit Documentation",
    "keywords": "Class GeometryConstructor Utility class which guides the construction of meshes Provides helper methods to register vertices and create faces of different shapes Inheritance object GeometryConstructor Namespace: i5.Toolkit.Core.ProceduralGeometry Assembly: cs.temp.dll.dll Syntax public class GeometryConstructor Constructors GeometryConstructor() Creates the geometry constructor to buid the mesh data You can only add geometry, not remove it Declaration public GeometryConstructor() Properties Name The name of the produced mesh Declaration public string Name { get; set; } Property Value Type Description string Normals Manually set normals Declaration public List<Vector3> Normals { get; } Property Value Type Description System.Collections.Generic.List<T><Vector3> Triangles The triangles/faces of the geometry object Declaration public List<int> Triangles { get; } Property Value Type Description System.Collections.Generic.List<T><int> UVCoords Manually set UV coords Declaration public List<Vector2> UVCoords { get; } Property Value Type Description System.Collections.Generic.List<T><Vector2> Vertices The vertices of the geometry object Declaration public List<Vector3> Vertices { get; } Property Value Type Description System.Collections.Generic.List<T><Vector3> Methods AddQuad(int, int, int, int, bool) Adds a quad to the geometry (by adding two triangles) List the four vertices in clockwise order as seen from the outside The diagonal will be created between the first and third vertex The indices must exist in the geometry, i.e. they first need to be added using AddVertex() Declaration public void AddQuad(int v0, int v1, int v2, int v3, bool flipNormals = false) Parameters Type Name Description int v0 Index of vertex 1 int v1 Index of vertex 2 int v2 Index of vertex 3 int v3 Index of vertex 4 bool flipNormals If set to true, the quad will face the other way AddTriangle(int, int, int, bool) Adds a triangle to the geometry List the three vertices in clockwise order as seen from the outside The indices must exist in the geometry, i.e. they first need to be added using AddVertex() Declaration public void AddTriangle(int v0, int v1, int v2, bool flipNormal = false) Parameters Type Name Description int v0 Index of vertex 1 int v1 Index of vertex 2 int v2 Index of vertex 3 bool flipNormal If set to true, the triangle will face the other way AddTriangleFan(int, int[], bool) Adds a fan of triangles to the geometry List the otherVertices clockwise The indices must exist in the geometry, i.e. they first need to be added using AddVertex() Declaration public void AddTriangleFan(int poleVertex, int[] otherVertices, bool flipNormals = false) Parameters Type Name Description int poleVertex The pole vertex which is connected to all other vertices of the fan int[] otherVertices The vertices which span the fan bool flipNormals If set to true, the triangle fan will face the other way AddVertex(Vector3, Vector2, Vector3) Adds a disconnected vertex to the geometry with the given coordinates, UV coordinates and normal vector Declaration public int AddVertex(Vector3 coordinates, Vector2 uvCoordinates, Vector3 normalVector) Parameters Type Name Description Vector3 coordinates The 3D coordinates of the vertex Vector2 uvCoordinates The texture UV coordinates of the vertex Vector3 normalVector The normal vector of the vertex Returns Type Description int Returns the index of the created vertex AddVertex(Vector3, Vector2) Adds a disconnected vertex to the geometry with the given coordinates and UV coordinates Declaration public int AddVertex(Vector3 coordinates, Vector2 uvCoordinates) Parameters Type Name Description Vector3 coordinates The 3D coordinates of the vertex Vector2 uvCoordinates The texture UV coordinates of the vertex Returns Type Description int Returns the index of the created vertex AddVertex(Vector3, Vector3) Adds a disconnected vertex to the geometry with a given normal vector The normal vector is only used if a normal vector is supplied for every vertex Declaration public int AddVertex(Vector3 coordinates, Vector3 normalVector) Parameters Type Name Description Vector3 coordinates The coordinates of the vertex Vector3 normalVector The normal vector which should be used Returns Type Description int The index of the created vertex AddVertex(Vector3) Adds a disconnected, unnamed vertex to the geometry Declaration public int AddVertex(Vector3 coordinates) Parameters Type Name Description Vector3 coordinates The coordinates of the vertex Returns Type Description int The index of the created vertex ConstructMesh() Builds a mesh from the constructed geometry data Declaration public Mesh ConstructMesh() Returns Type Description Mesh The constructed mesh which is described by these geometry data"
  },
  "api/i5.Toolkit.Core.ProceduralGeometry.html": {
    "href": "api/i5.Toolkit.Core.ProceduralGeometry.html",
    "title": "Namespace i5.Toolkit.Core.ProceduralGeometry | i5 Toolkit Documentation",
    "keywords": "Namespace i5.Toolkit.Core.ProceduralGeometry Classes GeometryConstructor Utility class which guides the construction of meshes Provides helper methods to register vertices and create faces of different shapes MaterialConstructor Construction object to store properties of materials to create them later ObjectConstructor Class for constructing objects on demand TextureConstructor Constructs a texture by fetching it from the Web Interfaces ITextureConstructor Interface for texture constructors"
  },
  "api/i5.Toolkit.Core.ProceduralGeometry.ITextureConstructor.html": {
    "href": "api/i5.Toolkit.Core.ProceduralGeometry.ITextureConstructor.html",
    "title": "Interface ITextureConstructor | i5 Toolkit Documentation",
    "keywords": "Interface ITextureConstructor Interface for texture constructors Namespace: i5.Toolkit.Core.ProceduralGeometry Assembly: cs.temp.dll.dll Syntax public interface ITextureConstructor Methods FetchTextureAsync() Asynchronously fetches a texture Declaration Task<Texture2D> FetchTextureAsync() Returns Type Description Task<><Texture2D>"
  },
  "api/i5.Toolkit.Core.ProceduralGeometry.MaterialConstructor.html": {
    "href": "api/i5.Toolkit.Core.ProceduralGeometry.MaterialConstructor.html",
    "title": "Class MaterialConstructor | i5 Toolkit Documentation",
    "keywords": "Class MaterialConstructor Construction object to store properties of materials to create them later Inheritance object MaterialConstructor Namespace: i5.Toolkit.Core.ProceduralGeometry Assembly: cs.temp.dll.dll Syntax public class MaterialConstructor Constructors MaterialConstructor() Initializes the material constructor with default values Declaration public MaterialConstructor() MaterialConstructor(string) Initializes the material constructor with a given shader Declaration public MaterialConstructor(string shaderName) Parameters Type Name Description string shaderName The name of the shader Properties Color The main color of the material Declaration public Color Color { get; set; } Property Value Type Description Color Name The name of the material Declaration public string Name { get; set; } Property Value Type Description string ShaderName The name of the shader that the material should use Declaration public string ShaderName { get; set; } Property Value Type Description string Methods ConstructMaterial() Constructs a material from the specified data in this constructor Declaration public Material ConstructMaterial() Returns Type Description Material Returns the constructed material FetchDependencies() Fetches any dependencies of the material, e.g. textures Call this method before constructing the material Declaration public Task<bool> FetchDependencies() Returns Type Description Task<><bool> True if all dependencies could be fetched SetFloat(string, float) Sets a float property in the material Declaration public void SetFloat(string name, float value) Parameters Type Name Description string name The name of the float property in the shader float value The value of the float property SetTexture(string, ITextureConstructor) Sets a texture request for the material Declaration public void SetTexture(string name, ITextureConstructor value) Parameters Type Name Description string name The name of the texture property in the shader ITextureConstructor value The texture constructor which fetches the texture"
  },
  "api/i5.Toolkit.Core.ProceduralGeometry.ObjectConstructor.html": {
    "href": "api/i5.Toolkit.Core.ProceduralGeometry.ObjectConstructor.html",
    "title": "Class ObjectConstructor | i5 Toolkit Documentation",
    "keywords": "Class ObjectConstructor Class for constructing objects on demand Inheritance object ObjectConstructor Namespace: i5.Toolkit.Core.ProceduralGeometry Assembly: cs.temp.dll.dll Syntax public class ObjectConstructor Constructors ObjectConstructor() Creates the object constructor with empty geometry and material constructors Declaration public ObjectConstructor() ObjectConstructor(GeometryConstructor, MaterialConstructor) Creates the object constructor with the given geometry and material constructors Declaration public ObjectConstructor(GeometryConstructor geometryConstructor, MaterialConstructor material) Parameters Type Name Description GeometryConstructor geometryConstructor Geometry constructor to initialize the object MaterialConstructor material Material constructor to initialize the object ObjectConstructor(GeometryConstructor) Creates the object constructor with the given geometry constructor Declaration public ObjectConstructor(GeometryConstructor geometryConstructor) Parameters Type Name Description GeometryConstructor geometryConstructor Geometry constructor to initialize the object Properties GeometryConstructor Constructor which defines the object's geometry Declaration public GeometryConstructor GeometryConstructor { get; set; } Property Value Type Description GeometryConstructor MaterialConstructor Constructor which defines the object's material Declaration public MaterialConstructor MaterialConstructor { get; set; } Property Value Type Description MaterialConstructor Methods ConstructObject(Transform) Constructs a GameObject and populates it with the mesh of the geometry constructor and the material of the material constructor Declaration public GameObject ConstructObject(Transform parent = null) Parameters Type Name Description Transform parent Optional; Parents the GameObject to the specified transform Returns Type Description GameObject Returns the created GameObject"
  },
  "api/i5.Toolkit.Core.ProceduralGeometry.TextureConstructor.html": {
    "href": "api/i5.Toolkit.Core.ProceduralGeometry.TextureConstructor.html",
    "title": "Class TextureConstructor | i5 Toolkit Documentation",
    "keywords": "Class TextureConstructor Constructs a texture by fetching it from the Web Inheritance object TextureConstructor Implements ITextureConstructor Namespace: i5.Toolkit.Core.ProceduralGeometry Assembly: cs.temp.dll.dll Syntax public class TextureConstructor : ITextureConstructor Constructors TextureConstructor(string) Creates a texture constructor with the given load path Declaration public TextureConstructor(string loadPath) Parameters Type Name Description string loadPath The path where the texture is stored Properties LoadPath The path where the texture is stored Declaration public string LoadPath { get; set; } Property Value Type Description string TextureLoader Module which loads the object Declaration public IContentLoader<Texture2D> TextureLoader { get; set; } Property Value Type Description IContentLoader<><Texture2D> Methods FetchTextureAsync() Fetches the texture from the Web based on the LoadPath Declaration public Task<Texture2D> FetchTextureAsync() Returns Type Description Task<><Texture2D> Returns the fetched texture or null if something went wrong Implements ITextureConstructor"
  },
  "api/i5.Toolkit.Core.RocketChatClient.ChannelGroup.html": {
    "href": "api/i5.Toolkit.Core.RocketChatClient.ChannelGroup.html",
    "title": "Class ChannelGroup | i5 Toolkit Documentation",
    "keywords": "Class ChannelGroup A combined data object for representing channels and groups in the RocketChat API Inheritance object ChannelGroup Namespace: i5.Toolkit.Core.RocketChatClient Assembly: cs.temp.dll.dll Syntax public class ChannelGroup Fields _id Declaration public string _id Field Value Type Description string description Declaration public string description Field Value Type Description string fname Declaration public string fname Field Value Type Description string msgs Declaration public int msgs Field Value Type Description int name Declaration public string name Field Value Type Description string userCount Declaration public int userCount Field Value Type Description int"
  },
  "api/i5.Toolkit.Core.RocketChatClient.ChannelsJoinedResponse.html": {
    "href": "api/i5.Toolkit.Core.RocketChatClient.ChannelsJoinedResponse.html",
    "title": "Class ChannelsJoinedResponse | i5 Toolkit Documentation",
    "keywords": "Class ChannelsJoinedResponse Parsed response object that is returned when asking the RocketChat API for the joined channels Inheritance object ChannelsJoinedResponse Namespace: i5.Toolkit.Core.RocketChatClient Assembly: cs.temp.dll.dll Syntax public class ChannelsJoinedResponse Fields channels Declaration public ChannelGroup[] channels Field Value Type Description ChannelGroup[]"
  },
  "api/i5.Toolkit.Core.RocketChatClient.GroupsJoinedResponse.html": {
    "href": "api/i5.Toolkit.Core.RocketChatClient.GroupsJoinedResponse.html",
    "title": "Class GroupsJoinedResponse | i5 Toolkit Documentation",
    "keywords": "Class GroupsJoinedResponse Parsed response object that is returned when asking the RocketChat API for the joined groups Inheritance object GroupsJoinedResponse Namespace: i5.Toolkit.Core.RocketChatClient Assembly: cs.temp.dll.dll Syntax public class GroupsJoinedResponse Fields groups Declaration public ChannelGroup[] groups Field Value Type Description ChannelGroup[]"
  },
  "api/i5.Toolkit.Core.RocketChatClient.html": {
    "href": "api/i5.Toolkit.Core.RocketChatClient.html",
    "title": "Namespace i5.Toolkit.Core.RocketChatClient | i5 Toolkit Documentation",
    "keywords": "Namespace i5.Toolkit.Core.RocketChatClient Classes ChannelGroup A combined data object for representing channels and groups in the RocketChat API ChannelsJoinedResponse Parsed response object that is returned when asking the RocketChat API for the joined channels GroupsJoinedResponse Parsed response object that is returned when asking the RocketChat API for the joined groups LoginData Parsed response object that is contains the login data when logging in on the RocketChat API LoginResponse MessageFields Fields which are part of a response of the RocketChat web socket MessageFieldsArguments Arguments of a message received by the RocketChat web socket MessageSentResponse Parsed response object of the RocketChat API for sending a message RocketChatService A client for accessing the Rocket.Chat API User A base user object for the RocketChat API UserInfo Additional information about the RocketChat user which is e.g. received when querying the logged in user WebSocketResponse Parsed response object which is sent by the RocketChat API for streamed web socket messages Enums RocketChatService.RequestType Delegates RocketChatService.ReceivedMessageHandler Event delegate for receiving messages"
  },
  "api/i5.Toolkit.Core.RocketChatClient.LoginData.html": {
    "href": "api/i5.Toolkit.Core.RocketChatClient.LoginData.html",
    "title": "Class LoginData | i5 Toolkit Documentation",
    "keywords": "Class LoginData Parsed response object that is contains the login data when logging in on the RocketChat API Inheritance object LoginData Namespace: i5.Toolkit.Core.RocketChatClient Assembly: cs.temp.dll.dll Syntax public class LoginData Fields authToken Declaration public string authToken Field Value Type Description string userId Declaration public string userId Field Value Type Description string"
  },
  "api/i5.Toolkit.Core.RocketChatClient.LoginResponse.html": {
    "href": "api/i5.Toolkit.Core.RocketChatClient.LoginResponse.html",
    "title": "Class LoginResponse | i5 Toolkit Documentation",
    "keywords": "Class LoginResponse Inheritance object LoginResponse Namespace: i5.Toolkit.Core.RocketChatClient Assembly: cs.temp.dll.dll Syntax public class LoginResponse Fields data Declaration public LoginData data Field Value Type Description LoginData status Declaration public string status Field Value Type Description string Properties Successful Declaration public bool Successful { get; } Property Value Type Description bool"
  },
  "api/i5.Toolkit.Core.RocketChatClient.MessageFields.html": {
    "href": "api/i5.Toolkit.Core.RocketChatClient.MessageFields.html",
    "title": "Class MessageFields | i5 Toolkit Documentation",
    "keywords": "Class MessageFields Fields which are part of a response of the RocketChat web socket Inheritance object MessageFields Namespace: i5.Toolkit.Core.RocketChatClient Assembly: cs.temp.dll.dll Syntax public class MessageFields Fields args Declaration public MessageFieldsArguments[] args Field Value Type Description MessageFieldsArguments[] eventName Declaration public string eventName Field Value Type Description string"
  },
  "api/i5.Toolkit.Core.RocketChatClient.MessageFieldsArguments.html": {
    "href": "api/i5.Toolkit.Core.RocketChatClient.MessageFieldsArguments.html",
    "title": "Class MessageFieldsArguments | i5 Toolkit Documentation",
    "keywords": "Class MessageFieldsArguments Arguments of a message received by the RocketChat web socket Inheritance object MessageFieldsArguments Namespace: i5.Toolkit.Core.RocketChatClient Assembly: cs.temp.dll.dll Syntax public class MessageFieldsArguments Fields _id Declaration public string _id Field Value Type Description string mentions Declaration public User[] mentions Field Value Type Description User[] msg Declaration public string msg Field Value Type Description string rid Declaration public string rid Field Value Type Description string u Declaration public User u Field Value Type Description User Properties MessageContent Gets the raw text of the message; same content as the msg field Easier to read/understand in code than msg Declaration public string MessageContent { get; } Property Value Type Description string Sender Gets the sender of the message; same content as the u field Easier to read/understand in code than u Declaration public User Sender { get; } Property Value Type Description User"
  },
  "api/i5.Toolkit.Core.RocketChatClient.MessageSentResponse.html": {
    "href": "api/i5.Toolkit.Core.RocketChatClient.MessageSentResponse.html",
    "title": "Class MessageSentResponse | i5 Toolkit Documentation",
    "keywords": "Class MessageSentResponse Parsed response object of the RocketChat API for sending a message Inheritance object MessageSentResponse Namespace: i5.Toolkit.Core.RocketChatClient Assembly: cs.temp.dll.dll Syntax public class MessageSentResponse Fields channel Declaration public string channel Field Value Type Description string success Declaration public bool success Field Value Type Description bool ts Declaration public long ts Field Value Type Description long"
  },
  "api/i5.Toolkit.Core.RocketChatClient.RocketChatService.html": {
    "href": "api/i5.Toolkit.Core.RocketChatClient.RocketChatService.html",
    "title": "Class RocketChatService | i5 Toolkit Documentation",
    "keywords": "Class RocketChatService A client for accessing the Rocket.Chat API Inheritance object RocketChatService Namespace: i5.Toolkit.Core.RocketChatClient Assembly: cs.temp.dll.dll Syntax public class RocketChatService : IService Constructors RocketChatService(string) Creates a new Rocket.Chat client instance Declaration public RocketChatService(string hostAddress) Parameters Type Name Description string hostAddress The URL address where the Rocket.Chat server is hosted Properties AuthToken AuthToken (X-Auth-Token) of the user. It is automatically set during the login. Declaration public string AuthToken { get; } Property Value Type Description string HostAddress The address where the Rocket.Chat server is hosted Declaration public string HostAddress { get; set; } Property Value Type Description string JsonSerializer Module for serializing and de-serializing JSON files Initialized by default with the JsonUtilityAdapter Declaration public IJsonSerializer JsonSerializer { get; set; } Property Value Type Description IJsonSerializer UserID UserID (X-User-Id) of the user. It is automatically set during the login. Declaration public string UserID { get; } Property Value Type Description string Methods Cleanup() Cleans up the service as it is deregistered from the service manager Declaration public void Cleanup() GetChannelListJoinedAsync() Get the user's channel list of joined channels. Requires login first. Note that this only includes public channels. For private channels, get the user's groups. See https://developer.rocket.chat/reference/api/rest-api/endpoints/team-collaboration-endpoints/channels-endpoints/list Declaration public Task<WebResponse<ChannelGroup[]>> GetChannelListJoinedAsync() Returns Type Description Task<><WebResponse<ChannelGroup[]>> Retunrs a WebResponse with the server's answer and an array of the user's channels GetGroupListAsync() Gets the user's list of joined groups. Requires login first. This does not only include groups but also private channels. See https://developer.rocket.chat/reference/api/rest-api/endpoints/team-collaboration-endpoints/groups-endpoints/list Declaration public Task<WebResponse<ChannelGroup[]>> GetGroupListAsync() Returns Type Description Task<><WebResponse<ChannelGroup[]>> Returns a WebResponse of the server and an array of the user's groups GetMeAsync() Get the profile information of the logged-in user. Requires login first. See https://developer.rocket.chat/reference/api/rest-api/endpoints/other-important-endpoints/authentication-endpoints/me Declaration public Task<WebResponse<UserInfo>> GetMeAsync() Returns Type Description Task<><WebResponse<UserInfo>> Initialize(IServiceManager) Initializes the service as it gets registerd with a ServiceManager Declaration public void Initialize(IServiceManager owner) Parameters Type Name Description IServiceManager owner The service manager which now owns this service LoginAsync(string, string) Log in to the server with a username and password. It sets the AuthToken and UserID properties. See https://developer.rocket.chat/reference/api/rest-api/endpoints/other-important-endpoints/authentication-endpoints/login Declaration public Task<WebResponse<LoginResponse>> LoginAsync(string username, string password) Parameters Type Name Description string username The username of the user who wants to log in string password The password of the user who wants to log in Returns Type Description Task<><WebResponse<LoginResponse>> Returns the parsed login response LoginAsync(string) Log in to the server with an auth token. It sets the AuthToken and UserID properties. See https://developer.rocket.chat/reference/api/rest-api/endpoints/other-important-endpoints/authentication-endpoints/login Declaration public Task<WebResponse<LoginResponse>> LoginAsync(string authToken) Parameters Type Name Description string authToken The auth token that identifies and authorized the user who wants to log in Returns Type Description Task<><WebResponse<LoginResponse>> Returns true if the login was successful, otherwise false PostMessageAsync(string, string) Post a message to a given room (channel, team, direct message etc.) of the user. Requires login first. See https://developer.rocket.chat/reference/api/rest-api/endpoints/team-collaboration-endpoints/chat-endpoints/postmessage Declaration public Task<WebResponse<MessageSentResponse>> PostMessageAsync(string targetID, string text = \"\") Parameters Type Name Description string targetID rid of the room, channel name (#) or user name (@) string text Returns Type Description Task<><WebResponse<MessageSentResponse>> Returns true if the message was successfully sent SendHttpRequestAsync(RequestType, string, string) Send an arbitrary HTTP request to the host. Supports only GET and POST with application/json header. APIs See https://developer.rocket.chat/reference/api/rest-api Declaration public Task<WebResponse<string>> SendHttpRequestAsync(RocketChatService.RequestType type, string apiSuffix, string payload = \"\") Parameters Type Name Description RocketChatService.RequestType type request type, supports GET and POST string apiSuffix the api string behind the host, e.g. /api/v1/login string payload Payload of a POST request, optional. Returns Type Description Task<><WebResponse<string>> WebResponse with the server's answer SendWebSocketRequestAsync(string, string) Send an arbitrary WebSocket request to the host. APIs See https://developer.rocket.chat/reference/api/realtime-api Declaration public Task<WebResponse<string>> SendWebSocketRequestAsync(string uniqueID, string message) Parameters Type Name Description string uniqueID id of the request string message message to send Returns Type Description Task<><WebResponse<string>> Returns the API's answer as a WebResponse object SubscribeRoomMessageAsync(string, string) Start listening for messages in a particular channel Starts a web socket that keeps up a connection to the API. See https://developer.rocket.chat/reference/api/realtime-api/subscriptions/stream-room-messages Declaration public Task SubscribeRoomMessageAsync(string roomID, string uniqueID) Parameters Type Name Description string roomID rid of the room (must be the internal id, the human-readable name starting with the '#' does not work) string uniqueID a unique ID of this subscription (can be chosen arbitrarily) Returns Type Description Task UnsubscribeRoomMessageAsync(string) Stop listening for messages in a room, given the ID of the former subscription. Closes this particular Web socket connection to the API Declaration public Task UnsubscribeRoomMessageAsync(string uniqueID) Parameters Type Name Description string uniqueID The subscribtion ID that identifies the subscription Returns Type Description Task Events OnMessageReceived Fired when the client receives a WebSocket message from a room. Declaration public event RocketChatService.ReceivedMessageHandler OnMessageReceived Event Type Type Description RocketChatService.ReceivedMessageHandler"
  },
  "api/i5.Toolkit.Core.RocketChatClient.RocketChatService.ReceivedMessageHandler.html": {
    "href": "api/i5.Toolkit.Core.RocketChatClient.RocketChatService.ReceivedMessageHandler.html",
    "title": "Delegate RocketChatService.ReceivedMessageHandler | i5 Toolkit Documentation",
    "keywords": "Delegate RocketChatService.ReceivedMessageHandler Event delegate for receiving messages Namespace: i5.Toolkit.Core.RocketChatClient Assembly: cs.temp.dll.dll Syntax public delegate void RocketChatService.ReceivedMessageHandler(MessageFieldsArguments messageArgs) Parameters Type Name Description MessageFieldsArguments messageArgs The arguments of the received message, e.g. contains the message's text or the sender"
  },
  "api/i5.Toolkit.Core.RocketChatClient.RocketChatService.RequestType.html": {
    "href": "api/i5.Toolkit.Core.RocketChatClient.RocketChatService.RequestType.html",
    "title": "Enum RocketChatService.RequestType | i5 Toolkit Documentation",
    "keywords": "Enum RocketChatService.RequestType Namespace: i5.Toolkit.Core.RocketChatClient Assembly: cs.temp.dll.dll Syntax public enum RocketChatService.RequestType Fields Name Description GET POST"
  },
  "api/i5.Toolkit.Core.RocketChatClient.User.html": {
    "href": "api/i5.Toolkit.Core.RocketChatClient.User.html",
    "title": "Class User | i5 Toolkit Documentation",
    "keywords": "Class User A base user object for the RocketChat API Inheritance object User UserInfo Namespace: i5.Toolkit.Core.RocketChatClient Assembly: cs.temp.dll.dll Syntax public class User Fields _id Declaration public string _id Field Value Type Description string name Declaration public string name Field Value Type Description string username Declaration public string username Field Value Type Description string"
  },
  "api/i5.Toolkit.Core.RocketChatClient.UserInfo.html": {
    "href": "api/i5.Toolkit.Core.RocketChatClient.UserInfo.html",
    "title": "Class UserInfo | i5 Toolkit Documentation",
    "keywords": "Class UserInfo Additional information about the RocketChat user which is e.g. received when querying the logged in user Inheritance object User UserInfo Inherited Members User._id User.username User.name Namespace: i5.Toolkit.Core.RocketChatClient Assembly: cs.temp.dll.dll Syntax public class UserInfo : User Fields _updatedAt Declaration public string _updatedAt Field Value Type Description string active Declaration public bool active Field Value Type Description bool avatarETag Declaration public string avatarETag Field Value Type Description string avatarOrigin Declaration public string avatarOrigin Field Value Type Description string avatarUrl Declaration public string avatarUrl Field Value Type Description string email Declaration public string email Field Value Type Description string roles Declaration public string[] roles Field Value Type Description string[] status Declaration public string status Field Value Type Description string statusConnectoin Declaration public string statusConnectoin Field Value Type Description string statusDefault Declaration public string statusDefault Field Value Type Description string success Declaration public bool success Field Value Type Description bool utcOffset Declaration public int utcOffset Field Value Type Description int"
  },
  "api/i5.Toolkit.Core.RocketChatClient.WebSocketResponse.html": {
    "href": "api/i5.Toolkit.Core.RocketChatClient.WebSocketResponse.html",
    "title": "Class WebSocketResponse | i5 Toolkit Documentation",
    "keywords": "Class WebSocketResponse Parsed response object which is sent by the RocketChat API for streamed web socket messages Inheritance object WebSocketResponse Namespace: i5.Toolkit.Core.RocketChatClient Assembly: cs.temp.dll.dll Syntax public class WebSocketResponse Fields fields Additional fields in the message by the API Declaration public MessageFields fields Field Value Type Description MessageFields msg A category which labels this response This is not the message content by a user Declaration public string msg Field Value Type Description string"
  },
  "api/i5.Toolkit.Core.SceneDocumentation.DocumentationObject.html": {
    "href": "api/i5.Toolkit.Core.SceneDocumentation.DocumentationObject.html",
    "title": "Class DocumentationObject | i5 Toolkit Documentation",
    "keywords": "Class DocumentationObject A special component which provides documentation information in the editor Inheritance object DocumentationObject Namespace: i5.Toolkit.Core.SceneDocumentation Assembly: cs.temp.dll.dll Syntax public class DocumentationObject : MonoBehaviour Fields description A description of the documented highlight Declaration public string description Field Value Type Description string title The title of the documentation Declaration public string title Field Value Type Description string type The type of documentation (e.g. information, todo mark or bug mark) Based on this, the icon is changed Declaration public DocumentationType type Field Value Type Description DocumentationType url A url to further documentation on the matter Declaration public string url Field Value Type Description string"
  },
  "api/i5.Toolkit.Core.SceneDocumentation.DocumentationType.html": {
    "href": "api/i5.Toolkit.Core.SceneDocumentation.DocumentationType.html",
    "title": "Enum DocumentationType | i5 Toolkit Documentation",
    "keywords": "Enum DocumentationType The different types of Documentation which are available Namespace: i5.Toolkit.Core.SceneDocumentation Assembly: cs.temp.dll.dll Syntax public enum DocumentationType Fields Name Description BUG INFO NO_ICON TODO"
  },
  "api/i5.Toolkit.Core.SceneDocumentation.html": {
    "href": "api/i5.Toolkit.Core.SceneDocumentation.html",
    "title": "Namespace i5.Toolkit.Core.SceneDocumentation | i5 Toolkit Documentation",
    "keywords": "Namespace i5.Toolkit.Core.SceneDocumentation Classes DocumentationObject A special component which provides documentation information in the editor Enums DocumentationType The different types of Documentation which are available"
  },
  "api/i5.Toolkit.Core.ServiceCore.AsyncThreadedWorkerService-1.html": {
    "href": "api/i5.Toolkit.Core.ServiceCore.AsyncThreadedWorkerService-1.html",
    "title": "Class AsyncThreadedWorkerService<OperationType> | i5 Toolkit Documentation",
    "keywords": "Class AsyncThreadedWorkerService<OperationType> Threaded worker service which can perform operations asynchronously on other threads Inheritance object AsyncThreadedWorkerService<OperationType> Implements IUpdateableService IService Namespace: i5.Toolkit.Core.ServiceCore Assembly: cs.temp.dll.dll Syntax public class AsyncThreadedWorkerService<OperationType> : IUpdateableService, IService where OperationType : IOperation Type Parameters Name Description OperationType The type of operation that should be performed Properties Enabled If set to true, the update routine will run every frame Declaration public bool Enabled { get; set; } Property Value Type Description bool Methods AddOperation(OperationType) Adds an operation to the queue of operations to execute on a separate thread Declaration public void AddOperation(OperationType operation) Parameters Type Name Description OperationType operation The operation which should be executed AsyncOperation(OperationType) Declaration protected virtual void AsyncOperation(OperationType operation) Parameters Type Name Description OperationType operation Cleanup() Called by the ServiceManager to clean the service up when it is removed Declaration public void Cleanup() Initialize(IServiceManager) Called by the ServiceManager to initialize the service Declaration public void Initialize(IServiceManager owner) Parameters Type Name Description IServiceManager owner Update() Called by the ServiceManager every frame If there is an operation waiting to be executed, it will be started If there are finished operations available, their callback method is called Declaration public void Update() Implements IUpdateableService IService"
  },
  "api/i5.Toolkit.Core.ServiceCore.BaseServiceBootstrapper.html": {
    "href": "api/i5.Toolkit.Core.ServiceCore.BaseServiceBootstrapper.html",
    "title": "Class BaseServiceBootstrapper | i5 Toolkit Documentation",
    "keywords": "Class BaseServiceBootstrapper A bootstrapper base class which handles the service initialization Inheritance object BaseServiceBootstrapper Namespace: i5.Toolkit.Core.ServiceCore Assembly: cs.temp.dll.dll Syntax public abstract class BaseServiceBootstrapper : MonoBehaviour Methods OnDestroy() Declaration protected virtual void OnDestroy() RegisterServices() Declaration protected abstract void RegisterServices() Start() Declaration protected virtual void Start() UnRegisterServices() Declaration protected abstract void UnRegisterServices()"
  },
  "api/i5.Toolkit.Core.ServiceCore.html": {
    "href": "api/i5.Toolkit.Core.ServiceCore.html",
    "title": "Namespace i5.Toolkit.Core.ServiceCore | i5 Toolkit Documentation",
    "keywords": "Namespace i5.Toolkit.Core.ServiceCore Classes AsyncThreadedWorkerService<OperationType> Threaded worker service which can perform operations asynchronously on other threads BaseServiceBootstrapper A bootstrapper base class which handles the service initialization Operation<ResultType> The operation to execute ServiceManager Manager which administers registered services These services need to implement the IService interface and do not need to inherit from MonoBehaviour ServiceManagerRunner The runner which provides MonoBehaviour events to an IRunnerReceiver Interfaces IOperation Contract which defines the interface of an operation IRunnerReceiver Contract which defines which methods a MonoBehaviour runner can access This can be used to provide MonoBehaviour events to non-MonoBehaviours IService Contract which defines the capabilities of a service IServiceManager Contract which defines how to interact with service manager implementations IUpdateableService A service which can execute code every frame Enums OperationStatus The possible states of an operation"
  },
  "api/i5.Toolkit.Core.ServiceCore.IOperation.html": {
    "href": "api/i5.Toolkit.Core.ServiceCore.IOperation.html",
    "title": "Interface IOperation | i5 Toolkit Documentation",
    "keywords": "Interface IOperation Contract which defines the interface of an operation Namespace: i5.Toolkit.Core.ServiceCore Assembly: cs.temp.dll.dll Syntax public interface IOperation Methods ReturnCallback() Declaration void ReturnCallback()"
  },
  "api/i5.Toolkit.Core.ServiceCore.IRunnerReceiver.html": {
    "href": "api/i5.Toolkit.Core.ServiceCore.IRunnerReceiver.html",
    "title": "Interface IRunnerReceiver | i5 Toolkit Documentation",
    "keywords": "Interface IRunnerReceiver Contract which defines which methods a MonoBehaviour runner can access This can be used to provide MonoBehaviour events to non-MonoBehaviours Namespace: i5.Toolkit.Core.ServiceCore Assembly: cs.temp.dll.dll Syntax public interface IRunnerReceiver Methods OnRunnerDestroyed() Called to inform the receiver that the runner object is destroyed Declaration void OnRunnerDestroyed() Update() Called every frame by the runner Declaration void Update()"
  },
  "api/i5.Toolkit.Core.ServiceCore.IService.html": {
    "href": "api/i5.Toolkit.Core.ServiceCore.IService.html",
    "title": "Interface IService | i5 Toolkit Documentation",
    "keywords": "Interface IService Contract which defines the capabilities of a service Namespace: i5.Toolkit.Core.ServiceCore Assembly: cs.temp.dll.dll Syntax public interface IService Methods Cleanup() Cleans up the service when it is unregistered at the service manager Declaration void Cleanup() Initialize(IServiceManager) Initializes the service Declaration void Initialize(IServiceManager owner) Parameters Type Name Description IServiceManager owner The IServiceManager which owns this service"
  },
  "api/i5.Toolkit.Core.ServiceCore.IServiceManager.html": {
    "href": "api/i5.Toolkit.Core.ServiceCore.IServiceManager.html",
    "title": "Interface IServiceManager | i5 Toolkit Documentation",
    "keywords": "Interface IServiceManager Contract which defines how to interact with service manager implementations Namespace: i5.Toolkit.Core.ServiceCore Assembly: cs.temp.dll.dll Syntax public interface IServiceManager Properties Runner The runner object which provides MonoBehaviour events to the service manager This can also be used by services to access MonoBehaviour functionality, e.g. for running co-routines Declaration ServiceManagerRunner Runner { get; } Property Value Type Description ServiceManagerRunner Methods InstGetService<T>() Retrieves the reference to a registered service of the given type Declaration T InstGetService<T>() where T : IService Returns Type Description T Returns the reference to the service Type Parameters Name Description T The type of service InstRegisterService<T>(T) Registers a new service Declaration void InstRegisterService<T>(T service) where T : IService Parameters Type Name Description T service The service to register Type Parameters Name Description T The type of service InstRemoveService<T>() Removes a service from the service manager Declaration void InstRemoveService<T>() where T : IService Type Parameters Name Description T The type of service InstServiceExists<T>() Checks if a service of the given type has been registered at the service manager Declaration bool InstServiceExists<T>() where T : IService Returns Type Description bool Returns true if a service with the given type exists at the service manager Type Parameters Name Description T The type of the service"
  },
  "api/i5.Toolkit.Core.ServiceCore.IUpdateableService.html": {
    "href": "api/i5.Toolkit.Core.ServiceCore.IUpdateableService.html",
    "title": "Interface IUpdateableService | i5 Toolkit Documentation",
    "keywords": "Interface IUpdateableService A service which can execute code every frame Inherited Members IService.Initialize(IServiceManager) IService.Cleanup() Namespace: i5.Toolkit.Core.ServiceCore Assembly: cs.temp.dll.dll Syntax public interface IUpdateableService : IService Properties Enabled If set to true, the update function is executed every frame; otherwise the service is disabled Declaration bool Enabled { get; set; } Property Value Type Description bool Methods Update() Called by the service manager and executed every frame Declaration void Update()"
  },
  "api/i5.Toolkit.Core.ServiceCore.Operation-1.html": {
    "href": "api/i5.Toolkit.Core.ServiceCore.Operation-1.html",
    "title": "Class Operation<ResultType> | i5 Toolkit Documentation",
    "keywords": "Class Operation<ResultType> The operation to execute Inheritance object Operation<ResultType> Implements IOperation Namespace: i5.Toolkit.Core.ServiceCore Assembly: cs.temp.dll.dll Syntax public class Operation<ResultType> : IOperation Type Parameters Name Description ResultType The type of the operation's return value Constructors Operation(Action<Operation<ResultType>>) Creates a new operation instance with the given callback method Declaration public Operation(Action<Operation<ResultType>> callback) Parameters Type Name Description Action<><Operation<ResultType>> callback The callback method which is invoked once the operation has finished Fields callback The callback method which is invoked once the operation has finished The call will provide the result Declaration public Action<Operation<ResultType>> callback Field Value Type Description Action<><Operation<ResultType>> result The result of the operation once it is finished Declaration public ResultType result Field Value Type Description ResultType status The status of the operation Declaration public OperationStatus status Field Value Type Description OperationStatus Methods ReturnCallback() Invokes the callback method Declaration public void ReturnCallback() Implements IOperation"
  },
  "api/i5.Toolkit.Core.ServiceCore.OperationStatus.html": {
    "href": "api/i5.Toolkit.Core.ServiceCore.OperationStatus.html",
    "title": "Enum OperationStatus | i5 Toolkit Documentation",
    "keywords": "Enum OperationStatus The possible states of an operation Namespace: i5.Toolkit.Core.ServiceCore Assembly: cs.temp.dll.dll Syntax public enum OperationStatus Fields Name Description ERROR SUCCESS WORKING"
  },
  "api/i5.Toolkit.Core.ServiceCore.ServiceManager.html": {
    "href": "api/i5.Toolkit.Core.ServiceCore.ServiceManager.html",
    "title": "Class ServiceManager | i5 Toolkit Documentation",
    "keywords": "Class ServiceManager Manager which administers registered services These services need to implement the IService interface and do not need to inherit from MonoBehaviour Inheritance object ServiceManager Implements IServiceManager IRunnerReceiver Namespace: i5.Toolkit.Core.ServiceCore Assembly: cs.temp.dll.dll Syntax public class ServiceManager : IServiceManager, IRunnerReceiver Constructors ServiceManager() Creates a new instance of a ServiceManager Declaration public ServiceManager() Properties Instance The instance of the service manager Declaration public static ServiceManager Instance { get; } Property Value Type Description ServiceManager Runner The runner in the scene This runner object provides MonoBehaviour events to the service manager It can be accessed by servies to run MonoBehaviour functionality, e.g. co-routines Declaration public ServiceManagerRunner Runner { get; } Property Value Type Description ServiceManagerRunner Methods GetService<T>() Gets the service instance with the given type Declaration public static T GetService<T>() where T : IService Returns Type Description T Returns the registered service instance Type Parameters Name Description T The type of service InstGetService<T>() Gets the service instance with the given type that is registered at this instance Declaration public T InstGetService<T>() where T : IService Returns Type Description T Returns the registered service instance Type Parameters Name Description T The type of service InstRegisterService<T>(T) Instance method for registering a new service Declaration public void InstRegisterService<T>(T service) where T : IService Parameters Type Name Description T service The service instance which should be registered Type Parameters Name Description T The type of service InstRemoveService<T>() Removes a service with the given type from this ServiceManager instance Declaration public void InstRemoveService<T>() where T : IService Type Parameters Name Description T The type of service InstServiceExists<T>() Checks if a service with the given type exists at this instance Declaration public bool InstServiceExists<T>() where T : IService Returns Type Description bool Returns true if a service of the given type was registered at this instance Type Parameters Name Description T The type of service OnRunnerDestroyed() Called if the runner object is destroyed Makes sure that the runner persists if it was destroyed by some other script Declaration public void OnRunnerDestroyed() RegisterService<T>(T) Registers a new service at the service manager Declaration public static void RegisterService<T>(T service) where T : IService Parameters Type Name Description T service The service instance which should be registered at the ServiceManager Type Parameters Name Description T The type of service RemoveService<T>() Removes a provider with the given type from the ServiceManager Declaration public static void RemoveService<T>() where T : IService Type Parameters Name Description T The type of service ServiceExists<T>() Checks if a service with the given type exists at the ServiceManager Declaration public static bool ServiceExists<T>() where T : IService Returns Type Description bool Returns true if a service of the given type was registered Type Parameters Name Description T The type of service Update() Called by the update runner Updates the updateable services Declaration public void Update() Implements IServiceManager IRunnerReceiver"
  },
  "api/i5.Toolkit.Core.ServiceCore.ServiceManagerRunner.html": {
    "href": "api/i5.Toolkit.Core.ServiceCore.ServiceManagerRunner.html",
    "title": "Class ServiceManagerRunner | i5 Toolkit Documentation",
    "keywords": "Class ServiceManagerRunner The runner which provides MonoBehaviour events to an IRunnerReceiver Inheritance object ServiceManagerRunner Namespace: i5.Toolkit.Core.ServiceCore Assembly: cs.temp.dll.dll Syntax public class ServiceManagerRunner : MonoBehaviour Methods Initialize(IRunnerReceiver) Initializes the runner by assigning the runner receiver Declaration public void Initialize(IRunnerReceiver runnerReceiver) Parameters Type Name Description IRunnerReceiver runnerReceiver The runner receiver that should receive the MonoBehaviour events"
  },
  "api/i5.Toolkit.Core.Spawners.html": {
    "href": "api/i5.Toolkit.Core.Spawners.html",
    "title": "Namespace i5.Toolkit.Core.Spawners | i5 Toolkit Documentation",
    "keywords": "Namespace i5.Toolkit.Core.Spawners Classes Spawner Spawner which can instantiate one prefab object in the scene"
  },
  "api/i5.Toolkit.Core.Spawners.Spawner.html": {
    "href": "api/i5.Toolkit.Core.Spawners.Spawner.html",
    "title": "Class Spawner | i5 Toolkit Documentation",
    "keywords": "Class Spawner Spawner which can instantiate one prefab object in the scene Inheritance object Spawner Namespace: i5.Toolkit.Core.Spawners Assembly: cs.temp.dll.dll Syntax public class Spawner : MonoBehaviour Fields destroyWithSpawner Declaration protected bool destroyWithSpawner Field Value Type Description bool maxNumberOfInstances Declaration protected int maxNumberOfInstances Field Value Type Description int overwriteExistingInstances Declaration protected bool overwriteExistingInstances Field Value Type Description bool prefab Declaration protected GameObject prefab Field Value Type Description GameObject spawnedInstanceQueue Declaration protected Queue<GameObject> spawnedInstanceQueue Field Value Type Description System.Collections.Generic.Queue<T><GameObject> spawnOnAwake Declaration protected bool spawnOnAwake Field Value Type Description bool Properties DestroyWithSpawner If true, the spawned instance will be destroyed if the spawner is destroyed Declaration public bool DestroyWithSpawner { get; set; } Property Value Type Description bool MostRecentlySpawnedObject Returns the most recently spawned object Declaration public GameObject MostRecentlySpawnedObject { get; } Property Value Type Description GameObject OverwriteExistingInstances If true, multiple calls of Spawn() will destroy existing instances in the scene Otherwise Spawn() will only work if no instance exists in the scene Declaration public bool OverwriteExistingInstances { get; set; } Property Value Type Description bool SpawnedInstances The instance which was created by this spawner Declaration public GameObject[] SpawnedInstances { get; } Property Value Type Description GameObject[] Methods Awake() Initiates a spawn if spawnOnAwake is true Declaration protected virtual void Awake() OnDestroy() Called if the spawner is destroyed. If destroyWithSpawner was checked, the spawned instance will also be destroyed Declaration protected virtual void OnDestroy() Setup(GameObject) This method can be overwritten to setup the spawned instance immediately after it has been created Declaration protected virtual void Setup(GameObject instance) Parameters Type Name Description GameObject instance Spawn() Spawns the object instance Note that the spawn may fail, e.g. if the instance already existed and may not be overwritten Declaration public bool Spawn() Returns Type Description bool True if the spawn process was successful"
  },
  "api/i5.Toolkit.Core.TestHelpers.AsyncTest.html": {
    "href": "api/i5.Toolkit.Core.TestHelpers.AsyncTest.html",
    "title": "Class AsyncTest | i5 Toolkit Documentation",
    "keywords": "Class AsyncTest Utilities for asynchronous tests Inheritance object AsyncTest Namespace: i5.Toolkit.Core.TestHelpers Assembly: cs.temp.dll.dll Syntax public static class AsyncTest Methods WaitForTask(Task) Waits for the given task to complete Use this instead of await in Unit tests. Unity's NUnit version cannot handle Task methods to yield on await Hence, the asynchronous tests must be marked as UnityTests. Awaitable calls are replaced with an assignment to a Task object Declaration public static IEnumerator WaitForTask(Task task) Parameters Type Name Description Task task The task object to await Returns Type Description System.Collections.Generic.IEnumerator"
  },
  "api/i5.Toolkit.Core.TestHelpers.html": {
    "href": "api/i5.Toolkit.Core.TestHelpers.html",
    "title": "Namespace i5.Toolkit.Core.TestHelpers | i5 Toolkit Documentation",
    "keywords": "Namespace i5.Toolkit.Core.TestHelpers Classes AsyncTest Utilities for asynchronous tests InvalidPlatformException PlayModeTestUtilities"
  },
  "api/i5.Toolkit.Core.TestHelpers.InvalidPlatformException.html": {
    "href": "api/i5.Toolkit.Core.TestHelpers.InvalidPlatformException.html",
    "title": "Class InvalidPlatformException | i5 Toolkit Documentation",
    "keywords": "Class InvalidPlatformException Inheritance object InvalidPlatformException Namespace: i5.Toolkit.Core.TestHelpers Assembly: cs.temp.dll.dll Syntax public class InvalidPlatformException : Exception Constructors InvalidPlatformException() Declaration public InvalidPlatformException() InvalidPlatformException(string, Exception) Declaration public InvalidPlatformException(string message, Exception inner) Parameters Type Name Description string message Exception inner InvalidPlatformException(string) Declaration public InvalidPlatformException(string message) Parameters Type Name Description string message"
  },
  "api/i5.Toolkit.Core.TestHelpers.PlayModeTestUtilities.html": {
    "href": "api/i5.Toolkit.Core.TestHelpers.PlayModeTestUtilities.html",
    "title": "Class PlayModeTestUtilities | i5 Toolkit Documentation",
    "keywords": "Class PlayModeTestUtilities Inheritance object PlayModeTestUtilities Namespace: i5.Toolkit.Core.TestHelpers Assembly: cs.temp.dll.dll Syntax public static class PlayModeTestUtilities Methods LoadEmptyTestScene() Declaration public static void LoadEmptyTestScene() UnloadTestScene() Declaration public static void UnloadTestScene()"
  },
  "api/i5.Toolkit.Core.TestUtilities.FakeContentLoaderFactory.html": {
    "href": "api/i5.Toolkit.Core.TestUtilities.FakeContentLoaderFactory.html",
    "title": "Class FakeContentLoaderFactory | i5 Toolkit Documentation",
    "keywords": "Class FakeContentLoaderFactory Inheritance object FakeContentLoaderFactory Namespace: i5.Toolkit.Core.TestUtilities Assembly: cs.temp.dll.dll Syntax public static class FakeContentLoaderFactory Methods CreateFakeFailLoader<T>() Declaration public static IContentLoader<T> CreateFakeFailLoader<T>() Returns Type Description IContentLoader<><T> Type Parameters Name Description T CreateFakeLoader<T>(T) Declaration public static IContentLoader<T> CreateFakeLoader<T>(T content) Parameters Type Name Description T content Returns Type Description IContentLoader<><T> Type Parameters Name Description T"
  },
  "api/i5.Toolkit.Core.TestUtilities.html": {
    "href": "api/i5.Toolkit.Core.TestUtilities.html",
    "title": "Namespace i5.Toolkit.Core.TestUtilities | i5 Toolkit Documentation",
    "keywords": "Namespace i5.Toolkit.Core.TestUtilities Classes FakeContentLoaderFactory TestObject An object for Object Pool tests TestUpdateService"
  },
  "api/i5.Toolkit.Core.TestUtilities.TestObject.html": {
    "href": "api/i5.Toolkit.Core.TestUtilities.TestObject.html",
    "title": "Class TestObject | i5 Toolkit Documentation",
    "keywords": "Class TestObject An object for Object Pool tests Inheritance object TestObject Namespace: i5.Toolkit.Core.TestUtilities Assembly: cs.temp.dll.dll Syntax public class TestObject Constructors TestObject(int) Declaration public TestObject(int id) Parameters Type Name Description int id Properties Id Declaration public int Id { get; } Property Value Type Description int"
  },
  "api/i5.Toolkit.Core.TestUtilities.TestUpdateService.html": {
    "href": "api/i5.Toolkit.Core.TestUtilities.TestUpdateService.html",
    "title": "Class TestUpdateService | i5 Toolkit Documentation",
    "keywords": "Class TestUpdateService Inheritance object TestUpdateService Namespace: i5.Toolkit.Core.TestUtilities Assembly: cs.temp.dll.dll Syntax public class TestUpdateService : IUpdateableService Properties Enabled Declaration public bool Enabled { get; set; } Property Value Type Description bool TestCounter Declaration public int TestCounter { get; } Property Value Type Description int Methods Cleanup() Declaration public void Cleanup() Initialize(IServiceManager) Declaration public void Initialize(IServiceManager owner) Parameters Type Name Description IServiceManager owner Update() Declaration public void Update()"
  },
  "api/i5.Toolkit.Core.TestUtilities.UIOperator.html": {
    "href": "api/i5.Toolkit.Core.TestUtilities.UIOperator.html",
    "title": "Namespace i5.Toolkit.Core.TestUtilities.UIOperator | i5 Toolkit Documentation",
    "keywords": "Namespace i5.Toolkit.Core.TestUtilities.UIOperator Classes UiElementNotFoundException UiOperator"
  },
  "api/i5.Toolkit.Core.TestUtilities.UIOperator.UiElementNotFoundException.html": {
    "href": "api/i5.Toolkit.Core.TestUtilities.UIOperator.UiElementNotFoundException.html",
    "title": "Class UiElementNotFoundException | i5 Toolkit Documentation",
    "keywords": "Class UiElementNotFoundException Inheritance object UiElementNotFoundException Namespace: i5.Toolkit.Core.TestUtilities.UIOperator Assembly: cs.temp.dll.dll Syntax public class UiElementNotFoundException : Exception Constructors UiElementNotFoundException() Declaration public UiElementNotFoundException() UiElementNotFoundException(string, Exception) Declaration public UiElementNotFoundException(string message, Exception innerException) Parameters Type Name Description string message Exception innerException UiElementNotFoundException(string) Declaration public UiElementNotFoundException(string message) Parameters Type Name Description string message Methods Create(GameObject, MonoBehaviour) Declaration public static UiElementNotFoundException Create(GameObject go, MonoBehaviour monoBehaviour) Parameters Type Name Description GameObject go MonoBehaviour monoBehaviour Returns Type Description UiElementNotFoundException"
  },
  "api/i5.Toolkit.Core.TestUtilities.UIOperator.UiOperator.html": {
    "href": "api/i5.Toolkit.Core.TestUtilities.UIOperator.UiOperator.html",
    "title": "Class UiOperator | i5 Toolkit Documentation",
    "keywords": "Class UiOperator Inheritance object UiOperator Namespace: i5.Toolkit.Core.TestUtilities.UIOperator Assembly: cs.temp.dll.dll Syntax public static class UiOperator Methods InputFieldEndEdit(InputField) Declaration public static void InputFieldEndEdit(InputField inputField) Parameters Type Name Description InputField inputField InputFieldEndEdit(string) Declaration public static void InputFieldEndEdit(string inputFieldName) Parameters Type Name Description string inputFieldName PressButton(Button) Declaration public static void PressButton(Button button) Parameters Type Name Description Button button PressButton(string) Declaration public static void PressButton(string buttonName) Parameters Type Name Description string buttonName SetDropdownIndex(Dropdown, int) Declaration public static void SetDropdownIndex(Dropdown dropdown, int index) Parameters Type Name Description Dropdown dropdown int index SetDropdownIndex(string, int) Declaration public static void SetDropdownIndex(string dropdownName, int index) Parameters Type Name Description string dropdownName int index SetInputFieldText(InputField, string) Declaration public static void SetInputFieldText(InputField inputField, string text) Parameters Type Name Description InputField inputField string text SetInputFieldText(string, string) Declaration public static void SetInputFieldText(string inputFieldName, string text) Parameters Type Name Description string inputFieldName string text SetScrollbarValue(Scrollbar, float) Declaration public static void SetScrollbarValue(Scrollbar scrollbar, float value) Parameters Type Name Description Scrollbar scrollbar float value SetScrollbarValue(string, float) Declaration public static void SetScrollbarValue(string scrollBarName, float value) Parameters Type Name Description string scrollBarName float value SetScrollRectValue(ScrollRect, Vector2) Declaration public static void SetScrollRectValue(ScrollRect scrollRect, Vector2 value) Parameters Type Name Description ScrollRect scrollRect Vector2 value SetScrollRectValue(string, Vector2) Declaration public static void SetScrollRectValue(string scrollRectName, Vector2 value) Parameters Type Name Description string scrollRectName Vector2 value SetSliderValue(Slider, float) Declaration public static void SetSliderValue(Slider slider, float value) Parameters Type Name Description Slider slider float value SetSliderValue(string, float) Declaration public static void SetSliderValue(string sliderName, float value) Parameters Type Name Description string sliderName float value SetToggleValue(string, bool) Declaration public static void SetToggleValue(string toggleName, bool value) Parameters Type Name Description string toggleName bool value SetToggleValue(Toggle, bool) Declaration public static void SetToggleValue(Toggle toggle, bool value) Parameters Type Name Description Toggle toggle bool value ToggleToggle(string) Declaration public static void ToggleToggle(string toggleName) Parameters Type Name Description string toggleName ToggleToggle(Toggle) Declaration public static void ToggleToggle(Toggle toggle) Parameters Type Name Description Toggle toggle"
  },
  "api/i5.Toolkit.Core.Utilities.Async.AwaiterExtensions.html": {
    "href": "api/i5.Toolkit.Core.Utilities.Async.AwaiterExtensions.html",
    "title": "Class AwaiterExtensions | i5 Toolkit Documentation",
    "keywords": "Class AwaiterExtensions We could just add a generic GetAwaiter to YieldInstruction and CustomYieldInstruction but instead we add specific methods to each derived class to allow for return values that make the most sense for the specific instruction type. Inheritance object AwaiterExtensions Namespace: i5.Toolkit.Core.Utilities.Async Assembly: cs.temp.dll.dll Syntax public static class AwaiterExtensions Methods GetAwaiter(AssetBundleCreateRequest) Declaration public static AwaiterExtensions.SimpleCoroutineAwaiter<AssetBundle> GetAwaiter(this AssetBundleCreateRequest instruction) Parameters Type Name Description AssetBundleCreateRequest instruction Returns Type Description AwaiterExtensions.SimpleCoroutineAwaiter<AssetBundle> GetAwaiter(AssetBundleRequest) Declaration public static AwaiterExtensions.SimpleCoroutineAwaiter<Object> GetAwaiter(this AssetBundleRequest instruction) Parameters Type Name Description AssetBundleRequest instruction Returns Type Description AwaiterExtensions.SimpleCoroutineAwaiter<Object> GetAwaiter(AsyncOperation) Declaration public static AwaiterExtensions.SimpleCoroutineAwaiter<AsyncOperation> GetAwaiter(this AsyncOperation instruction) Parameters Type Name Description AsyncOperation instruction Returns Type Description AwaiterExtensions.SimpleCoroutineAwaiter<AsyncOperation> GetAwaiter(WaitForUpdate) Declaration public static AwaiterExtensions.SimpleCoroutineAwaiter GetAwaiter(this WaitForUpdate instruction) Parameters Type Name Description WaitForUpdate instruction Returns Type Description AwaiterExtensions.SimpleCoroutineAwaiter GetAwaiter(ResourceRequest) Declaration public static AwaiterExtensions.SimpleCoroutineAwaiter<Object> GetAwaiter(this ResourceRequest instruction) Parameters Type Name Description ResourceRequest instruction Returns Type Description AwaiterExtensions.SimpleCoroutineAwaiter<Object> GetAwaiter(IEnumerator) Declaration public static AwaiterExtensions.SimpleCoroutineAwaiter<object> GetAwaiter(this IEnumerator coroutine) Parameters Type Name Description System.Collections.Generic.IEnumerator coroutine Returns Type Description AwaiterExtensions.SimpleCoroutineAwaiter<object> GetAwaiter(WaitForEndOfFrame) Declaration public static AwaiterExtensions.SimpleCoroutineAwaiter GetAwaiter(this WaitForEndOfFrame instruction) Parameters Type Name Description WaitForEndOfFrame instruction Returns Type Description AwaiterExtensions.SimpleCoroutineAwaiter GetAwaiter(WaitForFixedUpdate) Declaration public static AwaiterExtensions.SimpleCoroutineAwaiter GetAwaiter(this WaitForFixedUpdate instruction) Parameters Type Name Description WaitForFixedUpdate instruction Returns Type Description AwaiterExtensions.SimpleCoroutineAwaiter GetAwaiter(WaitForSeconds) Declaration public static AwaiterExtensions.SimpleCoroutineAwaiter GetAwaiter(this WaitForSeconds instruction) Parameters Type Name Description WaitForSeconds instruction Returns Type Description AwaiterExtensions.SimpleCoroutineAwaiter GetAwaiter(WaitForSecondsRealtime) Declaration public static AwaiterExtensions.SimpleCoroutineAwaiter GetAwaiter(this WaitForSecondsRealtime instruction) Parameters Type Name Description WaitForSecondsRealtime instruction Returns Type Description AwaiterExtensions.SimpleCoroutineAwaiter GetAwaiter(WaitUntil) Declaration public static AwaiterExtensions.SimpleCoroutineAwaiter GetAwaiter(this WaitUntil instruction) Parameters Type Name Description WaitUntil instruction Returns Type Description AwaiterExtensions.SimpleCoroutineAwaiter GetAwaiter(WaitWhile) Declaration public static AwaiterExtensions.SimpleCoroutineAwaiter GetAwaiter(this WaitWhile instruction) Parameters Type Name Description WaitWhile instruction Returns Type Description AwaiterExtensions.SimpleCoroutineAwaiter GetAwaiter<T>(IEnumerator<T>) Declaration public static AwaiterExtensions.SimpleCoroutineAwaiter<T> GetAwaiter<T>(this IEnumerator<T> coroutine) Parameters Type Name Description System.Collections.Generic.IEnumerator<T><T> coroutine Returns Type Description AwaiterExtensions.SimpleCoroutineAwaiter<T> Type Parameters Name Description T"
  },
  "api/i5.Toolkit.Core.Utilities.Async.AwaiterExtensions.SimpleCoroutineAwaiter-1.html": {
    "href": "api/i5.Toolkit.Core.Utilities.Async.AwaiterExtensions.SimpleCoroutineAwaiter-1.html",
    "title": "Class AwaiterExtensions.SimpleCoroutineAwaiter<T> | i5 Toolkit Documentation",
    "keywords": "Class AwaiterExtensions.SimpleCoroutineAwaiter<T> Processes Coroutine and notifies completion with result. Inheritance object AwaiterExtensions.SimpleCoroutineAwaiter<T> Namespace: i5.Toolkit.Core.Utilities.Async Assembly: cs.temp.dll.dll Syntax public class AwaiterExtensions.SimpleCoroutineAwaiter<T> : INotifyCompletion Type Parameters Name Description T The result type. Properties IsCompleted Declaration public bool IsCompleted { get; } Property Value Type Description bool Methods Complete(T, Exception) Declaration public void Complete(T taskResult, Exception e) Parameters Type Name Description T taskResult Exception e GetResult() Declaration public T GetResult() Returns Type Description T"
  },
  "api/i5.Toolkit.Core.Utilities.Async.AwaiterExtensions.SimpleCoroutineAwaiter.html": {
    "href": "api/i5.Toolkit.Core.Utilities.Async.AwaiterExtensions.SimpleCoroutineAwaiter.html",
    "title": "Class AwaiterExtensions.SimpleCoroutineAwaiter | i5 Toolkit Documentation",
    "keywords": "Class AwaiterExtensions.SimpleCoroutineAwaiter Processes Coroutine and notifies completion. Inheritance object AwaiterExtensions.SimpleCoroutineAwaiter Namespace: i5.Toolkit.Core.Utilities.Async Assembly: cs.temp.dll.dll Syntax public class AwaiterExtensions.SimpleCoroutineAwaiter : INotifyCompletion Properties IsCompleted Declaration public bool IsCompleted { get; } Property Value Type Description bool Methods Complete(Exception) Declaration public void Complete(Exception e) Parameters Type Name Description Exception e GetResult() Declaration public void GetResult()"
  },
  "api/i5.Toolkit.Core.Utilities.Async.html": {
    "href": "api/i5.Toolkit.Core.Utilities.Async.html",
    "title": "Namespace i5.Toolkit.Core.Utilities.Async | i5 Toolkit Documentation",
    "keywords": "Namespace i5.Toolkit.Core.Utilities.Async Classes AwaiterExtensions We could just add a generic GetAwaiter to YieldInstruction and CustomYieldInstruction but instead we add specific methods to each derived class to allow for return values that make the most sense for the specific instruction type. AwaiterExtensions.SimpleCoroutineAwaiter Processes Coroutine and notifies completion. AwaiterExtensions.SimpleCoroutineAwaiter<T> Processes Coroutine and notifies completion with result. SyncContextUtility Utility class to assist in thread and context synchronization. WaitForBackgroundThread WaitForUpdate This can be used as a way to return to the main unity thread when using multiple threads with async methods."
  },
  "api/i5.Toolkit.Core.Utilities.Async.SyncContextUtility.html": {
    "href": "api/i5.Toolkit.Core.Utilities.Async.SyncContextUtility.html",
    "title": "Class SyncContextUtility | i5 Toolkit Documentation",
    "keywords": "Class SyncContextUtility Utility class to assist in thread and context synchronization. Inheritance object SyncContextUtility Namespace: i5.Toolkit.Core.Utilities.Async Assembly: cs.temp.dll.dll Syntax public static class SyncContextUtility Properties IsMainThread Is this being called from the main thread? Declaration public static bool IsMainThread { get; } Property Value Type Description bool UnitySynchronizationContext This Unity Player's Synchronization Context. Declaration public static SynchronizationContext UnitySynchronizationContext { get; } Property Value Type Description SynchronizationContext UnityThreadId This Unity Player's Thread Id. Declaration public static int UnityThreadId { get; } Property Value Type Description int"
  },
  "api/i5.Toolkit.Core.Utilities.Async.WaitForBackgroundThread.html": {
    "href": "api/i5.Toolkit.Core.Utilities.Async.WaitForBackgroundThread.html",
    "title": "Class WaitForBackgroundThread | i5 Toolkit Documentation",
    "keywords": "Class WaitForBackgroundThread Inheritance object WaitForBackgroundThread Namespace: i5.Toolkit.Core.Utilities.Async Assembly: cs.temp.dll.dll Syntax public class WaitForBackgroundThread Methods GetAwaiter() Declaration public ConfiguredTaskAwaitable.ConfiguredTaskAwaiter GetAwaiter() Returns Type Description ConfiguredTaskAwaitable.ConfiguredTaskAwaiter"
  },
  "api/i5.Toolkit.Core.Utilities.Async.WaitForUpdate.html": {
    "href": "api/i5.Toolkit.Core.Utilities.Async.WaitForUpdate.html",
    "title": "Class WaitForUpdate | i5 Toolkit Documentation",
    "keywords": "Class WaitForUpdate This can be used as a way to return to the main unity thread when using multiple threads with async methods. Inheritance object WaitForUpdate Namespace: i5.Toolkit.Core.Utilities.Async Assembly: cs.temp.dll.dll Syntax public class WaitForUpdate : CustomYieldInstruction Properties keepWaiting Declaration public override bool keepWaiting { get; } Property Value Type Description bool"
  },
  "api/i5.Toolkit.Core.Utilities.Browser.html": {
    "href": "api/i5.Toolkit.Core.Utilities.Browser.html",
    "title": "Class Browser | i5 Toolkit Documentation",
    "keywords": "Class Browser Implementation that opens the system's default browser Inheritance object Browser Implements IBrowser Namespace: i5.Toolkit.Core.Utilities Assembly: cs.temp.dll.dll Syntax public class Browser : IBrowser Methods OpenURL(string) Opens the provided URL in the system's default browser Declaration public void OpenURL(string url) Parameters Type Name Description string url The url to open Implements IBrowser"
  },
  "api/i5.Toolkit.Core.Utilities.ColorExtensions.html": {
    "href": "api/i5.Toolkit.Core.Utilities.ColorExtensions.html",
    "title": "Class ColorExtensions | i5 Toolkit Documentation",
    "keywords": "Class ColorExtensions Extension methods for the Color type Inheritance object ColorExtensions Namespace: i5.Toolkit.Core.Utilities Assembly: cs.temp.dll.dll Syntax public static class ColorExtensions Methods ToArray(Color, bool) Converts the given color to a float array Declaration public static float[] ToArray(this Color color, bool includeAlpha = true) Parameters Type Name Description Color color The color to convert bool includeAlpha If true, the alpha value is included in the array, otherwise not Returns Type Description float[] Returns a float array with three or four values containing the rgb and rgba components"
  },
  "api/i5.Toolkit.Core.Utilities.ComponentUtilities.html": {
    "href": "api/i5.Toolkit.Core.Utilities.ComponentUtilities.html",
    "title": "Class ComponentUtilities | i5 Toolkit Documentation",
    "keywords": "Class ComponentUtilities Utility functions regarding MonoBehaviour components Inheritance object ComponentUtilities Namespace: i5.Toolkit.Core.Utilities Assembly: cs.temp.dll.dll Syntax public static class ComponentUtilities Methods EnsureComponentReference<T>(GameObject, ref T, bool) Makes sure that the given component reference is set to a component if the reference is not yet set Declaration public static void EnsureComponentReference<T>(GameObject gameObject, ref T componentReference, bool addComponent) where T : Component Parameters Type Name Description GameObject gameObject The gameobject which contains the component T componentReference The reference to the component bool addComponent If true, the component will be added if it does not exist; otherwise the componentReference may still be null after this call if the component does not exist Type Parameters Name Description T The type of component to search for GetOrAddComponent<T>(GameObject) Tries to get the reference to a component and adds the component if it does not exist Declaration public static T GetOrAddComponent<T>(GameObject gameObject) where T : Component Parameters Type Name Description GameObject gameObject The gameobject on which the component should be searched or added Returns Type Description T The reference to the component which already existed or was just created Type Parameters Name Description T The type of component to search for"
  },
  "api/i5.Toolkit.Core.Utilities.ConstantMovement.html": {
    "href": "api/i5.Toolkit.Core.Utilities.ConstantMovement.html",
    "title": "Class ConstantMovement | i5 Toolkit Documentation",
    "keywords": "Class ConstantMovement Inheritance object ConstantMovement Namespace: i5.Toolkit.Core.Utilities Assembly: cs.temp.dll.dll Syntax public class ConstantMovement : MonoBehaviour Properties Velocity Declaration public Vector3 Velocity { get; set; } Property Value Type Description Vector3"
  },
  "api/i5.Toolkit.Core.Utilities.ConstantRotation.html": {
    "href": "api/i5.Toolkit.Core.Utilities.ConstantRotation.html",
    "title": "Class ConstantRotation | i5 Toolkit Documentation",
    "keywords": "Class ConstantRotation Scripts that applies a contant rotation around the Y axis to an object Inheritance object ConstantRotation Namespace: i5.Toolkit.Core.Utilities Assembly: cs.temp.dll.dll Syntax public class ConstantRotation : MonoBehaviour Fields speed The speed at which the object should rotate Declaration public float speed Field Value Type Description float"
  },
  "api/i5.Toolkit.Core.Utilities.ContentLoaders.html": {
    "href": "api/i5.Toolkit.Core.Utilities.ContentLoaders.html",
    "title": "Namespace i5.Toolkit.Core.Utilities.ContentLoaders | i5 Toolkit Documentation",
    "keywords": "Namespace i5.Toolkit.Core.Utilities.ContentLoaders Classes UnityTextureLoader Adapter class which loads textures using Unity's WebRequestsTexture UnityWebRequestLoader Content loader that uses UnityWebRequests to fech data from the Web Interfaces IContentLoader<T> /// Interface for modules which load content from the Web"
  },
  "api/i5.Toolkit.Core.Utilities.ContentLoaders.IContentLoader-1.html": {
    "href": "api/i5.Toolkit.Core.Utilities.ContentLoaders.IContentLoader-1.html",
    "title": "Interface IContentLoader<T> | i5 Toolkit Documentation",
    "keywords": "Interface IContentLoader<T> /// Interface for modules which load content from the Web Namespace: i5.Toolkit.Core.Utilities.ContentLoaders Assembly: cs.temp.dll.dll Syntax public interface IContentLoader<T> Type Parameters Name Description T The result's payload Methods LoadAsync(string) Loads a resource from the given URI Should be used asynchronously Declaration Task<WebResponse<T>> LoadAsync(string uri) Parameters Type Name Description string uri The uri where the string resource is stored Returns Type Description Task<><WebResponse<T>> The fetched resource"
  },
  "api/i5.Toolkit.Core.Utilities.ContentLoaders.UnityTextureLoader.html": {
    "href": "api/i5.Toolkit.Core.Utilities.ContentLoaders.UnityTextureLoader.html",
    "title": "Class UnityTextureLoader | i5 Toolkit Documentation",
    "keywords": "Class UnityTextureLoader Adapter class which loads textures using Unity's WebRequestsTexture Inheritance object UnityTextureLoader Implements IContentLoader<Texture2D> Namespace: i5.Toolkit.Core.Utilities.ContentLoaders Assembly: cs.temp.dll.dll Syntax public class UnityTextureLoader : IContentLoader<Texture2D> Methods LoadAsync(string) Loads the texture at the given URI using Unity's built-in methods Declaration public Task<WebResponse<Texture2D>> LoadAsync(string uri) Parameters Type Name Description string uri The uri where the texture is stored Returns Type Description Task<><WebResponse<Texture2D>> Returns a WebResponse with the results of the web request Implements IContentLoader<T>"
  },
  "api/i5.Toolkit.Core.Utilities.ContentLoaders.UnityWebRequestLoader.html": {
    "href": "api/i5.Toolkit.Core.Utilities.ContentLoaders.UnityWebRequestLoader.html",
    "title": "Class UnityWebRequestLoader | i5 Toolkit Documentation",
    "keywords": "Class UnityWebRequestLoader Content loader that uses UnityWebRequests to fech data from the Web Inheritance object UnityWebRequestLoader Implements IContentLoader<string> Namespace: i5.Toolkit.Core.Utilities.ContentLoaders Assembly: cs.temp.dll.dll Syntax public class UnityWebRequestLoader : IContentLoader<string> Methods LoadAsync(string) Loads content from the given URI Declaration public Task<WebResponse<string>> LoadAsync(string uri) Parameters Type Name Description string uri The URI from where content should be downloaded Returns Type Description Task<><WebResponse<string>> Returns the downloaded string content Implements IContentLoader<T>"
  },
  "api/i5.Toolkit.Core.Utilities.ConversionUtils.html": {
    "href": "api/i5.Toolkit.Core.Utilities.ConversionUtils.html",
    "title": "Class ConversionUtils | i5 Toolkit Documentation",
    "keywords": "Class ConversionUtils Extensions for converting data formats to each other Inheritance object ConversionUtils Namespace: i5.Toolkit.Core.Utilities Assembly: cs.temp.dll.dll Syntax public static class ConversionUtils Methods ToColor(Vector3) Converts a Vector3 to a Color Maps the x-value to the red channel, the y-value to the green channel and the z-value to the blue channel Declaration public static Color ToColor(this Vector3 vector) Parameters Type Name Description Vector3 vector The Vector3 which should be converted Returns Type Description Color Returns a color which has the same rgb values as the vector has xyz values ToColor(Vector4) Converts a Vector4 to a Color Maps the x-value to the red channel, the y-value to the green channel, the z-value to the blue channel and the w-value to the alpha channel Declaration public static Color ToColor(this Vector4 vector) Parameters Type Name Description Vector4 vector The Vector4 which should be converted Returns Type Description Color Returns a color which has the same rgba values as the vector has xyzw values ToVector3(Color) Converts a Color to a Vector3 Maps the red channel to the x value, the green channel to the y value and the blue channel to the z value Declaration public static Vector3 ToVector3(this Color color) Parameters Type Name Description Color color The color to convert Returns Type Description Vector3 Returns a Vector3 which has the same xyz values as the color has rgb values ToVector4(Color) Converts a Color to a Vector4 Maps the red channel to the x value, the green channel to the y value, the blue channel to the z value and the alpha channel to the w value Declaration public static Vector4 ToVector4(this Color color) Parameters Type Name Description Color color The color to convert Returns Type Description Vector4 Returns a Vector4 which has the same xyzw values as the color has rgba values"
  },
  "api/i5.Toolkit.Core.Utilities.Exceptions.html": {
    "href": "api/i5.Toolkit.Core.Utilities.Exceptions.html",
    "title": "Namespace i5.Toolkit.Core.Utilities.Exceptions | i5 Toolkit Documentation",
    "keywords": "Namespace i5.Toolkit.Core.Utilities.Exceptions Classes PlatformNotSupportedException"
  },
  "api/i5.Toolkit.Core.Utilities.Exceptions.PlatformNotSupportedException.html": {
    "href": "api/i5.Toolkit.Core.Utilities.Exceptions.PlatformNotSupportedException.html",
    "title": "Class PlatformNotSupportedException | i5 Toolkit Documentation",
    "keywords": "Class PlatformNotSupportedException Inheritance object PlatformNotSupportedException Namespace: i5.Toolkit.Core.Utilities.Exceptions Assembly: cs.temp.dll.dll Syntax public class PlatformNotSupportedException : Exception Constructors PlatformNotSupportedException() Declaration public PlatformNotSupportedException() PlatformNotSupportedException(string, Exception) Declaration public PlatformNotSupportedException(string message, Exception inner) Parameters Type Name Description string message Exception inner PlatformNotSupportedException(string) Declaration public PlatformNotSupportedException(string message) Parameters Type Name Description string message"
  },
  "api/i5.Toolkit.Core.Utilities.GameObjectUtils.html": {
    "href": "api/i5.Toolkit.Core.Utilities.GameObjectUtils.html",
    "title": "Class GameObjectUtils | i5 Toolkit Documentation",
    "keywords": "Class GameObjectUtils Inheritance object GameObjectUtils Namespace: i5.Toolkit.Core.Utilities Assembly: cs.temp.dll.dll Syntax public static class GameObjectUtils Methods PlaceInBox(GameObject, IBoxVolume) Declaration public static void PlaceInBox(GameObject gameObject, IBoxVolume volume) Parameters Type Name Description GameObject gameObject IBoxVolume volume"
  },
  "api/i5.Toolkit.Core.Utilities.html": {
    "href": "api/i5.Toolkit.Core.Utilities.html",
    "title": "Namespace i5.Toolkit.Core.Utilities | i5 Toolkit Documentation",
    "keywords": "Namespace i5.Toolkit.Core.Utilities Classes Browser Implementation that opens the system's default browser ColorExtensions Extension methods for the Color type ComponentUtilities Utility functions regarding MonoBehaviour components ConstantMovement ConstantRotation Scripts that applies a contant rotation around the Y axis to an object ConversionUtils Extensions for converting data formats to each other GameObjectUtils i5Debug Logger class for writing messages to the console JsonArrayUtility Helper script for serializing and de-serializing Json Arrays Unity's built in Json Serializer is not able to handle JSON data which have an unnamed array at root level JsonDictionaryUtility JsonEncodeUnityWebRequestRestConnector JsonUtilityAdapter NameValueCollectionExtensions ObjectBounds ObjectPool<T> Object pool which can store instances so that they can be reused This is useful for objects like GameObjects or Meshes where the creation and destruction drops the performance This should definitely be used for meshes since they are not automatically cleaned up by the garbage collector ParserUtils Parser utils for parsing vectors from strings PathUtils PersistenceScene PlayerPrefsUtilities Utilities for working with PlayerPrefs Contains e.g. support for more types SpecialDebugMessages UnityWebRequestRestConnector UriUtils Utility functions for operating on Uris Vector3Extensions VectorUtilities Extensions and utilities for vectors WebResponse<T> Container object which is produced by IContentLoader classes after they fetched content from the Web Interfaces IBrowser Contract which defines the capabilities of a browser IJsonSerializer Contract which defines the capabilities of a JSON serializer IRestConnector"
  },
  "api/i5.Toolkit.Core.Utilities.i5Debug.html": {
    "href": "api/i5.Toolkit.Core.Utilities.i5Debug.html",
    "title": "Class i5Debug | i5 Toolkit Documentation",
    "keywords": "Class i5Debug Logger class for writing messages to the console Inheritance object i5Debug Namespace: i5.Toolkit.Core.Utilities Assembly: cs.temp.dll.dll Syntax public static class i5Debug Methods Log(object, MonoBehaviour) Logs a formatted message to the Unity console Declaration public static void Log(object message, MonoBehaviour sender) Parameters Type Name Description object message The message to log MonoBehaviour sender The sender of the message Log(object, object) Logs a formatted message to the Unity console Declaration public static void Log(object message, object sender) Parameters Type Name Description object message The message to log object sender The sender of the message LogError(object, MonoBehaviour) Logs a formatted error message to the Unity console Declaration public static void LogError(object message, MonoBehaviour sender) Parameters Type Name Description object message The message to log MonoBehaviour sender The sender of the message LogError(object, object) Logs a formatted error message to the Unity console Declaration public static void LogError(object message, object sender) Parameters Type Name Description object message The message to log object sender The sender of the message LogWarning(object, MonoBehaviour) Logs a formatted warning message to the Unity console Declaration public static void LogWarning(object message, MonoBehaviour sender) Parameters Type Name Description object message The message to log MonoBehaviour sender The sender of the message LogWarning(object, object) Logs a formatted warning message to the Unity console Declaration public static void LogWarning(object message, object sender) Parameters Type Name Description object message The message to log object sender The sender of the message"
  },
  "api/i5.Toolkit.Core.Utilities.IBrowser.html": {
    "href": "api/i5.Toolkit.Core.Utilities.IBrowser.html",
    "title": "Interface IBrowser | i5 Toolkit Documentation",
    "keywords": "Interface IBrowser Contract which defines the capabilities of a browser Namespace: i5.Toolkit.Core.Utilities Assembly: cs.temp.dll.dll Syntax public interface IBrowser Methods OpenURL(string) Opens the given URL in a browser Declaration void OpenURL(string url) Parameters Type Name Description string url The URL to open"
  },
  "api/i5.Toolkit.Core.Utilities.IJsonSerializer.html": {
    "href": "api/i5.Toolkit.Core.Utilities.IJsonSerializer.html",
    "title": "Interface IJsonSerializer | i5 Toolkit Documentation",
    "keywords": "Interface IJsonSerializer Contract which defines the capabilities of a JSON serializer Namespace: i5.Toolkit.Core.Utilities Assembly: cs.temp.dll.dll Syntax public interface IJsonSerializer Methods FromJson<T>(string) Deserializes an object from the given JSON string Declaration T FromJson<T>(string json) Parameters Type Name Description string json The json string with the data Returns Type Description T Returns the deserialized type object Type Parameters Name Description T The type which should be deserialized ToJson(object, bool) Serializes a given object to a JSON string Declaration string ToJson(object obj, bool prettyPrint = false) Parameters Type Name Description object obj The object which should be serialized bool prettyPrint If set to true, the JSON output will be formatted to a more easily readable form Returns Type Description string Returns the serialized JSON string based on the object's values"
  },
  "api/i5.Toolkit.Core.Utilities.IRestConnector.html": {
    "href": "api/i5.Toolkit.Core.Utilities.IRestConnector.html",
    "title": "Interface IRestConnector | i5 Toolkit Documentation",
    "keywords": "Interface IRestConnector Namespace: i5.Toolkit.Core.Utilities Assembly: cs.temp.dll.dll Syntax public interface IRestConnector Methods DeleteAsync(string, Dictionary<string, string>) Declaration Task<WebResponse<string>> DeleteAsync(string uri, Dictionary<string, string> headers = null) Parameters Type Name Description string uri System.Collections.Generic.Dictionary<TKey, TValue><string, string> headers Returns Type Description Task<><WebResponse<string>> GetAsync(string, Dictionary<string, string>) Declaration Task<WebResponse<string>> GetAsync(string uri, Dictionary<string, string> headers = null) Parameters Type Name Description string uri System.Collections.Generic.Dictionary<TKey, TValue><string, string> headers Returns Type Description Task<><WebResponse<string>> PostAsync(string, byte[], Dictionary<string, string>) Declaration Task<WebResponse<string>> PostAsync(string uri, byte[] postData, Dictionary<string, string> headers = null) Parameters Type Name Description string uri byte[] postData System.Collections.Generic.Dictionary<TKey, TValue><string, string> headers Returns Type Description Task<><WebResponse<string>> PostAsync(string, string, Dictionary<string, string>) Declaration Task<WebResponse<string>> PostAsync(string uri, string postJson, Dictionary<string, string> headers = null) Parameters Type Name Description string uri string postJson System.Collections.Generic.Dictionary<TKey, TValue><string, string> headers Returns Type Description Task<><WebResponse<string>> PutAsync(string, byte[], Dictionary<string, string>) Declaration Task<WebResponse<string>> PutAsync(string uri, byte[] putData, Dictionary<string, string> headers = null) Parameters Type Name Description string uri byte[] putData System.Collections.Generic.Dictionary<TKey, TValue><string, string> headers Returns Type Description Task<><WebResponse<string>> PutAsync(string, string, Dictionary<string, string>) Declaration Task<WebResponse<string>> PutAsync(string uri, string putJson, Dictionary<string, string> headers = null) Parameters Type Name Description string uri string putJson System.Collections.Generic.Dictionary<TKey, TValue><string, string> headers Returns Type Description Task<><WebResponse<string>>"
  },
  "api/i5.Toolkit.Core.Utilities.JsonArrayUtility.html": {
    "href": "api/i5.Toolkit.Core.Utilities.JsonArrayUtility.html",
    "title": "Class JsonArrayUtility | i5 Toolkit Documentation",
    "keywords": "Class JsonArrayUtility Helper script for serializing and de-serializing Json Arrays Unity's built in Json Serializer is not able to handle JSON data which have an unnamed array at root level Inheritance object JsonArrayUtility Namespace: i5.Toolkit.Core.Utilities Assembly: cs.temp.dll.dll Syntax public static class JsonArrayUtility Methods EncapsulateInWrapper(string) Helper function to encapsulate a json string which has an unnamed json array at root level in such a way that it can be converted using FromJson() Declaration public static string EncapsulateInWrapper(string json) Parameters Type Name Description string json The original json string Returns Type Description string The encapsulated json string which is now ready for json array de-serialization FromJson<T>(string) Converts a string to an array of the provided type Declaration public static T[] FromJson<T>(string json) Parameters Type Name Description string json The json string Returns Type Description T[] Converted array of type T Type Parameters Name Description T The array type to convert to ToJson<T>(T[], bool) Converts an array of type T to a json string Declaration public static string ToJson<T>(T[] array, bool prettyPrint = false) Parameters Type Name Description T[] array Array to conver to json data bool prettyPrint If true, the output will be printed in a way that is more human-readable Returns Type Description string Json string Type Parameters Name Description T The type of the array"
  },
  "api/i5.Toolkit.Core.Utilities.JsonDictionaryUtility.html": {
    "href": "api/i5.Toolkit.Core.Utilities.JsonDictionaryUtility.html",
    "title": "Class JsonDictionaryUtility | i5 Toolkit Documentation",
    "keywords": "Class JsonDictionaryUtility Inheritance object JsonDictionaryUtility Namespace: i5.Toolkit.Core.Utilities Assembly: cs.temp.dll.dll Syntax public static class JsonDictionaryUtility Methods FromJson<K, V>(string) Deserializes a JSON string to a dictionary Declaration public static Dictionary<K, V> FromJson<K, V>(string json) Parameters Type Name Description string json The json string which should be parsed Returns Type Description System.Collections.Generic.Dictionary<TKey, TValue><K, V> Returns the deserialized dictionary Type Parameters Name Description K The type of the dictionary's keys V The type of the dictionary's values ToJson<K, V>(Dictionary<K, V>, bool) Serializes a dictionary to a JSON string Declaration public static string ToJson<K, V>(Dictionary<K, V> dict, bool prettyPrint = false) Parameters Type Name Description System.Collections.Generic.Dictionary<TKey, TValue><K, V> dict The dictionary which should be serialized bool prettyPrint If true, the JSON string will be formatted to be better human-readable Returns Type Description string Returns the serialized JSON string Type Parameters Name Description K The type of the dictionary's keys V The type of the dictionary's values"
  },
  "api/i5.Toolkit.Core.Utilities.JsonEncodeUnityWebRequestRestConnector.html": {
    "href": "api/i5.Toolkit.Core.Utilities.JsonEncodeUnityWebRequestRestConnector.html",
    "title": "Class JsonEncodeUnityWebRequestRestConnector | i5 Toolkit Documentation",
    "keywords": "Class JsonEncodeUnityWebRequestRestConnector Inheritance object UnityWebRequestRestConnector JsonEncodeUnityWebRequestRestConnector Implements IRestConnector Inherited Members UnityWebRequestRestConnector.DeleteAsync(string, Dictionary<string, string>) UnityWebRequestRestConnector.GetAsync(string, Dictionary<string, string>) UnityWebRequestRestConnector.PostAsync(string, byte[], Dictionary<string, string>) UnityWebRequestRestConnector.PutAsync(string, byte[], Dictionary<string, string>) UnityWebRequestRestConnector.PostPutDataAsync(string, string, byte[], string, Dictionary<string, string>) UnityWebRequestRestConnector.AddHeaders(UnityWebRequest, Dictionary<string, string>) Namespace: i5.Toolkit.Core.Utilities Assembly: cs.temp.dll.dll Syntax public class JsonEncodeUnityWebRequestRestConnector : UnityWebRequestRestConnector, IRestConnector Methods PostAsync(string, string, Dictionary<string, string>) Declaration public override Task<WebResponse<string>> PostAsync(string uri, string postJson, Dictionary<string, string> headers = null) Parameters Type Name Description string uri string postJson System.Collections.Generic.Dictionary<TKey, TValue><string, string> headers Returns Type Description Task<><WebResponse<string>> Overrides UnityWebRequestRestConnector.PostAsync(string, string, Dictionary<string, string>) PutAsync(string, string, Dictionary<string, string>) Declaration public override Task<WebResponse<string>> PutAsync(string uri, string postData, Dictionary<string, string> headers = null) Parameters Type Name Description string uri string postData System.Collections.Generic.Dictionary<TKey, TValue><string, string> headers Returns Type Description Task<><WebResponse<string>> Overrides UnityWebRequestRestConnector.PutAsync(string, string, Dictionary<string, string>) Implements IRestConnector"
  },
  "api/i5.Toolkit.Core.Utilities.JsonUtilityAdapter.html": {
    "href": "api/i5.Toolkit.Core.Utilities.JsonUtilityAdapter.html",
    "title": "Class JsonUtilityAdapter | i5 Toolkit Documentation",
    "keywords": "Class JsonUtilityAdapter Inheritance object JsonUtilityAdapter Implements IJsonSerializer Namespace: i5.Toolkit.Core.Utilities Assembly: cs.temp.dll.dll Syntax public class JsonUtilityAdapter : IJsonSerializer Methods FromJson<T>(string) Declaration public T FromJson<T>(string json) Parameters Type Name Description string json Returns Type Description T Type Parameters Name Description T ToJson(object, bool) Declaration public string ToJson(object obj, bool prettyPrint = false) Parameters Type Name Description object obj bool prettyPrint Returns Type Description string Implements IJsonSerializer"
  },
  "api/i5.Toolkit.Core.Utilities.NameValueCollectionExtensions.html": {
    "href": "api/i5.Toolkit.Core.Utilities.NameValueCollectionExtensions.html",
    "title": "Class NameValueCollectionExtensions | i5 Toolkit Documentation",
    "keywords": "Class NameValueCollectionExtensions Inheritance object NameValueCollectionExtensions Namespace: i5.Toolkit.Core.Utilities Assembly: cs.temp.dll.dll Syntax public static class NameValueCollectionExtensions Methods ToDictionary(NameValueCollection) Declaration public static Dictionary<string, string> ToDictionary(this NameValueCollection collection) Parameters Type Name Description NameValueCollection collection Returns Type Description System.Collections.Generic.Dictionary<TKey, TValue><string, string>"
  },
  "api/i5.Toolkit.Core.Utilities.ObjectBounds.html": {
    "href": "api/i5.Toolkit.Core.Utilities.ObjectBounds.html",
    "title": "Class ObjectBounds | i5 Toolkit Documentation",
    "keywords": "Class ObjectBounds Inheritance object ObjectBounds Namespace: i5.Toolkit.Core.Utilities Assembly: cs.temp.dll.dll Syntax public static class ObjectBounds Methods GetComposedRendererBounds(GameObject) Calculates the composed overall bounds of renderers in a parent object including all its child objects Declaration public static Bounds GetComposedRendererBounds(GameObject gameObject) Parameters Type Name Description GameObject gameObject The parent object at which the calculation should start Returns Type Description Bounds Returns the bounds of the renderers of the GameObject and its children"
  },
  "api/i5.Toolkit.Core.Utilities.ObjectPool-1.html": {
    "href": "api/i5.Toolkit.Core.Utilities.ObjectPool-1.html",
    "title": "Class ObjectPool<T> | i5 Toolkit Documentation",
    "keywords": "Class ObjectPool<T> Object pool which can store instances so that they can be reused This is useful for objects like GameObjects or Meshes where the creation and destruction drops the performance This should definitely be used for meshes since they are not automatically cleaned up by the garbage collector Inheritance object ObjectPool<T> Namespace: i5.Toolkit.Core.Utilities Assembly: cs.temp.dll.dll Syntax public static class ObjectPool<T> Type Parameters Name Description T The object type which should be stored in the pool Methods ClearPool(Action<T>) Clears the default pool by removing every instance in the queue Performs the given destroyAction on each instance to destroy it You probably want to use Destroy() inside the destroyAction Declaration public static void ClearPool(Action<T> destroyAction = null) Parameters Type Name Description Action<><T> destroyAction ClearPool(int, Action<T>) Clears the pool by removing every instance in the queue Performs the given destroyAction on each instance to destroy it You probably want to use Destroy() inside the destroyAction Declaration public static void ClearPool(int poolId, Action<T> destroyAction = null) Parameters Type Name Description int poolId The id of the pool which should be cleared Action<><T> destroyAction The action which should be performed to destroy on object CountPools() Declaration public static int CountPools() Returns Type Description int CreateNewPool() Opens a new pool and returns the id of the pool Declaration public static int CreateNewPool() Returns Type Description int The id of the created pool CreateNewPool(int) Opens a new pool and returns the id of the pool Declaration public static int CreateNewPool(int capacity) Parameters Type Name Description int capacity Define a (soft) capacity of the pool for which memory is allocated in advance Returns Type Description int The id of the created pool ReleaseResource(T) Returns the resource to the default pool so that it can be requested again This should return all control over this object back to the pool Declaration public static void ReleaseResource(T resource) Parameters Type Name Description T resource The resource which is returned to the pool ReleaseResource(int, T) Returns the resource to the pool so that it can be requested again This should return all control over this object back to the pool Declaration public static void ReleaseResource(int poolId, T resource) Parameters Type Name Description int poolId The id of the pool T resource The resource which is returned to the pool RemovePool(int, Action<T>) First cleans and then removes the pool with the given id Declaration public static void RemovePool(int poolId, Action<T> destroyAction = null) Parameters Type Name Description int poolId Action<><T> destroyAction RequestResource(Func<T>) Requests a resource from the default pool If no resource is left, the code in the creationFactory function will be executed to create a new object The creationFactory should probably use Unity's Instantiate method Declaration public static T RequestResource(Func<T> creationFactory) Parameters Type Name Description Func<><T> creationFactory Function which should create a new instance of the pooled object Returns Type Description T An instance of the object from the pool RequestResource(int, Func<T>) Requests a resource from the pool If no resource is left, the code in the creationFactory function will be executed to create a new object The creationFactory should probably use Unity's Instantiate method Declaration public static T RequestResource(int poolId, Func<T> creationFactory) Parameters Type Name Description int poolId Func<><T> creationFactory Function which should create a new instance of the pooled object Returns Type Description T An instance of the object from the pool"
  },
  "api/i5.Toolkit.Core.Utilities.ParserUtils.html": {
    "href": "api/i5.Toolkit.Core.Utilities.ParserUtils.html",
    "title": "Class ParserUtils | i5 Toolkit Documentation",
    "keywords": "Class ParserUtils Parser utils for parsing vectors from strings Inheritance object ParserUtils Namespace: i5.Toolkit.Core.Utilities Assembly: cs.temp.dll.dll Syntax public static class ParserUtils Methods TryParseSpaceSeparatedVector2(string, out Vector2) Tries to convert a space separated string to a Vector2 Declaration public static bool TryParseSpaceSeparatedVector2(string input, out Vector2 result) Parameters Type Name Description string input The string which should be converted Vector2 result The result of the conversion; if the conversion failed, it has the default value Returns Type Description bool Returns true if the conversion was successful TryParseSpaceSeparatedVector3(string, out Vector3) Tries to parse a string with three space-separated coordinates, e.g. \"1.2 -5.3 1.0\" Declaration public static bool TryParseSpaceSeparatedVector3(string input, out Vector3 result) Parameters Type Name Description string input The string which should be converted to a Vector3 Vector3 result The result of the conversion; if the conversion failed, it has the default value Returns Type Description bool Returns true if the string could be parsed, otherwise false TryParseStringArrayToVector2(string[], out Vector2) Parses an array of strings to Vector2 The array must have exactly two entries so that the conversion succeeds Declaration public static bool TryParseStringArrayToVector2(string[] strValues, out Vector2 result) Parameters Type Name Description string[] strValues The string array which should be parsed to a Vector2 Vector2 result The result of the conversion; if the conversion failed, it has the default value Returns Type Description bool Returns true if parsing was successful TryParseStringArrayToVector3(string[], out Vector3) Tries to parse a string array to a Vector3 The array must have exactly three entries so that the conversion succeeds Declaration public static bool TryParseStringArrayToVector3(string[] strValues, out Vector3 result) Parameters Type Name Description string[] strValues The string array to parse Vector3 result The result of the conversion; if the conversion failed, it has the default value Returns Type Description bool Returns true if the string array could be parsed, otherwise false TryParseStringArrayToVector4(string[], out Vector4) Tries to parse a string array to a Vector3 The array must have exactly four entries so that the conversion succeeds Declaration public static bool TryParseStringArrayToVector4(string[] strValues, out Vector4 result) Parameters Type Name Description string[] strValues The string array to parse Vector4 result The result of the conversion; if the conversion failed, it has the default value Returns Type Description bool Returns true if the string array could be parsed, otherwise false"
  },
  "api/i5.Toolkit.Core.Utilities.PathUtils.html": {
    "href": "api/i5.Toolkit.Core.Utilities.PathUtils.html",
    "title": "Class PathUtils | i5 Toolkit Documentation",
    "keywords": "Class PathUtils Inheritance object PathUtils Namespace: i5.Toolkit.Core.Utilities Assembly: cs.temp.dll.dll Syntax public static class PathUtils Methods RewriteToAbsolutePath(string, string) Combines an absolute base path with an absolute or relative path. If addedPath is absolute, it is taken as the combined result, disregarding the base path. If addedPath is relative, it is combined based on the basePath Works with local file paths and Uris Declaration public static string RewriteToAbsolutePath(string basePath, string addedPath) Parameters Type Name Description string basePath The base path where the combination of paths should start. Must be absolute. string addedPath The added path that is combined with the base path. Can be relative or absolute. Returns Type Description string The combined path where the basePath is concatenated with the relative addedPath or the absolute addedPath is returned"
  },
  "api/i5.Toolkit.Core.Utilities.PersistenceScene.html": {
    "href": "api/i5.Toolkit.Core.Utilities.PersistenceScene.html",
    "title": "Class PersistenceScene | i5 Toolkit Documentation",
    "keywords": "Class PersistenceScene Inheritance object PersistenceScene Namespace: i5.Toolkit.Core.Utilities Assembly: cs.temp.dll.dll Syntax public static class PersistenceScene Methods GetPersistentScene() Gets or creates the persistent scene if it does not exist In the editor, this will always return the active scene since you should not create new scenes in the editor Declaration public static Scene GetPersistentScene() Returns Type Description Scene Returns the persistent scene MarkPersistent(GameObject) Moves the provided GameObject to the persistent scene If this is executed in an editor build, this has no effect Declaration public static void MarkPersistent(GameObject gameObject) Parameters Type Name Description GameObject gameObject GameObject which should be made persistent UnmarkPersistent(GameObject) Makes an object not persist anymore by moving it to the active scene Declaration public static void UnmarkPersistent(GameObject gameObject) Parameters Type Name Description GameObject gameObject The GameObject which should not be persistent anymore"
  },
  "api/i5.Toolkit.Core.Utilities.PlayerPrefsUtilities.html": {
    "href": "api/i5.Toolkit.Core.Utilities.PlayerPrefsUtilities.html",
    "title": "Class PlayerPrefsUtilities | i5 Toolkit Documentation",
    "keywords": "Class PlayerPrefsUtilities Utilities for working with PlayerPrefs Contains e.g. support for more types Inheritance object PlayerPrefsUtilities Namespace: i5.Toolkit.Core.Utilities Assembly: cs.temp.dll.dll Syntax public static class PlayerPrefsUtilities Methods GetArrayLength(string) Gets the array of a stored array Declaration public static int GetArrayLength(string key) Parameters Type Name Description string key The key of the array Returns Type Description int Returns the intended length of the array. If no length was stored, it returns 0. GetColor(string, Color) Gets a color under the given key from the PlayerPrefs Declaration public static Color GetColor(string key, Color defaultValue) Parameters Type Name Description string key The key under which the color is stored Color defaultValue The default parameter which is returned in case no color is stored under this key Returns Type Description Color Returns the color if it exists, otherwise it returns the defaultValue GetColor(string) Gets a color under the given key from the PlayerPrefs Declaration public static Color GetColor(string key) Parameters Type Name Description string key The key under which the color is stored Returns Type Description Color Returns the color if it exists, otherwise it returns white GetFloatArray(string) Gets a float array from the given key in the PlayerPrefs Declaration public static float[] GetFloatArray(string key) Parameters Type Name Description string key The key of the array Returns Type Description float[] Returns the float array from the PlayerPrefs GetVector2(string, Vector2) Gets a Vector2 from the PlayerPrefs Declaration public static Vector2 GetVector2(string key, Vector2 defaultValue) Parameters Type Name Description string key The key under which to the vector is stored Vector2 defaultValue The default value which is taken if the vector does not exist in the PlayerPrefs Returns Type Description Vector2 GetVector2(string) Gets a Vector2 from the PlayerPrefs Declaration public static Vector2 GetVector2(string key) Parameters Type Name Description string key The key under which to the vector is stored Returns Type Description Vector2 GetVector3(string, Vector3) Gets a Vector3 from the PlayerPrefs Declaration public static Vector3 GetVector3(string key, Vector3 defaultValue) Parameters Type Name Description string key The key under which to the vector is stored Vector3 defaultValue The default value which is taken if the vector does not exist in the PlayerPrefs Returns Type Description Vector3 GetVector3(string) Gets a Vector3 from the PlayerPrefs Declaration public static Vector3 GetVector3(string key) Parameters Type Name Description string key The key under which to the vector is stored Returns Type Description Vector3 GetVector4(string, Vector4) Gets a Vector4 from the PlayerPrefs Declaration public static Vector4 GetVector4(string key, Vector4 defaultValue) Parameters Type Name Description string key The key under which to the vector is stored Vector4 defaultValue The default value which is taken if the vector does not exist in the PlayerPrefs Returns Type Description Vector4 GetVector4(string) Gets a Vector4 from the PlayerPrefs Declaration public static Vector4 GetVector4(string key) Parameters Type Name Description string key The key under which to the vector is stored Returns Type Description Vector4 HasColorKey(string) Checks if a color is stored under the given key Declaration public static bool HasColorKey(string key) Parameters Type Name Description string key The key under which the color is stored Returns Type Description bool Returns true if a color is stored under this key HasVectorKey(string) Checks whether a vector was stored under the given key Declaration public static bool HasVectorKey(string key) Parameters Type Name Description string key The key of the vector Returns Type Description bool Returns true if a vector with the key is stored in the PlayerPrefs, otherwise false SetColor(string, Color, bool) Stores a color in the PlayerPrefs Declaration public static void SetColor(string key, Color color, bool saveAlpha = true) Parameters Type Name Description string key The key under which the color should be stored Color color The color to store bool saveAlpha If set to false, the alpha value is not stored SetFloatArray(string, float[]) Stores a float array in the PlayerPrefs Declaration public static void SetFloatArray(string key, float[] array) Parameters Type Name Description string key The key of the array float[] array The array to store in the PlayerPrefs SetVector2(string, Vector2) Stores a Vector2 in the PlayerPrefs Declaration public static void SetVector2(string key, Vector2 vector) Parameters Type Name Description string key The key under which to store the vector Vector2 vector The value of the vector SetVector3(string, Vector3) Stores a Vector3 in the PlayerPrefs Declaration public static void SetVector3(string key, Vector3 vector) Parameters Type Name Description string key The key under which to store the vector Vector3 vector The value of the vector SetVector4(string, Vector4) Stores a Vector4 in the PlayerPrefs Declaration public static void SetVector4(string key, Vector4 vector) Parameters Type Name Description string key The key under which to store the vector Vector4 vector The value of the vector"
  },
  "api/i5.Toolkit.Core.Utilities.SpecialDebugMessages.html": {
    "href": "api/i5.Toolkit.Core.Utilities.SpecialDebugMessages.html",
    "title": "Class SpecialDebugMessages | i5 Toolkit Documentation",
    "keywords": "Class SpecialDebugMessages Inheritance object SpecialDebugMessages Namespace: i5.Toolkit.Core.Utilities Assembly: cs.temp.dll.dll Syntax public static class SpecialDebugMessages Methods LogArrayInitializedWithSize0Warning(MonoBehaviour, string) Declaration public static void LogArrayInitializedWithSize0Warning(MonoBehaviour thisComponent, string arrayName) Parameters Type Name Description MonoBehaviour thisComponent string arrayName LogArrayMissingReferenceError(MonoBehaviour, string, int) Declaration public static void LogArrayMissingReferenceError(MonoBehaviour thisComponent, string arrayName, int index) Parameters Type Name Description MonoBehaviour thisComponent string arrayName int index LogComponentNotFoundError(MonoBehaviour, string, GameObject) Declaration public static void LogComponentNotFoundError(MonoBehaviour thisComponent, string searchedComponent, GameObject target) Parameters Type Name Description MonoBehaviour thisComponent string searchedComponent GameObject target LogMissingReferenceError(MonoBehaviour, string) Declaration public static void LogMissingReferenceError(MonoBehaviour thisComponent, string referenceName) Parameters Type Name Description MonoBehaviour thisComponent string referenceName"
  },
  "api/i5.Toolkit.Core.Utilities.UnityWebRequestRestConnector.html": {
    "href": "api/i5.Toolkit.Core.Utilities.UnityWebRequestRestConnector.html",
    "title": "Class UnityWebRequestRestConnector | i5 Toolkit Documentation",
    "keywords": "Class UnityWebRequestRestConnector Inheritance object UnityWebRequestRestConnector JsonEncodeUnityWebRequestRestConnector Implements IRestConnector Namespace: i5.Toolkit.Core.Utilities Assembly: cs.temp.dll.dll Syntax public class UnityWebRequestRestConnector : IRestConnector Methods AddHeaders(UnityWebRequest, Dictionary<string, string>) Declaration protected void AddHeaders(UnityWebRequest req, Dictionary<string, string> headers) Parameters Type Name Description UnityWebRequest req System.Collections.Generic.Dictionary<TKey, TValue><string, string> headers DeleteAsync(string, Dictionary<string, string>) Declaration public virtual Task<WebResponse<string>> DeleteAsync(string uri, Dictionary<string, string> headers = null) Parameters Type Name Description string uri System.Collections.Generic.Dictionary<TKey, TValue><string, string> headers Returns Type Description Task<><WebResponse<string>> GetAsync(string, Dictionary<string, string>) Declaration public virtual Task<WebResponse<string>> GetAsync(string uri, Dictionary<string, string> headers = null) Parameters Type Name Description string uri System.Collections.Generic.Dictionary<TKey, TValue><string, string> headers Returns Type Description Task<><WebResponse<string>> PostAsync(string, byte[], Dictionary<string, string>) Declaration public virtual Task<WebResponse<string>> PostAsync(string uri, byte[] postData, Dictionary<string, string> headers = null) Parameters Type Name Description string uri byte[] postData System.Collections.Generic.Dictionary<TKey, TValue><string, string> headers Returns Type Description Task<><WebResponse<string>> PostAsync(string, string, Dictionary<string, string>) Declaration public virtual Task<WebResponse<string>> PostAsync(string uri, string putJson, Dictionary<string, string> headers = null) Parameters Type Name Description string uri string putJson System.Collections.Generic.Dictionary<TKey, TValue><string, string> headers Returns Type Description Task<><WebResponse<string>> PostPutDataAsync(string, string, byte[], string, Dictionary<string, string>) Declaration protected Task<WebResponse<string>> PostPutDataAsync(string uri, string method, byte[] data, string contentType, Dictionary<string, string> headers = null) Parameters Type Name Description string uri string method byte[] data string contentType System.Collections.Generic.Dictionary<TKey, TValue><string, string> headers Returns Type Description Task<><WebResponse<string>> PutAsync(string, byte[], Dictionary<string, string>) Declaration public virtual Task<WebResponse<string>> PutAsync(string uri, byte[] putData, Dictionary<string, string> headers = null) Parameters Type Name Description string uri byte[] putData System.Collections.Generic.Dictionary<TKey, TValue><string, string> headers Returns Type Description Task<><WebResponse<string>> PutAsync(string, string, Dictionary<string, string>) Declaration public virtual Task<WebResponse<string>> PutAsync(string uri, string putJson, Dictionary<string, string> headers = null) Parameters Type Name Description string uri string putJson System.Collections.Generic.Dictionary<TKey, TValue><string, string> headers Returns Type Description Task<><WebResponse<string>> Implements IRestConnector"
  },
  "api/i5.Toolkit.Core.Utilities.UriUtils.html": {
    "href": "api/i5.Toolkit.Core.Utilities.UriUtils.html",
    "title": "Class UriUtils | i5 Toolkit Documentation",
    "keywords": "Class UriUtils Utility functions for operating on Uris Inheritance object UriUtils Namespace: i5.Toolkit.Core.Utilities Assembly: cs.temp.dll.dll Syntax public class UriUtils Methods DictionaryToParameterString<T>(Dictionary<string, T>) Declaration public static string DictionaryToParameterString<T>(Dictionary<string, T> dictionary) Parameters Type Name Description System.Collections.Generic.Dictionary<TKey, TValue><string, T> dictionary Returns Type Description string Type Parameters Name Description T GetUriFragments(Uri) Declaration public static Dictionary<string, string> GetUriFragments(Uri uri) Parameters Type Name Description Uri uri Returns Type Description System.Collections.Generic.Dictionary<TKey, TValue><string, string> GetUriParameters(Uri) Extracts the parameters of a given uri and returns them Declaration public static Dictionary<string, string> GetUriParameters(Uri uri) Parameters Type Name Description Uri uri The uri which contains the parameters Returns Type Description System.Collections.Generic.Dictionary<TKey, TValue><string, string> Returns the parameters of the uri RewriteFileUriPath(Uri, string) Rewrites a given URI that points to a file so that it points to the location specified by the relative file path The relative file path starts at the uri's destination Declaration public static string RewriteFileUriPath(Uri uri, string relativeFilePath) Parameters Type Name Description Uri uri The uri which should be rewritten string relativeFilePath A relative file path starting at uri's location Returns Type Description string Returns an absolute Uri which points to the location of the relative file path WordArrayToSpaceEscapedString(string[]) Declaration public static string WordArrayToSpaceEscapedString(string[] array) Parameters Type Name Description string[] array Returns Type Description string"
  },
  "api/i5.Toolkit.Core.Utilities.Vector3Extensions.html": {
    "href": "api/i5.Toolkit.Core.Utilities.Vector3Extensions.html",
    "title": "Class Vector3Extensions | i5 Toolkit Documentation",
    "keywords": "Class Vector3Extensions Inheritance object Vector3Extensions Namespace: i5.Toolkit.Core.Utilities Assembly: cs.temp.dll.dll Syntax public static class Vector3Extensions Methods DivideComponentWiseBy(Vector3, Vector3) Divides the values of the vector component-wise by the given divisor Declaration public static Vector3 DivideComponentWiseBy(this Vector3 divident, Vector3 divisor) Parameters Type Name Description Vector3 divident The divident of the division Vector3 divisor The divisor of the division Returns Type Description Vector3 Returns the component-wise division of the two vectors, so (v.x / divisor.x, v.y / divisor.y, v.z / divisor.z) MaximumComponent(Vector3) Gets the largest component in the vector Declaration public static float MaximumComponent(this Vector3 vector) Parameters Type Name Description Vector3 vector The vector to inspect Returns Type Description float Returns the maximum component of the vector MinimumComponent(Vector3) Gets teh smallest component in the vector Declaration public static float MinimumComponent(this Vector3 vector) Parameters Type Name Description Vector3 vector The vector to inspect Returns Type Description float Returns the minimum component of the vector MultiplyComponentWise(Vector3, Vector3) Multiplies the values of the vector component-wise Declaration public static Vector3 MultiplyComponentWise(this Vector3 vector, Vector3 other) Parameters Type Name Description Vector3 vector The first vector of the multiplication Vector3 other The second vector of the multiplication Returns Type Description Vector3 Returns the component-wise product of the two vectors, so (v1.x * v2.x, v1.y * v2.y, v1.z * v2.z)"
  },
  "api/i5.Toolkit.Core.Utilities.VectorUtilities.html": {
    "href": "api/i5.Toolkit.Core.Utilities.VectorUtilities.html",
    "title": "Class VectorUtilities | i5 Toolkit Documentation",
    "keywords": "Class VectorUtilities Extensions and utilities for vectors Inheritance object VectorUtilities Namespace: i5.Toolkit.Core.Utilities Assembly: cs.temp.dll.dll Syntax public static class VectorUtilities Methods ToArray(Vector2) Converts the given vector to a float array Declaration public static float[] ToArray(this Vector2 vector) Parameters Type Name Description Vector2 vector The vector to convert Returns Type Description float[] Returns a float array with the vector's components ToArray(Vector3) Converts the given vector to a float array Declaration public static float[] ToArray(this Vector3 vector) Parameters Type Name Description Vector3 vector The vector to convert Returns Type Description float[] Returns a float array with the vector's components ToArray(Vector4) Converts the given vector to a float array Declaration public static float[] ToArray(this Vector4 vector) Parameters Type Name Description Vector4 vector The vector to convert Returns Type Description float[] Returns a float array with the vector's components Vector2FromArray(float[]) Converts a float array to a Vector2 Declaration public static Vector2 Vector2FromArray(float[] array) Parameters Type Name Description float[] array The array to convert Returns Type Description Vector2 Returns a Vector2 where the components are the first three entries of the array Vector3FromArray(float[]) Converts a float array to a Vector3 Declaration public static Vector3 Vector3FromArray(float[] array) Parameters Type Name Description float[] array The array to convert Returns Type Description Vector3 Returns a Vector3 where the components are the first three entries of the array Vector4FromArray(float[]) Converts a float array to a Vector4 Declaration public static Vector4 Vector4FromArray(float[] array) Parameters Type Name Description float[] array The array to convert Returns Type Description Vector4 Returns a Vector4 where the components are the first four entries of the array"
  },
  "api/i5.Toolkit.Core.Utilities.WebResponse-1.html": {
    "href": "api/i5.Toolkit.Core.Utilities.WebResponse-1.html",
    "title": "Class WebResponse<T> | i5 Toolkit Documentation",
    "keywords": "Class WebResponse<T> Container object which is produced by IContentLoader classes after they fetched content from the Web Inheritance object WebResponse<T> Namespace: i5.Toolkit.Core.Utilities Assembly: cs.temp.dll.dll Syntax public class WebResponse<T> Type Parameters Name Description T The return type of the WebResponse Constructors WebResponse(T, byte[], long) Creates a successul WebResponse with the given content and code Declaration public WebResponse(T content, byte[] byteData, long code) Parameters Type Name Description T content The content of the Web request's response byte[] byteData The byte data of the response body long code The response code WebResponse(bool, T, byte[], long, string) Creates a new WebResponse object Declaration public WebResponse(bool successful, T content, byte[] byteData, long code, string errorMessage) Parameters Type Name Description bool successful States whether the request was successful T content Contains the content of the response byte[] byteData Contains the byte data of the response body long code The response code string errorMessage Any error messages that might have occurred WebResponse(string, long) Creates a failed WebResponse with the specified error message and code Declaration public WebResponse(string errorMessage, long code) Parameters Type Name Description string errorMessage The error message long code The response code Properties ByteData Byte data of the Web requests response body Declaration public byte[] ByteData { get; } Property Value Type Description byte[] Code The response code of the Web request Declaration public long Code { get; } Property Value Type Description long Content Contains the content of the Web request Set to default value if the Web request failed Declaration public T Content { get; } Property Value Type Description T ErrorMessage An error message if any occurred Declaration public string ErrorMessage { get; } Property Value Type Description string Successful Set to true if the Web request was successful Declaration public bool Successful { get; } Property Value Type Description bool"
  },
  "api/i5.Toolkit.Core.VerboseLogging.AppLog.html": {
    "href": "api/i5.Toolkit.Core.VerboseLogging.AppLog.html",
    "title": "Class AppLog | i5 Toolkit Documentation",
    "keywords": "Class AppLog Logging class which applies a verbosity filter to all logs which are produced with it Inheritance object AppLog Namespace: i5.Toolkit.Core.VerboseLogging Assembly: cs.temp.dll.dll Syntax public static class AppLog Properties CriticalColor The color which should be applied to critical log messags if UseColors is true Declaration public static Color CriticalColor { get; set; } Property Value Type Description Color DebugColor The color which should be applied to debug log messags if UseColors is true Declaration public static Color DebugColor { get; set; } Property Value Type Description Color ErrorColor The color which should be applied to error log messags if UseColors is true Declaration public static Color ErrorColor { get; set; } Property Value Type Description Color InfoColor The color which should be applied to info log messags if UseColors is true Declaration public static Color InfoColor { get; set; } Property Value Type Description Color MinimumLogLevel The minimum importance level of logs which will be ouput. All logs with a lower importance level are ignored. Declaration public static LogLevel MinimumLogLevel { get; set; } Property Value Type Description LogLevel TraceColor The color which should be applied to trace log messags if UseColors is true Declaration public static Color TraceColor { get; set; } Property Value Type Description Color UseColors If true, the module will style messages in the editor with colors Declaration public static bool UseColors { get; set; } Property Value Type Description bool WarningColor The color which should be applied to warning log messags if UseColors is true Declaration public static Color WarningColor { get; set; } Property Value Type Description Color Methods Log(string, LogLevel, Object) Logs a message with a given level Declaration public static void Log(string message, LogLevel level, Object context = null) Parameters Type Name Description string message The message to log LogLevel level The importance level of the message Object context The Unity Object context which sends the message Log(string, LogLevel, object) Logs a message with a given level Declaration public static void Log(string message, LogLevel level, object context) Parameters Type Name Description string message The message to log LogLevel level The importance level of the message object context The object context which sends the message LogCritical(string, Object) Logs a critical error message Declaration public static void LogCritical(string message, Object context = null) Parameters Type Name Description string message The message to log Object context The context of the message LogCritical(string, object) Logs a critical error message Declaration public static void LogCritical(string message, object context) Parameters Type Name Description string message The message to log object context The context of the message LogDebug(string, Object) Logs a message for debugging the code Declaration public static void LogDebug(string message, Object context = null) Parameters Type Name Description string message The message to log Object context The context of the message LogDebug(string, object) Logs a message for debugging the code Declaration public static void LogDebug(string message, object context) Parameters Type Name Description string message The message to log object context The context of the message LogError(string, Object) Logs an error message Declaration public static void LogError(string message, Object context = null) Parameters Type Name Description string message The message to log Object context The context of the message LogError(string, object) Logs an error message Declaration public static void LogError(string message, object context) Parameters Type Name Description string message The message to log object context The context of the message LogException(Exception, bool, Object) Logs an exception either as an error message or a critical error message Declaration public static void LogException(Exception e, bool isCritical = false, Object context = null) Parameters Type Name Description System.Exception e The exception which should be logged bool isCritical If set to true, the message will be logged as a critical error Object context The context of the message LogException(Exception, bool, object) Logs an exception either as an error message or a critical error message Declaration public static void LogException(Exception e, bool isCritical, object context) Parameters Type Name Description System.Exception e The exception which should be logged bool isCritical If set to true, the message will be logged as a critical error object context The context of the message LogInfo(string, Object) Logs an info message Declaration public static void LogInfo(string message, Object context = null) Parameters Type Name Description string message The message to log Object context The context of the message LogInfo(string, object) Logs an info message Declaration public static void LogInfo(string message, object context) Parameters Type Name Description string message The message to log object context The context of the message LogTrace(string, Object) Logs a message which can be used to trace the code execution path Declaration public static void LogTrace(string message, Object context = null) Parameters Type Name Description string message The message to log Object context The context of the message LogTrace(string, object) Logs a message which can be used to trace the code execution path Declaration public static void LogTrace(string message, object context) Parameters Type Name Description string message The message to log object context The context of the message LogWarning(string, Object) Logs a warning message Declaration public static void LogWarning(string message, Object context = null) Parameters Type Name Description string message The message to log Object context The context of the message LogWarning(string, object) Logs a warning message Declaration public static void LogWarning(string message, object context) Parameters Type Name Description string message The message to log object context The context of the message"
  },
  "api/i5.Toolkit.Core.VerboseLogging.html": {
    "href": "api/i5.Toolkit.Core.VerboseLogging.html",
    "title": "Namespace i5.Toolkit.Core.VerboseLogging | i5 Toolkit Documentation",
    "keywords": "Namespace i5.Toolkit.Core.VerboseLogging Classes AppLog Logging class which applies a verbosity filter to all logs which are produced with it"
  },
  "api/i5.Toolkit.Core.VersionTool.GitEditorMenu.html": {
    "href": "api/i5.Toolkit.Core.VersionTool.GitEditorMenu.html",
    "title": "Class GitEditorMenu | i5 Toolkit Documentation",
    "keywords": "Class GitEditorMenu Creates a menu entry in the top menu of Unity Inheritance object GitEditorMenu Namespace: i5.Toolkit.Core.VersionTool Assembly: cs.temp.dll.dll Syntax public static class GitEditorMenu Methods TestBranch() Gets the name of the currently checked out git branch Declaration public static void TestBranch() TestTotalCommits() Gets the total number of commits on the branch Declaration public static void TestTotalCommits() TestVersion() Outputs the version based on the Git tag information Declaration public static void TestVersion()"
  },
  "api/i5.Toolkit.Core.VersionTool.GitRunner.html": {
    "href": "api/i5.Toolkit.Core.VersionTool.GitRunner.html",
    "title": "Class GitRunner | i5 Toolkit Documentation",
    "keywords": "Class GitRunner Bridge to the git command line interface Inheritance object GitRunner Implements IGitRunner Namespace: i5.Toolkit.Core.VersionTool Assembly: cs.temp.dll.dll Syntax public class GitRunner : IGitRunner Methods RunCommand(string, out string, out string) Runs git with the specified arguments Declaration public int RunCommand(string arguments, out string output, out string errors) Parameters Type Name Description string arguments The argument string which is passed to git string output The standard output of the command string errors The error output of the command Returns Type Description int The exit code of the command Implements IGitRunner"
  },
  "api/i5.Toolkit.Core.VersionTool.GitVersionBuildStep.html": {
    "href": "api/i5.Toolkit.Core.VersionTool.GitVersionBuildStep.html",
    "title": "Class GitVersionBuildStep | i5 Toolkit Documentation",
    "keywords": "Class GitVersionBuildStep Logic for the build step that applies the git version Inheritance object GitVersionBuildStep Namespace: i5.Toolkit.Core.VersionTool Assembly: cs.temp.dll.dll Syntax public class GitVersionBuildStep Constructors GitVersionBuildStep() Creates a new instance of the build logic step Declaration public GitVersionBuildStep() Fields toolName Declaration public const string toolName = \"Version Tool\" Field Value Type Description string Properties AndroidVersion Calculates the version for Android installation packages This value is based on the number of commits in git on this branch Declaration public int AndroidVersion { get; } Property Value Type Description int Returns an integer number that is increased with each git commit WSAVersion Calculates the version which can be applied to WSA packages e.g. for UWP builds The version is extracted from the version string Declaration public Version WSAVersion { get; } Property Value Type Description Version Returns the version for the WSA packages Methods ContainsPlaceholder(string) Declaration public bool ContainsPlaceholder(string versionString) Parameters Type Name Description string versionString Returns Type Description bool ReplacePlaceholders(string) Replaces all registered placeholders in the given version string Declaration public string ReplacePlaceholders(string versionString) Parameters Type Name Description string versionString The version string that contains placeholders Returns Type Description string The version string where placeholders are replaced by the calculated values"
  },
  "api/i5.Toolkit.Core.VersionTool.GitVersionCalculator.html": {
    "href": "api/i5.Toolkit.Core.VersionTool.GitVersionCalculator.html",
    "title": "Class GitVersionCalculator | i5 Toolkit Documentation",
    "keywords": "Class GitVersionCalculator Uses Git to calculate the version of the application Inheritance object GitVersionCalculator Implements IGitVersionCalculator Namespace: i5.Toolkit.Core.VersionTool Assembly: cs.temp.dll.dll Syntax public class GitVersionCalculator : IGitVersionCalculator Constructors GitVersionCalculator() Creates a new instance of the version calculator Declaration public GitVersionCalculator() Methods TryGetBranch(out string) Tries to get the name of the currently checked out branch in git Declaration public bool TryGetBranch(out string branchName) Parameters Type Name Description string branchName If the branch name could be fetched, it is passed to this out parameter Returns Type Description bool Returns true if the branch name could be fetched, otherwise false TryGetTotalCommitsOnBranch(out int) Tries to count the number of commits on the currently checked out branch Declaration public bool TryGetTotalCommitsOnBranch(out int commitCount) Parameters Type Name Description int commitCount If the number of commits could be fetched, it is passed to this out parameter Returns Type Description bool Returns true if the number of commits could be calculated, false otherwise TryGetVersion(out string) Tries to get the version string based on git tags Assign a tag of the form \"v1.2\" in git The method will output a version of the form \"1.2.n\" where n is the number of commits since this tag Declaration public bool TryGetVersion(out string version) Parameters Type Name Description string version If a version could be retrieved, it will be passed to this out parameter Returns Type Description bool Returns true if the version could be read, otherwise false (e.g. when no tag exists or if git is not installed) Implements IGitVersionCalculator"
  },
  "api/i5.Toolkit.Core.VersionTool.html": {
    "href": "api/i5.Toolkit.Core.VersionTool.html",
    "title": "Namespace i5.Toolkit.Core.VersionTool | i5 Toolkit Documentation",
    "keywords": "Namespace i5.Toolkit.Core.VersionTool Classes GitEditorMenu Creates a menu entry in the top menu of Unity GitRunner Bridge to the git command line interface GitVersionBuildStep Logic for the build step that applies the git version GitVersionCalculator Uses Git to calculate the version of the application PostBuildVersionCleanup Clean up step that is executed after the build Resets version values which have been altered by the version tool This happens so that version control does not detect changes after the build PreBuildVersioning Pre-Build step which replaces placeholders VersionCache Cache for the version settings so that they can be restored after the build VersionUtilities Common functions working with versions Interfaces IGitRunner Bridge to git's command line interface IGitVersionCalculator Version calculator based on Git"
  },
  "api/i5.Toolkit.Core.VersionTool.IGitRunner.html": {
    "href": "api/i5.Toolkit.Core.VersionTool.IGitRunner.html",
    "title": "Interface IGitRunner | i5 Toolkit Documentation",
    "keywords": "Interface IGitRunner Bridge to git's command line interface Namespace: i5.Toolkit.Core.VersionTool Assembly: cs.temp.dll.dll Syntax public interface IGitRunner Methods RunCommand(string, out string, out string) Runs git with the given commands Declaration int RunCommand(string arguments, out string output, out string errors) Parameters Type Name Description string arguments The arguments which should be passed to git string output The output which is produced by git string errors The errors which are produced by git Returns Type Description int Returns the exit code of the command"
  },
  "api/i5.Toolkit.Core.VersionTool.IGitVersionCalculator.html": {
    "href": "api/i5.Toolkit.Core.VersionTool.IGitVersionCalculator.html",
    "title": "Interface IGitVersionCalculator | i5 Toolkit Documentation",
    "keywords": "Interface IGitVersionCalculator Version calculator based on Git Namespace: i5.Toolkit.Core.VersionTool Assembly: cs.temp.dll.dll Syntax public interface IGitVersionCalculator Methods TryGetBranch(out string) Tries to get the name of the currently checked out git branch Declaration bool TryGetBranch(out string branchName) Parameters Type Name Description string branchName If the branch name could be fetched, it is passed to this out parameter Returns Type Description bool Returns true if the branch name could be fetched, otherwise false TryGetTotalCommitsOnBranch(out int) Tries to count the number of commits on the currently checked out branch Declaration bool TryGetTotalCommitsOnBranch(out int commitCount) Parameters Type Name Description int commitCount If the number of commits could be calculated, it is passed to this out parameter Returns Type Description bool Returns true if the number of commits could be calculated, otherwise false TryGetVersion(out string) Tries to calculate a version string based on git's tag information Declaration bool TryGetVersion(out string version) Parameters Type Name Description string version If the version could be calculated, it is passed to this out parameter Returns Type Description bool Returns true if the version could be calulcated, otherwise false"
  },
  "api/i5.Toolkit.Core.VersionTool.PostBuildVersionCleanup.html": {
    "href": "api/i5.Toolkit.Core.VersionTool.PostBuildVersionCleanup.html",
    "title": "Class PostBuildVersionCleanup | i5 Toolkit Documentation",
    "keywords": "Class PostBuildVersionCleanup Clean up step that is executed after the build Resets version values which have been altered by the version tool This happens so that version control does not detect changes after the build Inheritance object PostBuildVersionCleanup Namespace: i5.Toolkit.Core.VersionTool Assembly: cs.temp.dll.dll Syntax public class PostBuildVersionCleanup : IPostprocessBuildWithReport Properties callbackOrder The position in the execution order in which this script is executed after the build Declaration public int callbackOrder { get; } Property Value Type Description int Methods OnPostprocessBuild(BuildReport) Called once the build has finished Restores version project settings that have been altered by the version tool Declaration public void OnPostprocessBuild(BuildReport report) Parameters Type Name Description BuildReport report A report about the build"
  },
  "api/i5.Toolkit.Core.VersionTool.PreBuildVersioning.html": {
    "href": "api/i5.Toolkit.Core.VersionTool.PreBuildVersioning.html",
    "title": "Class PreBuildVersioning | i5 Toolkit Documentation",
    "keywords": "Class PreBuildVersioning Pre-Build step which replaces placeholders Inheritance object PreBuildVersioning Namespace: i5.Toolkit.Core.VersionTool Assembly: cs.temp.dll.dll Syntax public class PreBuildVersioning : IPreprocessBuildWithReport Properties callbackOrder The order in which the step is integrated into the build process Declaration public int callbackOrder { get; } Property Value Type Description int Methods OnPreprocessBuild(BuildReport) Called when the build is preprocessed Declaration public void OnPreprocessBuild(BuildReport report) Parameters Type Name Description BuildReport report The build report"
  },
  "api/i5.Toolkit.Core.VersionTool.VersionCache.html": {
    "href": "api/i5.Toolkit.Core.VersionTool.VersionCache.html",
    "title": "Class VersionCache | i5 Toolkit Documentation",
    "keywords": "Class VersionCache Cache for the version settings so that they can be restored after the build Inheritance object VersionCache Namespace: i5.Toolkit.Core.VersionTool Assembly: cs.temp.dll.dll Syntax public class VersionCache Fields androidVersion Android version number Declaration public int androidVersion Field Value Type Description int appVersion Version string which is used on many platforms, e.g. Standalone Declaration public string appVersion Field Value Type Description string wsaVersion Version for WSA apps Declaration public Version wsaVersion Field Value Type Description Version Methods Load() Loads the cache if it exists If no cache file exists, default values are loaded Declaration public static VersionCache Load() Returns Type Description VersionCache Returns the loaded version cache object Remove() Clears the cache by deleting the temporary file Declaration public static void Remove() Save() Saves the cache as a temporary file in the project's Temp folder Declaration public void Save()"
  },
  "api/i5.Toolkit.Core.VersionTool.VersionUtilities.html": {
    "href": "api/i5.Toolkit.Core.VersionTool.VersionUtilities.html",
    "title": "Class VersionUtilities | i5 Toolkit Documentation",
    "keywords": "Class VersionUtilities Common functions working with versions Inheritance object VersionUtilities Namespace: i5.Toolkit.Core.VersionTool Assembly: cs.temp.dll.dll Syntax public static class VersionUtilities Methods StringToVersion(string) Converts a version string of the form 1.2.3 to a version object of the form 1.2.3.0 If the version string is shorter, unset version numbers are set to 0 Declaration public static Version StringToVersion(string versionString) Parameters Type Name Description string versionString The version as a string Returns Type Description Version Returns the parsed version or 0.0.1.0 if the string could not be parsed"
  },
  "index.html": {
    "href": "index.html",
    "title": "i5 Toolkit for Unity | i5 Toolkit Documentation",
    "keywords": "i5 Toolkit for Unity This toolkit contains a collection of features which can be reused in Unity projects. It is a foundation for new projects, kickstarting the development with already completed tools. Modules The i5 Toolkit provides a series of modules and features that can be used in projects. App Console Deep Link Experience API File Cache Modified 3D Models Object Pool Obj Importer OpenID Connect Client Procedural Geometry Rocket.Chat Client Scene Documentation Service Core Spawner Verbose Logging Version Tool Setup Minimum Unity version: 2019.4. There are different ways to add the package to a project. You can follow the step-by-step instructions below or watch the video tutorial with installation instructions. Alternative 1: Unity Dependency File with OpenUPM (Recommended) The toolkit can be loaded using Unity's package manager. To do this, add an entry to the dependency file: Open your project's root folder in a file explorer. Navigate to the Packages folder and open the file manifest.json. It contains a list of package dependencies which are loaded into the project. Add a scoped registry definition which tells Unity to look at the given URL for the package. { \"name\": \"com.i5.toolkit.core\", \"url\": \"https://package.openupm.com\", \"scopes\": [ \"com.i5.toolkit.core\" ] } To add a specific version of the tool to the dependencies, add the following line inside of the \"dependencies\" object and replace [version] by the release number, e.g. \"1.9.5\". \"com.i5.toolkit.core\": \"[version]\", After that, Unity will automatically download and import the package. So, after completing these steps you should have a manifest.json file which looks like this: { \"scopedRegistries\": [ { \"name\": \"com.i5.toolkit.core\", \"url\": \"https://package.openupm.com\", \"scopes\": [ \"com.i5.toolkit.core\" ] }, ... some more scoped registries ], \"dependencies\": { \"com.i5.toolkit.core\": \"1.9.5\", ... some more packages } } Alternative 2: Unity Dependency File with Git (Recommended) The toolkit is available as a package for the Unity Package Manager. It can be included in new projects by referencing the git-repository on GitHub in the dependency file of the Unity project: Open your project's root folder in a file explorer. Navigate to the Packages folder and open the file manifest.json. It contains a list of package dependencies which are loaded into the project. To add a specific version of the tool to the dependencies, add the following line inside of the \"dependencies\" object and replace [version] with \"v\", followed by the release number, e.g. \"v1.9.5\". To receive the latest version, replace [version] with upm. \"com.i5.toolkit.core\": \"https://github.com/rwth-acis/i5-Toolkit-for-Unity.git#[version]\", After that, Unity will automatically download and import the package. If you specify \"upm\" to get the latest version, be aware that the package is not automatically updated. This command just pulls the latest version which is available at that time. To update to the newest current version, remove the package again and re-download it. Alternative 3: Unity Package Manager UI with Git The package can be downloaded from a git-repository in the package manager's UI. In Unity, go to Window > Package Manger. Click on the plus-button in the top left corner of the package manager and select \"add\". Enter https://github.com/rwth-acis/i5-Toolkit-for-Unity.git#[version] into the text field where [version] is replaced with \"v\", followed by the release number, e.g. \"v1.9.5\" or upm for the latest version. Confirm the download by clicking on the \"add\" button. If you specify \"upm\" to get the latest version, be aware that the package is not automatically updated. This command just pulls the latest version which is available at that time. To update to the newest current version, remove the package again and re-download it. Alternative 4: Import using the OpenUPM command line interface Documentation about the OpenUPM CLI can be found here. Intall the command line interface. Navigate to your Unity project's folder. This is the folder which also contains folders such as Assets or Packages. Enter the command openupm add com.i5.toolkit.core. Alternative 5: Import custom package Another option is to import the package as a .unitypackage. Download the .unitypackage-file which is supplied with the corresponding release on the releases page. With your project opened, perform a right-click on the assets browser in Unity. Select \"Import Package > Custom Packge\" from the context menu. Navigate to the path where you downloaded the .unitypackage-file, select it and confirm by clicking the \"Open\" buttom A dialog window opens where you can select which files should be imported. Select everything and click on \"Import\". Important for this alternative: If you are updating from an earlier version, it is recommended to delete the existing \"i5 Toolkit\" folder. After that, import the new package. Example Scenes The different modules and features are presented in example scenes which can be found in the GitHub repository. You can use the example scenes as an interactive documentation, an experimentation playground and to test the features. Unit Tests The project is tested using Unit tests. Continuous integration using GitHub Actions has been set up to test and deploy new versions of the package. Related Projects For Mixed Reality development, also check out the i5 Toolkit for MR. It is an extension package that builds upon the functionality of this package and is optimized for Mixed Reality. If you are working with non-player characters (NPCs), virtual agents or mixed reality agents, take a look at the Virtual Agents Framework. It provides a foundation for building virtual humans and modeling their behavior in a configurable way. Disclaimer This repository is not sponsored by or affiliated with Unity Technologies or its affiliates. \"Unity\" is a trademark or registered trademark of Unity Technologies or its affiliates in the U.S. and elsewhere."
  },
  "manual/App-Console.html": {
    "href": "manual/App-Console.html",
    "title": "App Console | i5 Toolkit Documentation",
    "keywords": "App Console Use Case When deploying compiled applications to devices, the application may behave slightly different to the editor simulation. For instance, erros could happen where a resource is not available on the device but is automatically available in the editor. In such cases, it is difficult to debug the problem since the application has e.g. with UWP apps been converted to C++ sources using IL2CPP. Since exceptions in Unity scripts stop the script silently, problems may not even come to attention immeditaly. Therefore, the app console of the i5 Toolkit provides a way to monitor the log outputs and error logs of scripts in the deployed application. Usage Under \"i5 Toolkit for Unity/Runtime/App Console/Prefabs\", there are pre-made consoles available. Drag-and-drop a prefab into the scene and it will automatically work. A console prefab has a console UI component (there are different variants of this component for different displays like TextMesh vs. TextMeshPro). On this console UI, a checkbox Capture In Background is available. If it is checked (default state), the console will still register logs even if it is deactivated. In its unchecked state, it will unsubscribe from the application's log feed if it is deactivated. Notes The app console is meant as a development tool for debugging purposes. It should only be used in development editions of applications and should not be included in the final application for production. The console has a noticable performance impact each time a log message is received. Therefore, reduce the log output to the necessary parts that need to be visible and avoid many logs in Update calls. Creating Own Console Prefabs To create own console prefabs, first construct the GameObjects. The main thing which is required is a text display of some sort, e.g. a TextMesh or a TextMeshPro. After that, create a UI component for the console. The UI component must inherit from ConsoleUIBehaviour. This base class provides a member consoleUI. Override the Awake() method and initialize the text console UI member. Example from the TextMeshProUGUIConsoleUI: [Tooltip(\"The text display which should show the messages\")] [SerializeField] private TextMeshProUGUI consoleTextDisplay; [Tooltip(\"The formatter configuration which defines how messages are formatted\")] [SerializeField] protected LogFormatterConfiguration logFormatterConfiguration; // initializes the text console UI protected override void Awake() { ITextDisplay textMeshProUGUIAdapter = new TextMeshProUGUITextAdapter(consoleTextDisplay); consoleUI = new TextConsoleUI(textMeshProUGUIAdapter, logFormatterConfiguration); base.Awake(); } To initialize the console UI member, you need to provide a text display. This is an adapter object that implements the <xref:i5.Toolkit.Core.Utilities.UnityAdapters.ITextDisplay> interface. The toolkit already provides adapter objects for the following text display components which can be used: TextMesh: <xref:i5.Toolkit.Core.Utilities.UnityAdapters.TextMeshTextAdapter> TextMeshPro: <xref:i5.Toolkit.Core.Utilities.UnityAdapters.TextMeshProTextAdapter> TextMeshProUGUI: <xref:i5.Toolkit.Core.Utilities.UnityAdapters.TextMeshProUGUITextAdapter> For other kinds of text displays, implement an own <xref:i5.Toolkit.Core.Utilities.UnityAdapters.ITextDisplay> adapter. The consoleUI can also be initialized with a log formatter configuration object. You can add additional functionality to the console UI, e.g. logic to show and hide the console or to add scrolling to the console's text. Example Scene The package's examples contain a scene with a console prefab. When executing the scene, press the the buttons F1 - F4 to generate log messages. Each key prints a different type of log message: F1: Regular log that is generated using Debug.Log F2: Warning log that is generated using Debug.LogWarning F3: Error log that is generated using Debug.LogError F4: Exception log that is generated when an exception is thrown If you press F5, you can toggle the visibility of the console."
  },
  "manual/Deep-Linking.html": {
    "href": "manual/Deep-Linking.html",
    "title": "Deep Linking | i5 Toolkit Documentation",
    "keywords": "Deep Linking Mobile Deep Links Mobile deep links are special links on Web pages. They allow users to seamlessly switch into an installed application and trigger an action there. These deep links do not start with \"http://\" or \"https://\" but use a custom schema that can be freely chosen. For instance, it is possible to register an app to react to all links that start with \"i5://\". To ensure that the schema is unique, it is also possible to use reverse DNS notation, e.g. by writing \"com.i5.Toolkit://\". More information on mobile deep links can be found here. Use Case The mobile deep links can be used to quickly access functionalities and services of installed applications. As an example, it is possible to tell the app to immediately load certain content or open a specific editor. A common deep link that can be found on the Web is the \"mailto://\" schema. If a user clicks the link, the mail client opens and automatically sets up a new mail where the receiver mail is automatically filled based on the link's content. Supported Platforms Deep links can only be registered for installed apps, e.g. on the following platforms: Universal Windows Platform Android iOS In particular, this feature does not supported testing in the Unity editor and on Standalone builds. Registering Deep Links UWP Go to the player settings (Edit > Project Settings and select the player tab). Make sure that you are in the UWP settings (the tab with the Windows logo) and navigate to the \"Publishing Settings\". There is an entry \"protocol\" where you can enter the custom URI scheme. So, in this example, you would enter \"i5\" - so omit the \":/\" part here. When this is done, the built app will open whenever an URI that starts with i5:/ is called. Make sure that in the player settings under \"Other Settings\", the scripting runtime version is set to .NET 4.x Equivalent and the scripting backend is IL2CPP. To retrieve the data that is contained in the login redirect, the i5 Toolkit has an OIDC patcher which will post-process the built IL2CPP. When building the app, there should be an entry in the log console about the OIDC patcher running successfully. The patcher will add a hook to the generated C++ files which links the received redirect data back into the Unity C# world. The redirect from the login page to the custom URI schema only works if you add the custom URI schema to the list of allowed redirect URIs in the client's configuration on the provider's Web page. So, in our example, you need to add \"i5:/\" as an allowed redirect URI, e.g. at the Learning Layers client configuration page. Android On Android, it is necessary to overwrite the AndroidManifest.xml file that defines the properties of the app. To do this, place the following file in the folder Assets/Plugins/Android: <?xml version=\"1.0\" encoding=\"utf-8\"?> <manifest xmlns:android=\"http://schemas.android.com/apk/res/android\" xmlns:tools=\"http://schemas.android.com/tools\"> <application> <activity android:name=\"com.unity3d.player.UnityPlayerActivity\" android:theme=\"@style/UnityThemeSelector\" > <intent-filter> <action android:name=\"android.intent.action.MAIN\" /> <category android:name=\"android.intent.category.LAUNCHER\" /> </intent-filter> <intent-filter> <action android:name=\"android.intent.action.VIEW\" /> <category android:name=\"android.intent.category.DEFAULT\" /> <category android:name=\"android.intent.category.BROWSABLE\" /> <data android:scheme=\"myScheme\" /> </intent-filter> </activity> </application> </manifest> Replace myScheme with the scheme that you want to register with your app, e.g. i5 for i5:/. If you want to associate multiple schemes with the app, create multiple intent-filters. In each one, enter one scheme that you want to register with the app. iOS For the iOS target platform, the deep link scheme is registered in the Player Settings. Make sure that you are in the iOS tab and then go to the \"Other\" category. There is a section \"Configuration\". It contains a collapsible section \"Supported URL schemes\". In this list, you can enter all schemes that should be associated with the app, e.g. i5 for i5:/. Further Information More information can be found in Unity's documentation. You only need to follow the the instructions for your specific platform - the code examples are already handled by the given deep linking service. Usage Follow these steps to integrate deep linking into your application: Register the deep link as described in the previous section Add a DeepLinkingService to your application, e.g. in a service bootstrapper. DeepLinkingService service = new DeepLinkingService(); ServiceManager.RegisterService(service); Add the DeepLinkAttribute to a method that should react to a deep link. When specifying the attribute, set the path to which it should react, e.g. \"myDeepLink\" if it should react to deep links like \"i5://myDeepLink\". The path is case-insensitive. The attribute is only found by the module if it is added to public methods. [DeepLink(\"myPath\")] public void Foo() { ... } Important: To optimize performance, the DeepLinkingService does not scan the entire code for the methods with attributes. Instead, you need to add the class that contains the method manually using AddDeepLinkListener(object). service.AddDeepLinkListener(myClass); To clean up, you can remove a listener class again using RemoveDeepLinkListener(object) Filtering Schemes Optionally, you can also enter a scheme in the attribute's definition. If you do not add a scheme, all schemes are recognized which have the same path. For instance, [DeepLink(\"myDeepLink\")] will be activated by any URL with the path myDeepLink, e.g. \"i5://myDeepLink\" but also \"rwth://myDeepLink\", etc. If the scheme is specified, only links which match this exact scheme target the given method. So, [DeepLink(scheme: \"i5\", path: \"myDeepLink\")] will only be called by the deep link \"i5://myDeepLink\" but e.g. not by \"rwth://myDeepLink\". Extracting Further Information About the Received Deep Link Methods that are marked with the DeepLinkAttribute can either take no arguments or one argument of type DeepLinkArgs. In this argument helper class, the full deep link can be found, as well as information about the schema, and parameters that were specified with the deep link. Passing Parameters to the Application Using Deep Links You can specify parameters in the deep link, e.g. \"i5://withParams?value=123&secondvalue=helloWorld\". They are available as a <xref:System.Collections.Generic.Dictionary`2> in the Parameters. Recommendations It is possible to mark any method in the code as a deep link receiver. However, you should only choose methods that are available after the automatic initialization procedure of your application. Moreover, the methods should stay available during the entire lifetime of the application. This is due to the fact that the deep links should be state-free. No matter where in the application you are, a received deep link should always have the same effect. Moreover, when launching the application via a deep link, it should directly react to the deep link's content without user intervention. It would be confusing for users if they start via a deep link, get into the normal main menu, can interact with it and e.g. only if they open the settings menu, the deep link is suddenly recognized and has an effect. To keep the architecture clean, it is recommended to create few API-definition classes that bundle deep link paths instead of scattering them throughout the application's code. These API-definition classes should be available from the beginning of the application and should persist until the application is terminated. Example Scene There is an example scene that demonstrates the usage of the deep links. It can only be tested in UWP, Android and iOS builds. Follow these steps to set up the example: Open the example scene \"Deep Linking Demo\". Go to \"File > Build Settings\" and click the button \"Add open scenes\". Make sure that the \"Deep Linking Demo\" scene has index 0 in the build - it needs to be at the top of the list. If it is not at the top, you can drag and drop the scene entry so that it is the first one in the list. In the build settings dialog, select either Universal Windows Platform (UWP), Android or iOS as the target platform and click the \"Switch Platform\" button. If you want to test on your development Windows PC, it is recommended to choose UWP because you can directly install the app on your PC and do not need an additional smartphone. Register a deep link scheme for \"i5\" for your selected target platform, using the platform-specific instructions in Unity's docuemtation. Build the application and install it on your device. Click on the following link on the device on which you installed the application. The browser will ask you whether you want to open the link with your application. <i5://changeColor?color=#0000ff> A deep link receiver that responds to the changeColor path is attached to the cube. You can modify the value of the color parameter by copying the link and manually pasting it into the browser's address bar. Each time you hit enter, the browser redirects to the example application and the cube changes its color. This works both, if the app is not running in the background and with the already opened app. If you hit F5, you can toggle the visibility of a fullscreen app console which prints the deep link that was received."
  },
  "manual/Experience-API.html": {
    "href": "manual/Experience-API.html",
    "title": "Experience API | i5 Toolkit Documentation",
    "keywords": "Experience API Use Case xAPI is a data capturing solution for learning applications. Clients can observe learner's actions and send them to the xAPI which stores it on a server in a Learning Record Store. An example for a Learning Record Store is Learning Locker. Further information about xAPI can be found here. Usage To access the xAPI conveniently, use an ExperienceAPIClient object. Standard & Advanced Mode The xAPI module ships with a standard and an advanced mode. Standard Mode In the standard mode, no additional dependencies are required as the JSON serialization happens using Unity's build-in JsonUtility. Here, limited statements that only make use of the actor, verb and object are allowed. This is sufficient for statements like \"Person X viewed Object Y\". Advanced Mode In order to enable advanced features such as adding contexts, results etc. to the statement, you need to install the Newtonsoft JSON library. It is recommended to use the internal package by Unity. If you import exactly this package, the module will automatically switch to advanced mode and use the library for JSON serialization. In case you want to use another Newtonsoft JSON library, you need to manually add the Scripting Define Symbol NEWTONSOFT_JSON in the Player Settings. However, currently we recommend using the Newtonsoft Json Unity Package version 3.0.2 or higher for the advanced mode. Client Setup First, initialize the ExperienceAPIClient object. Specify the Uri of your xAPI. The important part here is to make sure that the Uri actually points to the xAPI base endpoint instead of your general Uri. So specify something like https://lrs.example.org/xAPI. As the second initialization parameter that needs to be set before using the object, enter an authorization token. The authorization token is generated when you register a new client in your learning record store's administration settings. Your authorization token is a secret, so it should not be stored in the source control. Instead, create an external configuration file that is excluded from source control and which is first read. Refer to the example scene to find an instance where a scriptable object was created to store the authorization token. Optionally, you can also specify the version of xAPI that you are using. By default, this is set to 1.0.3. Sending Statements Place triggers in your code that will send statements to the xAPI under certain circumstances. For instance, you can send a statement once the user views certain content. There are three alternatives for sending statements. In the end, they all create a Statement, consisting of an actor, a verb and an object. You can construct a Statement object first and then hand it to the SendStatementAsync method. You can create the Actor, Verb and XApiObject and pass them to the SendStatementAsync method. The method will internally construct a statement from this that is then sent to the Learning Record Store. You can pass the IDs of the actor, verb and object directly to the SendStatementAsync. This will first create Actor, Verb and XApiObject objects with the corresponding IDs and after that, it will fill construct the statement and send it. As a result, you get back the Learning Record Store's response message. If the response was successful, you will receive the ID of the statement in the response's body. Internally, the actor ID always needs to start with mailto:, followed by the mail address that identifies the actor. The Actor class is able to recognize if the prefix was already added. If the actor ID does not start with mailto:, this prefix is automatically added. In order to end up with a clean architecture, it is recommended to use the observer pattern. Write a class that observes the values that could trigger an xAPI call. If the values change to a certain value, trigger the xAPI call using this observer class. This way, you do not create a dependency of your core functionality to an xAPI connection. xAPI Element Model The library uses a custom implementation of the xAPI Standard data elements that can be found here. The fields in the defined classes correspond closely to the standard itself. Each has its own ToJObject() method, which handles conversions to JSON. The following elements are used for the implementation: Actor The Actor defines who performed the action. The class file Actor implements the Actor element. It has two fields: Mbox - Corresponds to the IRI of the Actor element, which in this implementation corresponds to the format \"mailto:actor@email.com\". The setter of this field makes sure that the field value starts with \"mailto:\", so that it conforms with the standard. This field is required for a valid Actor element. name - The name of the actor. Optional. Additional steps when converting to a JObject (using the ToJObject() method): The property \"objectType\": \"Agent\" is added. Verb The Verb defines the action between an Actor and an Object. The class file Verb implements the Verb element. It has two fields: id - Corresponds to the IRI of the Verb element, which must be of the format defined in the standard to be accepted by a LRS. The library does not validate conformity to the format. Required. displayLanguageDictionary - An implementation of the \"display\" property in the standard. Holds <k,v> pairs where the key is the language code and the value is the name of the Verb in that language. Optional, the dictionary may be empty. When converting to JSON, a name will be added with the default \"en-us\" language code if none is provided (using the CutToVerbName method). It also has one notable method: CutToVerbName - This method can be used to extract the final part of a verb IRI, where the verb name is expected to be. For instance, from 'http://test.org/x/y/z/.../verbName', 'verbName' is retrieved. Additional steps when converting to a JObject (using the ToJObject() method): If the displayLanguageDictionary is empty, a name is extracted from the verb ID using the CutToVerbName method. Object The Object defines the thing that was acted on. The class file XApiObject implements the Object element. The name of the class is in this format as object is a reserved name in C#. The class implements the Object only as an Activity (objectType = Activity in the standard). It has several fields: id - Corresponds to the IRI of the Object element, which must be of the format defined in the standard to be accepted by a LRS. The library does not validate conformity to the format. Required. nameDisplay - Dictionary that implements the name language map from the standard. Holds <k,v> pairs where the key is the language code and the value is the name of the Object in that language. Optional, the dictionary may be empty. descriptionDisplay - Dictionary that implements the description language map from the standard. Holds <k,v> pairs where the key is the language code and the value is the description of the Object in that language. Optional, the dictionary may be empty. type - The type of the Activity. Optional. Currently, this field only works in advanced mode. Additional steps when converting to a JObject (using the ToJObject() method): The objectType is set to \"Activity\" Names and descriptions are only taken from the dictionaries if their values are valid, i.e. not empty strings (\"\"). Result An optional property that represents a measured outcome related to the Statement in which it is included. The class file Result implements the Result element. It has the following fields, all of which are optional: success - Indicates whether or not the attempt on the Activity was successful. completion - Indicates whether or not the Activity was completed. response - A string message appropriately formatted for the given Activity. duration - Period of time over which the Statement occurred. Must be ISO 8601 Duration compatible. extensions - Implementation of the Result extensions as defined in the standard. Holds <k,v> pairs where the key is the extension key (must be a IRI) and the value is any meaningful string. Currently only strings as values for these extensions are supported. It also has one notable method: AddMeasurementAttempt - This method can be used if a measurement attempt wants to be recorded, that is to record a value that the user measured in some way. This is realized through the extensions dictionary, which is why an IRI is needed besides the measurement value, both of which must be strings. Context An optional property that provides a place to add contextual information to a Statement. Currently, the library only supports adding parent activities as Context to the Statement activity. The class file Context implements the Context element. It has one field: ParentActivityIDs - A list holding the IDs of activities that serve as context-parent to this Statement. There is usually just one parent activity, but the standard allows for more. Optional. Statement The complete xAPI Statement. It is implemented by the Statement class file. The following fields are defined: actor - The Actor of the Statement. The type Actor is defined above. Required. verb - The Verb of the Statement. The type Verb is defined above. Required. object - The Object of the Statement. The type XApiObject is defined above. Required. result - The Result of the Statement. The type Result is defined above. Optional. context - The Context of the Statement. The type Context is defined above. Optional. timestamp - Defines when the experience occurred. When constructing a statement either complete objects of Actor, Verb, and Object or their respective IRIs can be used. Additional steps when converting to a JObject (using the ToJObject() method): The timestamp is formatted to the required ISO 8601 format. Example Scene There is an example scene that allows you to see how the ExperienceAPIClient is used. Required Setup The example scene shows how to use the xAPI client. To try the functionality in the scene, you first need to have access to a Learning Record Store. In the Learning Record Store, create a new client and copy its authorization token. After that, return to the sample scene in Unity. Right click in the Assets Browser and choose \"Create > i5 Toolkit > xAPI Client\". Select the created file and paste your authorization token into the corresponding field in the inspector panel. After that, select the \"Tester\" GameObject in the example scene. In the inspector, drag and drop the created file into the \"Credentials\" slot of the Experience API Tester component. Adapt the xAPI-Endpoint on this component to fit to the URI of the Learning Record Store that you are using. Try out the Example Run the example scene. If you press F5, a statement is sent to your Learning Record Store. It will contain the actor \"tester@i5toolkit.com\", a verb with the ID \"http://www.example.org/test\" and an object with the ID \"http://www.example.org/xApiClient\". The console will also log the resulting answer by your Learning Record Store."
  },
  "manual/File-Cache.html": {
    "href": "manual/File-Cache.html",
    "title": "File Cache | i5 Toolkit Documentation",
    "keywords": "File Cache Use Case Importing 3D assets and other resources from the web at runtime is a great way to keep the content of an application up to date without the need to update the client itself. However, loading files from the web can take some time especially with bad internet connection. This service allows it store downloaded files in a cache. Thereby, files are loaded from the local file system instead of the Web after they are loaded once. This increases the loading speed for files that are loaded multiple times. A common use case for this is the download of 3D models from the Web. Usage The file cache itself is a service that can be registered at the ServiceManager. This service can handle the caching of files. To further improve the usability of the service, there exist an IContentLoader<T> called CacheAwareContentLoader that provides an interface to interact with the file cache service. This content loader can be set on any other module which needs to load content from the Web, e.g. on the Obj Importer. Notes The file cache is located in the namespace i5.Toolkit.Core.Caching. Settings There are four settings that can be configured when initializing a FileCacheService. If the parameter sessionPersistence is set to true the Cache will reload the cache state of the last session. The default value is false. The parameter useSafeMode activates the check of a MD5 checksum before loading a file from cache. It ensures that cached files cannot be swapped out as their checksum will change. The default value is true. With the parameter cacheLocationOverride one can set a different location to store the cache data in. The default value is null. The parameter daysValid sets the threshold for how old a file is alowed to be until it should not be used any more by the cache. The default is 365 days. The parameter directoryAccessor can be used to configure how the file directories are accessed. In a productive environment, it is advised to leave this option untouched but it can e.g. be used in tests to fake a directory system. All those parameters can be set when initializing the file cache: FileCacheService fc = new FileCacheService(sessionPersistence: false, useSafeMode: true, cacheLocationOverride: null, daysValid: 365); Example This explanation will walk you through the process of using the CacheAwareContentLoader to download files and use the file cache. First of all, we need to use the namespace for the cache and the general service core. using i5.Toolkit.Core.Caching; using i5.Toolkit.Core.ServiceCore; Before we are able to use the file cache, we first of all need to instantiate this service and add it the service manager. Since we only need to do this once, one will most likely do this in the Start method of a Unity MonoBehaviour class. Once the FileCacheService is registered, we can instantiate the CacheAwareContentLoader. CacheAwareContentLoader contentLoader; void Start() { //Register the File Cache FileCacheService fileCache = new FileCacheService(); ServiceManager.RegisterService(fileCache); contentLoader = new CacheAwareContentLoader(); } This is all the setup that is required. Afterwards one can use the contentLoader normally. For example, we will write an update method that loads a file from a web address. Here, it is stored in the variable path if the user hits F5. private async void Update() { if (Input.GetKeyDown(KeyCode.F5)) { WebResponse<string> resp = await contentLoader.LoadAsync(path); // retrieve the dowloaded or cached file in the WebResponse } } When hitting F5 the second time, the CacheAwareContentLoader will use the cached file and therefore load it faster. Another usage example can be found in the documentation of the Obj Importer and in the example scene of the Obj Importer."
  },
  "manual/Modified-3D-Objects.html": {
    "href": "manual/Modified-3D-Objects.html",
    "title": "Modified 3D Objects | i5 Toolkit Documentation",
    "keywords": "Modified 3D Objects Rounded Corners The rounded corners object is an extruded rectangle with rounded corners. It can be used for 3D UI elements, e.g. to create menus or buttons with rounded edges. Usage To use the rounded corners object, instantiate the prefab located under \"i5 Toolkit/Runtime/Modified 3D Objects/Prefabs/Rounded Corners.prefab\" in the scene. The prefab has a Rounded Corners component where options such as the size, depth and corner radius can be set. Property Purpose Width Specifies the width of the object Height Specifies the height of the object Depth Specifies the depth/thickness of the object Corner Radius Specifies how large the rounded corners should be. The value is relative to the edge length and should be between 0 (no rounded edges) and 0.5 (elliptic shape). Values outside of this range are automatically clamped. It is not recommended to use the exact extreme values 0 and 0.5 since they lead to overlapping vertices. Subdivisions Specifies how many vertices make up the rounded corner. Smaller values lead to a more lightweight mesh and better performance but the corners will appear jagged rounded. Higher values smooth the curvature of the corner but create denser meshes with higher performance impact. Usually, a value of 3 should be sufficient. Exact Colliders If deactivated, a box collider is used to approximate the shape of this object. If you require exact collision detection on the rounded corners, activate this setting. It will replace the box collider with a mesh collider. However, mesh colliders have a higher performance impact, so activate this option only if necessary. Do not scale the object by its transform since this will stretch the corners. Instead, use the width, height and depth settings since they preserve the circular corners. Test Scene There is a test scene where the settings of the prefab are demonstrated."
  },
  "manual/Obj-Importer.html": {
    "href": "manual/Obj-Importer.html",
    "title": "Obj Importer | i5 Toolkit Documentation",
    "keywords": "Obj Importer The obj importer can fetch 3D models in the .obj file format from the Web or local storage at runtime. This way, content can dynamically be loaded from outside of the project. It allows developers to maintain a list of 3D models online which can be tweaked and exchanged without updates to the deployed applications. Moreover, users can upload 3D models to the Web and so, the application can load user-specified content. With the local loading, 3D models from the Web can first be downloaded and cached for quicker access. The obj importer also fetches any referenced material files in the .mtl format. Moreover, associated textures in materials are also loaded. Usage Register the Service First, register the ObjImporter as a service at the ServiceManager; ObjImporter objImporter = new ObjImporter(); ServiceManager.RegisterService(objImporter); When registering the service, it will automatically register an MtlLibrary service, too. This service is required for importing the material files and caching them so that they can be reused. Import Models Use the method ImportAsync(string) to load a 3D object from the given URL or file path and import it as a new GameObject. The method runs asynchronously to request the file from disk or to load it from the Web. Moreover, the geometry construction happens in the background on a separate thread so that there should be no noticable impact on the performance. string url = \"https://raw.githubusercontent.com/rwth-acis/i5-Toolkit-for-Unity/master/Assets/i5%20Toolkit%20for%20Unity/Samples%7E/Importers/ObjImporter/Obj%20Models/Monkey_textured.obj\" GameObject obj = await ServiceManager.GetService<ObjImporter>().ImportAsync(url); The specified path should point directly to the .obj file. If it does not point to a file that ends with .obj, a warning is given but the import is still tried. Debugging The service provides a field ExtendedLogging. If it is set to true, the ObjImporter gives more detailed log outputs about the import process. ServiceManager.GetService<ObjImporter>().ExtendedLogging = true; Activate Caching To increase the loading speed of 3D objects that are loaded multiple times, one can activate caching. When using the cache, objects are stored locally once they are downloaded so that another request of that resource can be answered directly from the local file system. To be able to use the File Cache and the ObjImporter together the following name spaces must be included. using i5.Toolkit.Core.Caching; using i5.Toolkit.Core.ModelImporters; using i5.Toolkit.Core.ServiceCore; Before we activate the cache of the ObjImporter there must be a FileCacheService registered at the servie manager. After that, exchange the ContentLoader with the CacheAwareContentLoader. void Start() { //Register the file cache FileCacheService objCache = new FileCacheService(); ServiceManager.RegisterService(objCache); //Register the object importer; set its content loader to the cache aware loader ObjImporter importer = new ObjImporter(); importer.ContentLoader = new CacheAwareContentLoader(); ServiceManager.RegisterService(importer); //then use the normal ImportAsync(url) method to import objects } This code example above uses the default settings of the FileCacheService. To see how to specify the behaviour of the file cache, please, use the File Cache documentation. Example Scene The example scene shows how to load different .obj files. In the folder \"Obj Models\", different 3D models which have been created in Blender, are stored. They can be loaded using the link to the raw object on GitHub. The 3D models vary in complexity, the number of objects, materials and textures. To find the url of an example 3D model, navigate to the model folder of the repository, select one of the .obj files and click on \"View raw\". After that, copy the url from your browser into the url field of the ServiceClient in the ObjImporter example scene. You can also enter absolute local paths. The example provides a series of 3D models that can be tried out. In PlayMode, press F5 to trigger the import. You can also change the url field of the ServiceManager during PlayMode and import different 3D models into one session by pressing F5 after changing the model url."
  },
  "manual/Object-Pool.html": {
    "href": "manual/Object-Pool.html",
    "title": "Object Pool | i5 Toolkit Documentation",
    "keywords": "Object Pool Purpose The problem: Usually, objects like GameObjects and Meshes are instantiated when they are needed so that they can be used in the scene. If the object is not required anymore, it is usually destroyed. Such calls of Unity's Object and Object have a performance overhead which manifests in frame drops. Destroyed objects also need to be collected by the garbage collector which intercepts the program execution and also leads to poor performance. This is especially true if many objects need to be created or destroyed at once. The solution: Object Pools A common technique to avoid such frame drops is to pool the objects. This means that a number of objects are created in advance, e.g. at application startup. At this point in time, a short loading time can be accepted since the application is most likely also loading other resources at that point. After that, the application should only pull objects from the pool to use them. Once the object is not required anymore, it is not destroyed but instead returned to the pool. Hence, objects are recycled which can decrease the amount of times that the garbage collector runs. Usage Requesting Objects You can use ObjectPools for any type of object. To request an object, e.g. a GameObject from the pool, call the following: GameObject fromPool = ObjectPool<GameObject>.RequestResource(() => {return new GameObject(\"Newly created\");}); RequestResource works in the following way: It tries to fetch an object from the pool and returns it. If the pool is empty, the method falls back to the factory method which is provided as an argument. In the example, the factory method is given as a lambda function. In general, the factory method should create a new instance of the object and return it. Returning Objects Once you do not need an object anymore, it must be returned to the pool so that other components can reuse it. For instance, to return a GameObject myGameObject, call the following method: ObjectPool<GameObject>.ReleaseResource(myGameObject); Important: Before you return the object using ReleaseResource, you should reset its properties. The state in which you return the object is the state in which will receive the object again from the pool. No internal modification is performed by the pool. Moreover, it is advisable to bring objects into a storage state. For GameObjects, it makes sense to deactivate them so that they are not visible in the scene while they are unused. This also means that you have to activate the GameObject again once you retrieve it. Clearing Pools The content of object pools can be cleared using the ClearPool method. You can specify a method that takes the object as input and will clean them up. For instance, you can specify Object to destroy GameObjects in the pool. Working with Separate Sub-Pools for the Same Object Type In some cases, it makes sense to leave objects initialized in a specific state. For instance, it makes no sense to remove components from GameObjects which are already set up if the same piece of application logic retrieves the GameObject later on and re-adds the same components. Therefore, you can register sub-pools. The purpose of these sub-pools is that you can return objects in a specific state to this pool and can expect it to have this state once you request the object from this sub-pool again. As the sub-pool is separate, other components still work on the main pool and will not receive these objects which are in a different state. Registering these separate pools works in the following way: int poolId = ObjectPool<GameObject>.CreateNewPool(); The method CreateNewPool() will return an id by which the sub-pool can be addressed. By default, the main pool of an object type always has the id 0. Once you have obtained the id of the sub-pool, you can use the RequestResource and ReleaseResource methods and specify the id as the first argument. GameObject fromSubPool = ObjectPool<GameObject>.RequestResource(poolId, () => {return new GameObject();}); ObjectPool<GameObject>.ReleaseResource(poolId, fromSubPool); You can also remove sub-pools by calling the RemovePool method. Similar to the ClearPool method, you can specify a function to destroy the objects that are currently in the pool. Administering the Pool/ In Which State Should Objects Enter the Pool? How you or organize the pool(s) is up to you. All objects in the same pool should be interchangeable since you will get back an arbitrary one. You should also be clear about the condition in which you expect an object to be when it is dispensed from the pool. The object is not modified within the pool. So, before putting objects into the pool, reset them into a state in which they can immediately be used again when they are retrieved. Moreover, the creation method of the RequestResource method must also provide new objects in the same state as recycled objects. Imagine the following situation: You have an application where you create and destroy a large amount of cube and sphere GameObjects. The cubes are static and the spheres are affected by gravity using a Rigidboy component. There are two ways how you could use pools to administer these two types of GameObjects. Create two separate GameObject-pools. One of them only gives back the cubes and the other one only contains spheres. Here, the assumption is that pool 1 only contains the cubes and pool 2 only contains spheres that are already equipped with a Rigidbody component. The creation method that is supplied with RequestResource of pool 1 creates static cubes and the creation method for RequestResource of pool 2 creates spheres and initializes them with a Rigidbody. When returning the GameObjects to the pools, cubes only go into the first pool and spheres are only inserted into the second pool. Before returning a GameObject to the pool, check that it has a default scale, rotation and remove all components that were not on it when you retrieved it out of the pool. Your code should also check that the spheres still have a Rigidbody when they are inserted into the pool. The second option is to use one pool for both GameObjects. Here, the cube and sphere GameObjects are reduced to a common denominator that is stored in the pool. Both the cubes and spheres have a Renderer component to display them in the scene. Hence, this means that you only put empty GameObjects into the pool that have a Renderer component on them. However, before inserting the GameObject, you should reset the renderer's mesh so that it does not render the cube or sphere shape anymore. Moreover, you should remove the Rigidbody component from the spheres. Similarly, the creation method in RequestResource returns an empty GameObject with a Renderer component on it. When retrieving a GameObject from the pool, you now need to do some setup work. For the cubes, add the cube mesh to the Renderer to define the shape. For the sphere, add a sphere mesh and the Rigidbody component to the retrieved GameObject. Both options have their pros and cons. The separated pools are easier to administer and it is clearer which kind of content a pool contains. However, objects in a pool are very specific and potentially not be reused often in the program. For one common pool, there is a higher reusability as the stored object is more general. However, more cleanup and setup work is required when returning objects into the pool and retrieving them again. The object is not modified within the pool. In particular, GameObjects that are stored within the pool and should not appear in the scene, need to be deactivated before adding them to the pool. They must then be activated again after retrieving them from the pool. In your project, you should document how you use the pools. This means you should write down whether you use multiple different pools and in which state you assume objects to be in each pool. Test Scene There is a test scene which demonstrates the usage with meshes. The test scene was used to make sure that the pool fixes the memory leak problem that meshes introduce. If meshes are not destroyed implicitly, they are never collected by the garbage collector, meaning that creating new meshes will fill the memory over time. The ObjectPool<Mesh> pool solves this problem because the meshes can be recycled."
  },
  "manual/OpenID-Connect-Client.html": {
    "href": "manual/OpenID-Connect-Client.html",
    "title": "OpenID Connect Client | i5 Toolkit Documentation",
    "keywords": "OpenID Connect Client OpenID Connect OpenID Connect is a single sign-on solution for user authentication. Users can log in at a central login page that is provided by the OpenID Connect provider, e.g. Google or Learning Layers. As a result of the successful login, the application receives an access token that can be used to request protected resources or data about the logged in user. For users, OpenID Connect has the advantage that they only need one account at the OpenID Connect provider. This account can be reused in all applications that support the provider's OpenID Connect sign-in. Moreover, users do not have to trust that clients protect their login credentials and developers do not have to administer such credentials. Critical information such as the user name and password are always entered at the central login page of the OpenID Connect provider. This also means that the client never sees the user's credentials. Instead, the client only receives an access token after the login. Such an access token is only valid for a limited amount of time. Moreover, the user has to agree to scopes which list the kind of information that the application is allowed to access. The user can revoke these access rights at any time. Supported Platforms The OpenID Connect client currently works on the following platforms: Unity editor (for testing) Standalone builds UWP (IL2CPP only; scripting runtime version must be set to \".NET 4.x Equivalent\") Android iOS There is a Unity bug in Unity 2020 for UWP platforms that crashes the application once it opens a Web page. This means that the OpenID Connect client cannot be used when building an UWP app using Unity 2020. The bug does not occur in Unity 2019.4 and should be fixed in Unity 2021.1. For more information, check the corresponding bug report. Usage Service Initialization Register a OpenIDConnectService at the ServiceManager. This can e.g. be done using a bootstrapper. When creating the service, make sure that its OidcProvider is set up. Here is an example bootstrapper: [SerializeField] private ClientDataObject learningLayersClientData; protected override void RegisterServices() { OpenIDConnectService oidc = new OpenIDConnectService(); oidc.OidcProvider = new LearningLayersOidcProvider(); oidc.OidcProvider.ClientData = learningLayersClientData.clientData; // this example shows how the service can be used on an app for multiple platforms #if !UNITY_EDITOR oidc.RedirectURI = \"i5:/\"; #else oidc.RedirectURI = \"https://www.google.com\"; #endif ServiceManager.RegisterService(oidc); } In this example, the OidcProvider is set up, e.g. using the LearningLayersOidcProvider. To set it up, a redirect page is defined. Note, that different redirect pages can be defined for different platforms. This also has the advantage that different redirect methods can be used on these platforms. In this example, Windows Store Apps use the custom URL schema \"i5:/\" whereas all other platforms redirect to Google. Switching between OpenID Connect Providers The OidcProvider is an implementation that specifies how the authentication API of a provider should be used. Currently, the toolkit has built-in support for the following OpenID Connect providers: Platform Implementation Learning Layers LearningLayersOidcProvider GitHub GitHubOidcProvider Google GoogleOidcProvider You can add support for further OpenID Connect providers by creating a class that inherits from the AbstractOidcProvider. This abstract class implements the basic required functions to allow for an OpenID Connect login process. The class has to define a constructor in which the property \"serverName\" has to be set to the base URL to which the endpoint paths are appended. The endpoints are then automatically extracted from the corresponding OpenID Connect discovery document. If necessary, the implementation allows all functions to be overwritten by your own custom implementation. In the example in the previous section, we assigned the OidcProvider during the initialization phase. However, it is also possible to set this property just before calling the login function, e.g. to give the user a choice between different providers that are switched on the fly. Each OidcProvider has to be initialized with their own client credentials before using the login procedure. For parallel support of multiple providers, read the section about Using Multiple Providers in Parallel Adding the Client Credentials An application can only use a provider's OpenID Connect API, if you have registered a client at the API. This is a manual step that has to be done once at the beginning of the development. During the registration process, the provider will generate a client ID and a client secret. To access the API's methods, the client has to include these credentials in the requests. You can find instructions on how to register clients in the section Client Registration Protect your client data. As the name suggests, your client secret (and other client data as well) should be kept confidential. Therefore, they should be excluded if the project's source code is uploaded to public places such as GitHub. To solve this, the OpenID Connect Service can load client credentials from a separate file in the project. To define the client credentials, right-click somewhere in your Assets folder or any subfolder and choose \"Create > i5 Toolkit > OpenID Connect Client Data to create the file. If you select it, you can enter the client credentials in Unity's inspector. If you are using Git, you can now add the created file to .gitignore so that it will not be uploaded. In the setup instructions of your project, include a note that each developer has to create their own client credentials and add them to the file. Before calling the login procedure, assign the client data in the following way. You can either do this in the service bootstrapper as part of the general initialization or you can do this on the fly, just before accessing the login flow. // expose a field in the inspector for your client credentials [SerializeField] private ClientDataObject clientDataObject; // assign the client data ServiceManager.GetService<OpenIDConnectService>().OidcProvider.ClientData = clientDataObject.clientData; Defining the Redirect URI Before the login page is shown, a redirect URI should be specified by setting the RedirectURI property of the service. The importance of this redirect URI varies based on the target platform. Editor & Standalone Setting the redirect URI for editor and standalone builds is optional. You can do it to improve the user experience. In the editor and standalone builds, the toolkit starts an internal server to which the login automatically redirects. This way, the server always fetches the necessary data which are provided in the redirect. After that, the user is redirected to the specified URI which can e.g. point to your Web page that tells the user to return to the application. So, for editor and standalone builds, setting the RedirectURI property is optional and can be used to improve the user's experience. Optional: If you require a workflow where the OpenID Connect redirect has to go to a fixed URL, you can manually set the ListeningUri to the loopback address and the fixed port: ServiceManager.GetService<OpenIDConnectService>().ServerListener.ListeningUri = \"http://127.0.0.1:8080\"; Native Apps (UWP, Android, iOS) Native app builds require a redirect URI which needs to be set to a custom URI schema. The custom URI schema must be registered in the provider's client configuration and in Unity's player settings. In native app builds, the redirect URI is essential. Set it to a custom URI scheme, e.g. i5:/. You can use either an empty path, so i5:/ or the path \"login\" as in i5:/login. More information how to register a deep link can be found on the documentation page of the Deep Linking Service. You do not need to set up the service as this is already handled internally by the OpenIDConnectService. You only need to register the deep link in the Player Settings or in the AndroidManifest.xml on Android. Starting the Login Process First, make sure that an OpenID Connect provider has been set. The IOidcProvider has to be configured with the client credentials. One way to initialize it is to attach a MonoBehaviour script to the button UI object in the scene that triggers the login. The script has a public field where you can reference the client credentials. Once the button is clicked, first create an instance of the IOidcProvider that should be used and assign the client credentials. After that, assign the instance to the xref:i5.Toolkit.Core.OpenIDConnectClient.IOidcProvider> property of the service. Before starting the login process, subscribe to the LoginCompleted event to get notified once the login procedure is completed. To start the login process, call the OpenLoginPageAsync() method of the OpenIDConnectService. This will show the login page of the provider to the user in the system's default browser. Once the user is logged in, all the necessary redirects and requests to get the access token are made automatically. After the login process has finished successfully, the LoginCompleted event is raised. Bringing the Application Back into Focus After the login, the Web browser redirects to a URI to which the app listens and which is defined in the RedirectURI. This is usually a custom app protocol or the loopback address where a local server is listening. However, in some cases, the application has to make sure that it gets back into focus after the login. Native Apps (UWP, Android, iOS) On native apps on UWP, Android or iOS, the application is automatically brought back into focus if you have specified the custom URI schema as the service's RedirectURI and if you have added it as a protocol in the player settings. Using a custom URI schema as a redirect URI is mandatory for this platform since the redirect contains the necessary data to finish the login. Editor & Standalone For these platforms, the OpenID Connect service only handles the redirect of information. Without additional logic or configurations, the user manually has to return to the application. You can set the RedirectURI to a Web page which should tell the user to return to the app. You can also search for more platform-specific approaches that get the application back into view. Logout To log out, call the Logout() method of the OpenID Connect service. There is also an event LogoutCompleted which is raised after the logout. Using Multiple Providers in Parallel This section describes how to provide parallel logins that allow your user to be logged in at multiple providers in parallel, e.g. at Learning Layers and GitHub. The initial problem is that there is only one OpenIDConnectService which only provides one OidcProvider. The <i5.Toolkit.Core.ServiceCore.ServiceManager> also only allows registering one instance of each class. Hence, the solution is to create a new class for each provider that you have and let it inherit from the OpenIDConnectService. This way, you can register e.g. a LearnignLayersOIDCService and a GitHubOIDCService at the same time. public class LearningLayersOidcService : OpenIDConnectService { } Initialize the new service classes like usual and after that, you are able to access their login data and login workflows independently. Using Multiple Providers as a Selection Option If you do not need a user to be logged in parallel but they need to choose between one of the given provider options, this solution also works. Alternatively, you can switch out the OidcProvider since you do not need to store multiple access tokens in parallel. Client Registration To set up an OpenID Connect client for a specific provider, the client needs to be registered at the provider. As a result, the provider issues client credentials which usually consist of a client id and a client secret. Once you have obtained the client credentials, add them to the client. Creating a Learning Layers Client To register a learning layers client, contact an administrator for the Learning Layers login. If you are working on a thesis at the Chair of Computer Science 5, RWTH Aachen University, you can contact your advisor. Send the admin/advisor the following JSON string. Fill out the client ID, the name, the description and the redirectUris. For the client ID, choose a unique name for your app. The admin/advisor will answer with a mail that contains the client ID and client secret that you can then use for the login process. { \"clientId\": \"An ID for your client\", \"name\": \"Your app name\", \"description\": \"A description of your app\", \"baseUrl\": \"\", \"surrogateAuthRequired\": false, \"enabled\": true, \"alwaysDisplayInConsole\": false, \"clientAuthenticatorType\": \"client-secret\", \"redirectUris\": [ \"http://127.0.0.1:*\", \"myScheme:/\" ], \"webOrigins\": [ \"http://127.0.0.1\" ], \"notBefore\": 0, \"bearerOnly\": false, \"consentRequired\": false, \"standardFlowEnabled\": true, \"implicitFlowEnabled\": false, \"directAccessGrantsEnabled\": false, \"serviceAccountsEnabled\": false, \"publicClient\": false, \"frontchannelLogout\": false, \"protocol\": \"openid-connect\", \"attributes\": { \"saml.assertion.signature\": \"false\", \"saml.force.post.binding\": \"false\", \"saml.multivalued.roles\": \"false\", \"saml.encrypt\": \"false\", \"backchannel.logout.revoke.offline.tokens\": \"false\", \"saml.server.signature\": \"false\", \"saml.server.signature.keyinfo.ext\": \"false\", \"exclude.session.state.from.auth.response\": \"false\", \"backchannel.logout.session.required\": \"true\", \"client_credentials.use_refresh_token\": \"false\", \"saml_force_name_id_format\": \"false\", \"saml.client.signature\": \"false\", \"tls.client.certificate.bound.access.tokens\": \"false\", \"saml.authnstatement\": \"false\", \"display.on.consent.screen\": \"false\", \"saml.onetimeuse.condition\": \"false\" }, \"authenticationFlowBindingOverrides\": {}, \"fullScopeAllowed\": true, \"nodeReRegistrationTimeout\": -1, \"defaultClientScopes\": [ \"web-origins\", \"role_list\", \"roles\", \"profile\", \"email\" ], \"optionalClientScopes\": [ \"address\", \"phone\", \"offline_access\", \"microprofile-jwt\" ], \"access\": { \"view\": true, \"configure\": true, \"manage\": true } } Creating a GitHub client To register a GitHub client, follow the steps in the official documentation to create a new OAuth app. You can register a new app here. The important part is to add an \"Authorization callback URL\" which is the redirect URI. To use deep linking, enter the protocol to which your app is registered, e.g. i5://. To use the local server, e.g. for in-editor testing, enter http://127.0.0.1. Note that you cannot register multiple redirect URIs in GitHub apps, e.g. for cross-platform. To solve this, create different apps for each redirect URI. After that, initialize the OidcProvider's ClientData with the data of the app with the corresponding redirect URI. Creating a Google client To register a Google client, follow the steps in the official documentation to create a new project at the Google Cloud Console for their application from where they can generate their OAuth 2.0 User Credentials (ClientID and Secret). The important part is to add an \"Authorization callback URL\" which is the redirect URI. To use deep linking, enter the protocol to which your app is registered, e.g. i5://. To use the local server, e.g. for in-editor testing, enter http://127.0.0.1:52229/code?. Note, that Google requires the user to pre-register their redirect URI in their Google Cloud Console project. For this one has to manually set the listening url to a fixed port. An example for such a url with fixed port number would be http://127.0.0.1:52229/ as can be seen in the example scene explained below. In this case, the redirect URI that has to be registered at the Google Cloud Console project would be http://127.0.0.1:52229/code?. Example Scenes The OpenID Connect example contains multiple subfolders and scenes for different examples. Learning Layers Example There is an example scene which shows how to set up and use the Learning Layers OpenID Connect client. To use the scene, first register a client at the Learning Layers provider. After that, create the client credentials file by right-clicking in the Assets browser and choosing \"Create > i5 Toolkit > OpenID Connect Client Data\". Select the created file and enter the client id and client data in the inspector. Then, select the \"Service Bootstrapper\" GameObject in the scene and drag and drop the file onto the field on the Learning Layers Bootstrapper. After this initialization, you can start the scene. If you press F5, the browser is opened with the Learning Layers login page. Once you log in and return to the app, the console will print the access token and some information about the logged in user. The important GameObjects in the example scene are the Service Bootstrapper and Tester. The service manager bootstrapper on the Service Bootstrapper initializes the OpenIDConnectService and adds the provider's client data. The Tester GameObject triggers the login procedure and reacts to the successful login. GitHub Example The GitHub folder contains an example scene for trying out the login at GitHub. First, register an OAuth Client at GitHub. To do so, follow the instructions in the section Creating a GitHub client. If you only want to test the demo in the editor, it suffices to create the client with the \"Authorization callback URL\" http://127.0.0.1. Create the second OAuth client with your deep link protocol if you want to deploy the example scene to an app. Once the client credentials are created, right click in Unity's Asset browser and choose \"Create > i5 Toolkit > OpenID Connect Client Data\". After that, enter the client credentials that you just created. If you created two clients, you need two OpenID Connect Client data files. After that, select the \"Service Bootstrapper\" object in the example scene and assign the client data files in its bootstrapper component. This can be done by dragging and dropping the client data file from the Asset browser into the component's field in the inspector. With this setup, you can start the scene or build the application. Press F5 to trigger the login procedure. Google Example The Google folder contains an example scene for trying out the login at Google. First, register a project at Google. To do so, follow the instructions in the section Creating a Google client. If you only want to test the demo in the editor, it suffices to create the client with the \"Authorization callback URL\" http://127.0.0.1:52229/code?. Create the second OAuth client with your deep link protocol if you want to deploy the example scene to an app. Once the client credentials are created, right click in Unity's Asset browser and choose \"Create > i5 Toolkit > OpenID Connect Client Data\". After that, enter the client credentials that you just created. If you created two clients, you need two OpenID Connect Client data files. After that, select the \"Service Bootstrapper\" object in the example scene and assign the client data files in its bootstrapper component. This can be done by dragging and dropping the client data file from the Asset browser into the component's field in the inspector. With this setup, you can start the scene or build the application. Press F5 to trigger the login procedure. Multiple Providers in Parallel The example scene in the folder \"Multiple Providers in Parallel\" shows a possible app setup where a user can be logged in a multiple providers at the same time. Here, Learning Layers and GitHub can be used in parallel. To set up this example, create the client credentials for each of the providers. Assign them to the bootstrapper fields on the \"Service Bootstrapper\" GameObject. After that, you can press F1 to open the Learning Layers login. F2 lets you verify that you are still logged in at Learning Layers and that the application memorized your access token. Press F3 to log in at GitHub. With F4, the application will log your GitHub username to show that it still knows that you are logged in. Try out the following workflow: First log in at both Learning Layers and GitHub (F1 and F3) and after that, press F2 and F4 to verify that both providers exist in parallel and have indeed saved your access token."
  },
  "manual/Procedural-Geometry.html": {
    "href": "manual/Procedural-Geometry.html",
    "title": "Procedural Geometry Kit | i5 Toolkit Documentation",
    "keywords": "Procedural Geometry Kit The procedural geometry kit streamlines the way how meshes can be built. It provides the several advantages over working directly with Unity's Mesh API: Abstraction from low-level mesh representations: Meshes are represented by different arrays, e.g. an array for the vertex positions, a vertex index array to determine the triangles, an array for normal vectors, etc. The procedural geometry kit abstract from this by providing methods for adding vertices or faces. The required low-level operations on the arrays are automatically handeled by the procedural geometry kit. This improves the readability of the code since you are working with named methods instead of numberic arrays. Step by step geometry construction: You can determine the position of vertices and connection between faces in a step-by-step manner, instead of uploading the full vertex and index arrays at once. Multi-threaded, asynchronous geometry construction: The procedural geometry kit does not use Unity's API in the construction process. Therefore, you can calculate the mesh's geometry in a separate thread. Only the generation of the final mesh from the specified geometry data has to happen on the main thread. Uses mesh pooling: Whenever you do not need to use a mesh anymore, you need to make sure that it does not stay in the memory. The geometry creator re-uses meshes which are not needed. Support for polygons: With Unity's native meshes, faces have to be triangles. With the procedural geometry kit, you can add polygons with an arbitrary number of vertices to the geometry. They are automatically triangulated so that they work with Unity's mesh. Usage Create a Geometry Constructor To create geometry, create a GeometryConstructor object: GeometryConstructor geometryConstructor = new GeometryConstructor(); Add Vertices After that, you can add vertices to the geometry using the method <i5.Toolkit.Core.ProceduralGeometry.GeometryConstructor.AddVertex(UnityEngine.Vector3)>. The position of the vertex has to be specified. Optionally, you can also enter the [normal vector](xref:i5.Toolkit.Core.ProceduralGeometry.GeometryConstructor.AddVertex(UnityEngine.Vector3, UnityEngine.Vector3)>), [UV coordinates](xref:i5.Toolkit.Core.ProceduralGeometry.GeometryConstructor.AddVertex(UnityEngine.Vector3, UnityEngine.Vector2)) or [both](xref:i5.Toolkit.Core.ProceduralGeometry.GeometryConstructor.AddVertex(UnityEngine.Vector3, UnityEngine.Vector2, UnityEngine.Vector3)). Vector3 vertexPosition = new Vector3(0, 1, 2); Vector3 normalVector = new Vector3(1, 1, 1); Vector2 uvCoordinates = new Vector2(0.5f, 0.5f); // add a vertex to the geometry int vertexIndex = geometryConstructor.AddVertex(vertexPosition, uvCoordinates, normalVector); As a result, the index of the vertex is returned. Use it to construct faces. Add Faces Faces are defined by specifying the vertices that are connected to a face. In any of the methods that create faces, list the vertices in clockwise order. All the methods also provide an optional last parameter flipNormals. If this argument is set to true, the normal vector of the face will point into the opposite direction, meaning that the face will be visible from hte other side. In the following code examples v0, v1, v2... are integer indices of previously added vertices. Triangles To add triangles, call the method AddTriangle(int, int, int, bool) geometryConstructor.AddTriangle(v0, v1, v2); Quads To add quads, call the method AddQuad(int, int, int, int, bool) geometryConstructor.AddQuad(v0, v1, v2, v3); The quad is automatically converted to two triangles as shown in the figure. Triangle Fan You can add a triangle fan using the method AddTriangleFan(int, int[], bool) Specify the pole (the vertex which is part of all triangles) first and after that, list the vertices clockwise. int[] faceIndices = new int[] {v1, v2, v3, v4, v5, v6}; geometryConstructor.AddTriangleFan(v0, faceIndices); Generate Mesh After the geometry has been defined, the mesh can be generated using the method ConstructMesh() Mesh result = geometryConstructor.ConstructMesh(); The result of this operation will be a Unity-Mesh with the same vertices, triangles, etc. as previously provided to the GeometryConstructor."
  },
  "manual/RocketChat-Client.html": {
    "href": "manual/RocketChat-Client.html",
    "title": "Rocket.Chat Client | i5 Toolkit Documentation",
    "keywords": "Rocket.Chat Client Use Case The Rocket.Chat client contains an integration with the chat program Rocket.Chat. Using this module, the application can send or receive messages in Rocket.Chat at runtime. For instance, this allows the integration of chatbots into Unity, e.g., to drive dialogues by non-player characters. Moreover, this can be useful for sending notifications about actions that users perform in the application, thereby gaining awareness in the community. Usage Service Initialization First, the RocketChatService has to be added to the ServiceManager so that the service is available. While creating the service, a host address needs to be provided. This is the host address of your Rocket.Chat instance. You can find your Rocket.Chat's address in the following way: Open the Rocket.Chat client and select your server on the very left. Underneath the list of channels and direct messages on the bottom left, there is an icon that can be customized for your server. Right-click on this icon and select \"Copy link address\" from the context menu. Paste the resulting link somewhere and shorten it so that it ends with the country code. It should, e.g., not contain the /home part anymore. Moreover, remove the https:// at the beginning. So, if your link read https://my-chat.mydomain.com/home, shorten it to my-chat.mydomain.com. Pass the resulting link to the constructor for RocketChatService in your source code. Login Option 1: Personal Access Token / AuthToken You can create a personal access token in your account and use this to log in. This is recommended for additional security as you can create different tokens for separate applications and can also revoke tokens in case that a token was leaked. To set up a personal access token, follow these steps: Click on your profile image in the Rocket.Chat client. After that, select \"My Account\". There is a category \"Personal Access Tokens\". Click on it. Enter any name in the text field. The content that you enter here is just a human-readable identifier so that you can differentiate your tokens. For instance, you can enter the name of the application which will use this token. Click the \"Add\" button to generate the token. A pop-up appears with the string of the token. We will need this token string in the login process. It also states your username's identifier but this is not required for the login as it is already encoded in the token. With the generated token, call LoginAsync(string) and pass this token to the login. Continue by handling the result of this call. Option 2: User Credentials Instead of creating a personal access token in Rocket.Chat's profile settings, it can be more intuitive for the user to log in using the username and password. This is also supported by the module. Construct text fields that let the user enter the credentials. After that, call LoginAsync(string, string) and pass the specified username and password to it. Continue in section login result to check if the login was successful. Login Result Await the result of the query to LoginAsync using bool success = await LoginAsync(...). This requires adding the using statement using i5.Toolkit.Core.Utilities.Async to the class. After that, success will be set to true if the server was able to successfully log the user in. Send/Post a Message To send a message, you first need to log in. After that, call the function PostMessageAsync Specify a target channel, group or person. For this particular method, you can use the human-readable names of the channels or usernames. For channels, start the id with a #, followed by the name of the channel, e.g., #general. To address users in direct messages, start the id with an @, followed by the username of the receiver, e.g., @myreceiver. Alternatively, you can also directly use the internal id strings of channels or users. In this case, the prefix is not required anymore since the internal id already specified whether the target is a channel or a user. Then, pass the message content to the method. Await the result of the call. It will give you feedback whether the sending operation was successful. List Public Channels of the Logged-In User You can get all public channels that a user is part of by calling GetChannelListJoinedAsync(). This function is, e.g., helpful for getting the internal id of a particular channel. List Private Channels, Groups, Teams of the Logged-In User You can get all private channels, groups or teams that a user is part of by calling GetGroupListAsync(). This function is, e.g., helpful for getting the internal id of a particular channel. Get Information about the Logged-In User To fetch the properties of the logged-in account, call GetMeAsync(). Receive Messages To receive messages, the service needs to start listening for messages and your code needs to subscribe to the event to get notified about incoming messages. In the end, do not forget to un-subscribe from the server. Note that the module listens for all messages that arrive in the specified room. This means, that events are, e.g., also invoked for messages that are sent by the logged-in user using this module. Subscribe to a Room So, first call SubscribeRoomMessageAsync. This method requires the id of the room (channel, direct messages, etc.) that you want to listen to. This id has to be the internal id that you can find by listing the public channels or private groups of the user. The human-readable name with the # or @ at the beginning does not work. For the other unique id that the method requires, you can specify any string. It is used to distinguish different subscriptions. Subscribe to Service Events After that, subscribe your code to the event OnMessageReceived. Every time that a new message appears in the monitored room, the event is invoked and you can extract information about the message from the given arguments. Un-Subscribe When starting the subscription to the server, the service builds up a stream that is kept open. Once the application does not need to listen for incoming messages anymore, close this subscription. Do this by calling UnsubscribeRoomMessageAsync. Provide the same unique id that identifies the subscription to indicate which active subscription should be closed. To clean everything up, also un-subscribe your code from the event OnMessageReceived Example Scene The examples contain a scene where the functionalities of the module can be tried out. It displays a canvas where you can log in, list public and private channels, send messages or receive messages. The results of the calls can be seen in Unity's log output console."
  },
  "manual/Scene-Documentation.html": {
    "href": "manual/Scene-Documentation.html",
    "title": "Scene Documentation Tools | i5 Toolkit Documentation",
    "keywords": "Scene Documentation Tools The scene documentation tools provides the means to document and label your scenes. Usage Create an empty GameObject and add the component Documentation Object to it. The GameObject in the scene will show an \"i\" icon. This icon is only visible in Unity's editor but not in playmode nor the final application. You can move the GameObject in the scene to move the icon around and mark different parts of the scene. On the documentation object, you can specify a title and a description that is stored on the component. Moreover, you can specify a URL that points to a Web document that contains more information. If you have specified a URL, you can click the Open Documentation URL button in the inspector to open the URL. The documentation object's type can be changed. There are a couple of different types that change the icon which is shown on the GameObject. Type Icon Usage INFO Refer to documentation, describe what a GameObject does or leave a note in the scene. TODO Mark a GameObject, component configuration or part of the scene as unfinished so that you or another developer can work on this aspect later. BUG Mark a part of the scene as a bug, e.g. missing collision geometry or intersecting 3D objects. Example Scene The package's examples contain a scene where all available documentation objects are demonstrated. Remarks The icons on the GameObject are realized as Gizmos. Gizmos only work if they are placed in a folder Assets/Gizmos which needs to be at the root of the Assets folder. When creating the package, it copies the icons from its resources into your project's Assets folder. Do not delete them - they will re-appear again the next time you start Unity."
  },
  "manual/Service-Core.html": {
    "href": "manual/Service-Core.html",
    "title": "Service Core System | i5 Toolkit Documentation",
    "keywords": "Service Core System General The service system provides a way to add singletons to the project without the need to have GameObjects or MonoBehaviours. Services are native C# classes which implement the IService interface. Hence, the services also provide a way to abstract away from MonoBehaviours. Whenever you need a centralized functionality that needs to be accessible globally, you can use services to realize it Usage The central component of the service system is the ServiceManager. It is the only component which needs to be placed on a GameObject. However, you do not need to set up the GameObject yourself. Whenever you use the ServiceManager, it automatically generates an instance on a GameObject and sets it up. Services Creating a Service To create a service, create a class that does not inherit from MonoBehaviour. The new service class must implement the interface IService. If you need to call a function in every frame, implement the interface IUpdateableService instead. Updateable Services A special type of service is the updateable service. You can define a updateable service by creating a new C# class that implements only the IUpdateableService interface. The interface provides the typical IService methods but also an Update() method that is called every frame. Moreover, it adds a property Enabled. The code inside of Update() is only executed if Enabled is set to true. Async Threaded Worker Service One pre-defined service is the AsyncThreadedWorkerService. Its purpose is to work on asynchronous, longer operations on a separate thread. After the operation, a result is returned. You can post operations to this service and the service will execute them on a separate thread. If the operation block contains a callback, the callback method will be invoked once the operation has finished. The result will be provided to the callback Important: You cannot access the Unity API, e.g. GameObjects or Meshes, in the separate thread. This means you cannot manipulate or read the scene in the operation. Create your operation in a way that all information are available at the beginning of the operation and that you only need the result at the end. Registration of Services Create an instance of the service using its constructor: MyService myService = new MyService(); // do your initial configuration of the service here After that, you can register a service by calling RegisterService: ServiceManager.RegisterService(myService) After that, the service is available and can be addressed. Registering the service automatically initializes it. Addressing Services Once you have created and registered a service, you can access by calling GetService ServiceManager.GetService<MyService>(); Specify the service class in the GetService method. If the service is not registered, an InvalidOperationException is thrown. You can check if a service was registered by checking the bool return value of ServiceManager.ServiceExists<MyService>(). Removing Services To remove the service, call RemoveService ServiceManager.RemoveService<MyService>(); Bootstrappers You can create a bootstrapper script that automatically populates the service system. The bootstrapper class needs to inherit from BaseServiceBootstrapper. It must implement the methods RegisterServices() and UnRegisterServices() which are called once the component is started and once it is destroyed. If you want to keep services after scene changes, either leave the UnRegisterServices() method empty or make the bootstrapper object persistent using MarkPersistent(GameObject). You do not need to use the BaseServiceBootstrapper. Alternatively to a bootstrapper which adds all services at the beginning, you can dynamically register and unregister services at any time and in any script. Example Scene There is an example scene that shows how to set up different kinds of services using the toolkit's service architecture. The Service Bootstrapper GameObject contains a bootstrapper script which populates the service manager with services. The demo scene contains an updateable service which logs the application's run time in intervals. There is also a service which prints a statement to the console if you press F5. Pressing F5 also triggers a simulated async operation which waits for a couple of seconds before printing a statement to the console. The F5 functionality is triggered by a Demo Service Client."
  },
  "manual/Spawner.html": {
    "href": "manual/Spawner.html",
    "title": "Spawner | i5 Toolkit Documentation",
    "keywords": "Spawner The spawner is a configurable object that allows you to create copies of a pre-defined prefab in the scene. Setup The spawner can be set up in Unity's inspector with the following properties: Prefab: Add a prefab that the spawner should create in the scene. Spawn on Awake: If this option is checked, a copy of the prefab is immediately created once the application starts. Destroy With Spawner: If this option is checked and you destroy the spawner component, it will also destroy all created copies in the scene. Max Number of Instances: You can limit the amount of copies which are created in the scene, e.g. for performance. If you set this value to 0, no limit is set. Overwrite Existing Instances: If you check this option and you have set a limit for the copies, creating new copies will overwrite old ones. The overwriting logic uses FIFO, meaning that that the first copy that was created is also overwritten first. If this option is not checked, trying to create new copies will not work. Usage You can create a new copy in the scene by calling the method Spawn() on the spawner component. Created copies are listed under the property SpawnedInstances. Moreover, the last spawned GameObject can be accessed using the property MostRecentlySpawnedObject. Example Scene The example scene contains a spawner object and a demo script which accesses the spawner. If you press F5, a new instance of the given cylinder prefab is spawned. You can try out the different settings of the spawner in this scene to find out how the spawner works in detail."
  },
  "manual/TestHelpers/Async-Test.html": {
    "href": "manual/TestHelpers/Async-Test.html",
    "title": "Async Test | i5 Toolkit Documentation",
    "keywords": "Async Test Use Case When writing unit tests, you will encounter tests where asynchronous methods need to be awaited. With the NUnit version that is used in Unity, you can only create test methods that are either async void or IEnumerator coroutines for asynchronous processes. The usual way of awaiting a method call in an async Task method is not possible. You should not use async void methods as it can lead to unexpected behavior, especially if an exception is thrown (for a detailed explanation on why you should avoid async void, click here). Therefore, the i5 Toolkit provides an AsyncTest class. With the help of this class, the async methods are awaited inside of coroutines. Usage Async Methods Without Return Value In this example, a test must await the async method FooAsync(). Create a [UnityTest] unit test which can run over multiple frames. This means that the return type of this test method needs to be IEnumerator. After that write the test. Instead of adding await FooAsync(), first create a Task object from the method call. After that, use WaitForTask to execute the task: [UnityTest] public IEnumerator MyAsyncUnitTest() { ... // first create a task object // note that this does not execute the method directly Task task = FooAsync(); // execute the task inside of the WaitForTask coroutine yield return AsyncTest.WaitForTask(task); Debug.Log(\"This log is only printed once the async task has finished\"); } Async Methods With Return Value Write the test in the same way as in the example without a return value. Instead of using Task, use the variant Task<TResult>. This class takes a generic type which defines the result's type. After the completion of a task, the task object contains the result in its Result property. [UnityTest] public IEnumerator MyAsyncUnitTest() { ... // first create a task object // note that this does not execute the method directly Task<int> task = FooReturnValueAsync(); // execute the task inside of the WaitForTask coroutine yield return AsyncTest.WaitForTask(task); Debug.Log(\"The result is: \" + task.Result); } Functionality WaitForTask executes the given task in a coroutine and waits for it to complete. After that, the result is available in the task object. The coroutine of the test function waits for the WaitForTask method to finish. If an exception is thrown during the execution of the async method, WaitForTask will re-throw this exception. This cirumvents the problem that exceptions in coroutines occur silently."
  },
  "manual/Utilities/Component-Utilities.html": {
    "href": "manual/Utilities/Component-Utilities.html",
    "title": "Component Utilities | i5 Toolkit Documentation",
    "keywords": "Component Utilities Use Case Scripts can fetch references using the method GetComponent. However, this method should be used only if necessary. Therefore, scripts should cache the references once they are fetched. The method EnsureComponentReference guarantees that a given component reference is set. Moreover, there are also cases where a script needs to access a component which is not yet attached to the GameObject. Components can be added using AddComponent. However, before adding a component to a GameObject, one should check if it already exists to avoid duplicates. The method GetOrAddComponent provides a shortcut to do these steps. Usage Ensure Component Reference In order to cache a reference to another component in a script, create a variable for the component. There is no need to initialize the reference in Awake or Start. Whenever you access the variable with the reference, call EnsureComponentReference just before it. After calling this method, the variable is ensured to be initialized with the reference. private OtherComponent referenceToOther; ... private void Foo() { ComponentUtilities.EnsureComponentReference(gameObject, ref referenceToOther, true); referenceToOther.DoSomething(); } The first argument of the function is the GameObject on which the component should be searched. The second argument is the reference variable. Important: Provide the variable as a ref. This way, the variable can be set by the EnsureComponentReference. If the third argument is set to true, a new component will automatically be added in case it is not found. This also means that EnsureComponentReference will definitely initialize the reference variable. If it is set to false and the component cannot be found, the reference variable remains null. Hint: Encapsulate the reference variable in a property with a getter and call EnsureComponentReference before returning the reference. After that, only use the property in the script to access the reference. This way, you do not need to make sure that the reference is set every time it is used. private OtherComponent ReferenceToOther { private OtherComponent referenceToOther; get { ComponentUtilities.EnsureComponentReference(gameObject, ref referenceToOther, true); return referenceToOther; } ... private void Foo() { ReferenceToOther.DoSomething(); } } Get or Add Component GetOrAddComponent combines GetComponent and AddComponent. First it tries to get the component using GetComponent. If the component cannot be found, it adds the component to the GameObject and returns the added instance. Therefore, it will always return a component instance and cannot return null OtherComponent referenceToOther = ComponentUtilities.GetOrAddComponent<OtherComponent>(gameObject);"
  },
  "manual/Utilities/Constant-Rotation.html": {
    "href": "manual/Utilities/Constant-Rotation.html",
    "title": "Constant Rotation | i5 Toolkit Documentation",
    "keywords": "Constant Rotation Use Case The ConstantRotation component makes an object spin at a constant rate around the Y axis (vertical axis). This can e.g. be used for turntables, rotating planets or other visual effects. Usage In the Unity editor, add the component Constant Rotation to a GameObject. You can alter the speed value which is defined in angles per second. The object can turn into the other direction by giving it a negative speed value. To stop the rotation, disable the component by setting its property enabled to false. Functionality The rotation speed is independent of the framerate. Moreover, the component makes sure that the object only has a rotation between 0 and 360 degrees. If it exeeds 360 degrees, the rotation is reset to a value in the range between 0 and 360 that represents the same orientation of the object to avoid floating point imprecisions."
  },
  "manual/Utilities/i5Debug.html": {
    "href": "manual/Utilities/i5Debug.html",
    "title": "i5 Debug | i5 Toolkit Documentation",
    "keywords": "i5 Debug Use Case The i5Debug class provides pre-formatted log commands. They provide more information about the origin of the log message by writing the class name in front of the log message. If the class is a MonoBehaviour, it will also highlight the associated GameObject in the hierarchy if the log message is clicked in the console. Usage Log messages can be created in a similar way to the standard debug logs in Unity: Unity Debug Log i5 Debug Log Debug.Log(\"text\") i5Debug.Log(\"text\", this) Debug.LogWarning(\"text\") i5Debug.LogWarning(\"text\", this) Debug.LogError(\"text\") i5Debug.LogError(\"text\", this) Functionality The i5Debug is a formatter which takes additional information as input and formats them into a log output. The output is logged using Unity's standard Debug class. This also means that it can be used in combination with standard Debug.Log outputs."
  },
  "manual/Utilities/Json-Array-Utility.html": {
    "href": "manual/Utilities/Json-Array-Utility.html",
    "title": "Json Array Utility | i5 Toolkit Documentation",
    "keywords": "Json Array Utility Use Case Unity's built-in JsonUtility does not support JSON strings which have an array at root level: To solve this, the JsonArrayUtility was implemented. JsonArrayUtility is e.g. useful when communicating with a Web API that returns list of objects for a query. JsonArrayUtility is only required if the JSON array is on the root level of the JSON string. If it is part of a JSON object, Unity's JsonUtility can handle it. Usage The usage of JsonArrayUtility is identical to JsonUtility: Serialize to JSON To serialize an array to JSON, call ToJson. It returns a JSON object with one key \"array\". The value of this key is the array. int[] intArray = { 1, 2, 3, 4, 5 }; string serializedJson = JsonArrayUtility.ToJson(intArray); // result is: // {\"array\":[1,2,3,4,5]} Deserialize from JSON If the JSON string already has the from where the array is encapuslated into the \"array\" key-value pair, you can use FromJson to deserialize and unwrap the array. string wrappedArray = \"{\\\"array\\\":[1,2,3,4,5]}\"; int[] deserializedArray = JsonArrayUtility.FromJson<int>(wrappedArray); If the JSON string is not encapsulated but has the array on its root level, first call EncapsulateInWrapper and then FromJson. string jsonArray = \"[1,2,3,4,5]\"; string wrappedArray = JsonArrayUtility.EncapsulateInWrapper(jsonArray); int[] deserializedArray = JsonArrayUtility.FromJson<int>(wrappedArray); Functionality JsonArrayUtility wraps arrays into an object so that the array is not at root level anymore. After that, it uses Unity's JsonUtility to serialize the JSON string. To deserialize, EncapsulateInWrapper adds the JSON object wrapper around the JSON string. The FromJson deserializes the wrapped JSON string to the wrapper object. After that, it unpacks the wrapper object and returns the contained array."
  },
  "manual/Utilities/Json-Dictionary-Utility.html": {
    "href": "manual/Utilities/Json-Dictionary-Utility.html",
    "title": "Json Dictionary Utility | i5 Toolkit Documentation",
    "keywords": "Json Dictionary Utility Use Case Unity's built-in JsonUtility cannot serialize <xref:System.Collections.Generic.Dictionary%602> objects. Therefore, JsonDictionaryUtility can be used to serialize and deserialize dictionary data. Usage The usage of JsonDictionaryUtility is identical to JsonUtility: Serialize to JSON To serialize an array to JSON, call ToJson. It returns a JSON object with two arrays \"keys\" and \"values\". These arrays are the contents of the array entries. Dictionary<string, int> dictionary = new Dictionary<string, int>(); dictionary.Add(\"firstKey\", 42); dictionary.Add(\"secondKey\", 1); string json = JsonDictionaryUtility.ToJson(dictionary); // result: // \"{\\\"keys\\\":[\\\"firstKey\\\",\\\"secondKey\\\"],\\\"values\\\":[42,1]}\" Deserialize from JSON If the JSON string uses the same format of a \"keys\"-array and a \"values\"-array, you can use FromJson to deserialize the JSON string and convert it to a native <xref:System.Collections.Generic.Dictionary%602>. string json = \"{\\\"keys\\\":[\\\"firstKey\\\",\\\"secondKey\\\"],\\\"values\\\":[42,1]}\"; Dictionary<string, int> dictionary = JsonDictionaryUtility.FromJson<string, int>(json); // resulting dictionary has two entries with: // dictionary[\"firstKey\"] == 42 // dictionary[\"secondKey\"] == 1 Functionality A dictionary consists of a set of key value pairs with unique keys. JsonDictionaryUtility reads all keys and serializes them into an JSON array. The values are also serialized into their own array. The key-value relationship is preserved by the same indices. This means that the first enty in the keys array is the key for the first value in the values array and so on. JsonDictionaryUtility cannot serialize or deserialize dictionaries to/from key-value pairs in the JSON string. It relies on the unfolding of the entries into the key and value arrays. Therefore, it is not directly compatible with other JSON libraries that convert dictionary keys to JSON keys and the dictionary values to the value of a key entry."
  },
  "manual/Utilities/Persistent-Scene.html": {
    "href": "manual/Utilities/Persistent-Scene.html",
    "title": "Persistent Scene | i5 Toolkit Documentation",
    "keywords": "Persistent Scene Use Case When switching a scene in Unity using the replace method, the GameObjects from one scene are unloaded and the content of the next scene is loaded. There are use cases where some GameObjects in Unity should persist across scene changes, e.g. if they are global manager objects or also the player object. For these, Unity provides the DontDestroyOnLoad method. However, DontDestroyOnLoad is discouraged as it does not give much control over the object. For instance, it is not possible to undo this persitent status again. A better solution than DontDestroyOnLoad is to manually create a persistent scene that exists for the entire execution time of the application. The i5 Toolkit provides a possible implementation for this. GameObjects can be marked as persistent so that they are not unloaded in scene changes. Instead, the GameObjects are transfered to a \"i5 Persistent Scene\". Usage To make an object persist between scene changes, use the function MarkPersistent: PersistenceScene.MarkPersistent(gameObject); If you are using the Persistence Scene solution, make sure that you load new scenes in the additive mode and not the single mode: Do not use the single mode, as this will unload the persistent scene. SceneManager.LoadScene(\"NewScene\", LoadSceneMode.Additive); If the GameObject should not be persistent anymore, you can revert its status using the command UnmarkPersistent. Note that this will move the GameObject into the currently active scene. This is not guaranteed to be the same scene as the one it was originally in. PersistenceScene.UnmarkPersistent(gameObject); Functionality When using the PersistenceScene, it will create a new scene \"i5 Persistent Scene\" and load it in an additive mode. Objects which are marked as persistent are transferred into this scene. As long as scripts do not unload the persistent scene, GameObjects in it will persist across scene changes. When talking about persistent objects, this means making GameObjects persistent within one application session with regard to scene changes. This feature does not create persistence in-between sessions like a save-load solution."
  },
  "manual/Utilities/Unity-Adapters.html": {
    "href": "manual/Utilities/Unity-Adapters.html",
    "title": "Unity Adapters | i5 Toolkit Documentation",
    "keywords": "Unity Adapters Unity adapters are a growing collection of interfaces and adapter classes to hide the Unity API and provide an abstraction layer on which the application logic can be implemented. Each of the interfaces defines a contract, e.g. for a text display, which defines what an object can do. This way, application scripts can work with the interfaces and do not need to worry about the underlying functionality. The Unity API is wrapped into adapter objects which implement the required interfaces. Use Case Unity adapters can be used to decouple application logic from the presentation in the scene. For instance, this allows a script to display text on an <xref:i5.Toolkit.Core.Utilities.UnityAdapters.ITextDisplay>. This interface allows the script to set text but it does not need to know about the implementation of the text display. By initializing the <xref:i5.Toolkit.Core.Utilities.UnityAdapters.ITextDisplay> object with an adapter, the same application logic can work with different UI implementations, e.g. TextMesh or TextMeshPro. Interfaces The toolkit provides the following interfaces: Interface Provided funtionality <xref:i5.Toolkit.Core.Utilities.UnityAdapters.IActivateable> Activate and deactivate an object <xref:i5.Toolkit.Core.Utilities.UnityAdapters.IRectangle> Rectangular 2D (UI) element <xref:i5.Toolkit.Core.Utilities.UnityAdapters.IScrollView> Scrollable view <xref:i5.Toolkit.Core.Utilities.UnityAdapters.ITextDisplay> UI display to show text to show text to the user Adapters The toolkit provides adapters for the following Unity objects: Unity Class Adapter Class GameObject <xref:i5.Toolkit.Core.Utilities.UnityAdapters.GameObjectAdapter> RectTransform <xref:i5.Toolkit.Core.Utilities.UnityAdapters.RectTransformAdapter> ScrollRect <xref:i5.Toolkit.Core.Utilities.UnityAdapters.ScrollRectAdapter> TextMesh <xref:i5.Toolkit.Core.Utilities.UnityAdapters.TextMeshTextAdapter> TextMeshPro <xref:i5.Toolkit.Core.Utilities.UnityAdapters.TextMeshProTextAdapter> TextMeshProUGUI <xref:i5.Toolkit.Core.Utilities.UnityAdapters.TextMeshProUGUITextAdapter> Example An example can be found in the source code of the App Console's UI. It works with a general text display interface which allows the realizaion of consoles with TextMeshes or TextMeshPro."
  },
  "manual/Verbose-Logging.html": {
    "href": "manual/Verbose-Logging.html",
    "title": "Verbose Logging System | i5 Toolkit Documentation",
    "keywords": "Verbose Logging System Use Case Unity provides a Debug.Log output class, as well as Debug.LogWarning and Debug.LogError. Developers can use these statements to create messages for the console in the Unity editor. Moreover, on deployed Unity applications, the statements are collected in a log file. So, if an error occurs, the log file can be sent to the developer to investigate what caused the error. However, the log statements cause a performance loss as the application immediately writes them to the log file. Moreover, depending on the use case, adding many debug logs might be more confusing than just posting the minimum necessary. Hence, the i5 Toolkit provides its own logging system where the verbosity level can be configured. This allows applications to log statements only if the level of detail is required. Production-ready applications and development prototypes can have different verbosity levels configured. Moreover, it is possible to change the verbosity level at runtime. This means that the application can, e.g., provide a debug mode which the user can activate to increase the level of detail on the logging. The log statements print their verbosity level so that generated log files can also be filtered. Usage Applying the logging module consists of two parts: First, the concept for generating messages and assigning them to a verbosity level is discussed and after that, filtering of messages is shown. Message Logging There are five levels of verbosity. Developers can state for each log message into which category the message belongs. The following guide can be considered when deciding which category to assign to each method: Category Description Method Critical A log message about a failure or error that is critical to the further execution of the program. For instance, a module is in an unforeseen state and going forward, it is not clear whether the application still functions correctly. LogCritical Error A log message about an error which does not endanger the further execution of the program. For instance, the application tried loading a save file but could not parse it, so the loading operation was aborted. LogError Warning A log message about a check which resulted in an unexpected value. This is not really an error yet but should be addressed. For instance, the application noticed that the player left the designated play aera and was reset. LogWarning Info A log message that informs about what the application is roughly doing. However, the log messages only inform about major events. For instance, the application logs that the user changed the graphics quality in the settings menu. LogInfo Debug A log message which can be used for debugging the application and giving the developer additional hints about what is going on. It can, e.g., provides key values during calculations. For instance, a player buys an item and the log messages output the number of resources that the player has in the inventory before and after the transaction. LogDebug Trace A log message which helps track exactly which code execution paths the application takes. It logs methods which are entered, which branch of an if-else condition was selected, etc. For instance, the application logs that it is trying to cast a raycast in the scene and whether it found anything. LogTrace Exceptions can additionally be logged using the method LogException. Exceptions are either logged using the Cricial or Error categories, depending on the value provided to the isCritical parameter. The AppLog.Log<Level> methods are convenient shortcuts. It is also possible to call the method Log and provide to it the log level. Just like Debug.Log*, objects can be passed to AppLog.Log* to define the context of the statement. Clicking a log message with a provided context in the Unity console will highlight the GameObject on which it occurred in the hierarchy. Moreover, the statement will print additional information about the context object. Setting the Level of Verbosity The level of verbosity can be set centrally by altering the property MinimumLogLevel. All messages which are on the given level or on a higher level are logged, while all other messages are suppressed. For instance, if the minimum log level is set to Warning, the system will log messages that are on the levels Critical, Error and Warning. If the minimum log level is set to Trace, every message of any category will be logged. One way of using the level of verbosity is to set it once a startup script, e.g., depending on the version number, whether it is a development build or other factors. The level of verbosity can also be dynamically changed during runtime. So, an application can, e.g., start with a minimum log level of Critical and later change it to Info to get more detailed outputs for a specific section of the program. Note that messages cannot be retrieved retroactively. Messages below the minimum log level are never produced and so they cannot be restored later. Changing the minimum log level during runtime applies to future log statements but not past ones. The other way around, you can first generate more messages than needed and later filter a log file with a text program to include less messages by searching for the log level. Since every message starts with its log level, all messages of a particular level can quickly be found both in the Unity editor and in log files. In-Editor Functionality In the editor, the log messages can be colored according to the level. By default, this feature is activated but it can be deactivated using the property UseColors. Moreover, the colors can be adjusted for each level individually which might be necessary depending on the Unity version and the chosen color scheme. The coloring of messages is only applied in the Unity editor and neither the coloring nor the markup which produces the color are added to log files outside of the Unity editor. Adjusting an Existing Application to Use Verbose Logging In order to use the verbose logging feature, all existing calls to Debug.Log, Debug.LogWarning, Debug.LogError and Debug.LogException have to be replaced. Replace Debug.Log with either AppLog.LogInfo, AppLog.LogDebug or AppLog.LogTrace depending on the level of detail that the given log statement represents. Replace Debug.LogWarning with AppLog.LogWarning. Replace Debug.LogError with AppLog.LogError or AppLog.LogCritical depending on how critical the error is. Finally, replace all calls to Debug.LogException with AppLog.LogException. Fill the Boolean parameter isCritical with true or false, depending on whether you perceive the exception as of critical importance. There is also no problem with using Debug.Log* calls in parallel to the AppLog.Log* calls. Messages to Debug.Log* will always be logged, independent of the set verbosity level. However, it is recommended to not mix the two to keep the code consistent. Any errors which are logged directly by Unity as soon as they appear, will still be logged. This is an intended behavior as these kinds of errors and exceptions are regarded as critical. Example Scene The example scene generates messages of different verbosity levels. In the script, the minimum log level can be adjusted to see how the set value affects which messages are logged and which ones are suppressed."
  },
  "manual/Version-Tool.html": {
    "href": "manual/Version-Tool.html",
    "title": "Version Tool | i5 Toolkit Documentation",
    "keywords": "Version Tool Semantic Versioning Applications and packages should be released using the semantic versioning schema. It consists of a major release number, a minor release number, a patch number and sometimes a revision number. These numbers are separated by dots which leads to versions such as 1.2.3. Here, 1 is the major release, 2 the minor release and 3 the patch number. Each of the numbers is incremented by some rules. The major version is only increased if the app's API fundamentally changes so that breaking changes are introduced. The minor number is bumped if new features are added but the API is still compatible. The patch number is incremented if bugfixes are added which do not break the application. Use Case The version number of an application should be incremented to show what kind of changes have happened but also to make sure that testers can overwrite already installed versions on a device. If the version number is not incremented or even lowered, testers first need to deinstall apps on devices such as Android, UWP and iOS and can only install the new version of the app after that. This means that in a setup where a continuos integration pipeline creates installer files, the version should be incremented automatically. Developers can determine the major and minor version. The patch number can be incremented automatically. Since Unity stores the app's version number in the project settings, changing the version number is a change that needs to be added to the source control. This means that the version number cannot be stored explicitly in the Unity project itself since calculating and applying a version number contributes another entry in the source control's history. The versioning tool allows developers to add placeholder variables to the version string in Unity's project settings. They can then define the major and minor version using Git tags, e.g. v1.2. When building the installer files of the app, the versioning tool automatically calculates the version number from the available information in Git and writes it into the built application. Usage The version tool allows you to add placeholders in the project's version string. You can add any number of placeholders and you can combine them with other text. To edit your project's version number go to \"Edit > Project Settings...\" in the top menu of Unity's editor. After that, select the \"Player\" tab in the opened window. At the top, there is a field version. Enter the version schema with the placeholders here. The following placeholders are available: Placeholder Meaning Example Value $gitVersion Gets the version which consists of a major, minor and patch number based on Git tags. 1.2.3 $gitBranch Gets the current branch name develop $appVersion Gets the version from the environment variable APP_VERSION. If the variable is not set, it behaves like $gitVersion. 1.2.3 In order to calculate the correct version numbers, tag your application's releases with Git tags. The tags must have the form v1.2, so start them with a \"v\", followed by the major and minor version number. The version is automatically applied to a built application. This means that the version number is not available in the Unity editor but only in the compiled application package. The version number is currently applied to installation files for the following platforms: Platform Used Format Standalone Uses the version string that was set in the player settings and where the placeholders are replaced UWP Uses a version number format with four numbers: 1.2.3.4. The first three numbers are reconstructed from the $appVersion placeholder. The last number is always 0 as it is reserved by the Windows Store. Android Uses one single number. It is calculated from the total number of commits that have been made on the currently checked out branch. Some CI systems do not allow Unity to start other processes so that Git cannot be executed. In these cases, you can use the $appVersion placeholder and you can set the environment variables to bypass the Git execution. For UWP, the number can be overwritten by setting the environment variable APP_VERSION. If it is non-empty, the value of the variable is used. Otherwise, Git is executed to calculate the version. For Android, the number can also be overwritten by setting the environment variable ANDROID_APP_VERSION. If this variable is set, it is parsed to an integer and applied to the Android version. In case that the variable is not set or the value cannot be parsed to an integer, the version tool tries to fetch the number of commits on the branch using Git. Recommended Setup It is recommended to follow the gitflow workflow. You should use a main branch which contains stable releases, a develop branch which works towards the next release and feature branches for individual features. To get correct version numbers, tag releases on the master branch in the form v1.0. Hence, start the tag with a v, followed by the major and minor release number. The given way of calculating versions is not able to give each commit on every branch a unique version. If two features are developed in parallel, they share the same version numbers since their number of commits since the last tag can be identical. Therefore, it is recommended to produce versioned builds from the main branch. On the master branch, each version is unique since branches that are merged into master are put into a sequential order again. If you want to provide preview builds, you can provide builds from the develop branch but you should label them as preview to indicate that their versions are not final and might change on the master branch. Some CI runner do not allow Unity to access Git. In this case, you can use the environment variable APP_VERSION to calculate the version as part of the CI script. To also pre-calculate the Android version, set the ANDROID_APP_VERSION environment variable. The version tool then uses the values of these environment variables. To calculate the version of the application in the same way as the version tool, use the following Linux bash script: #! /bin/bash DESCRIBE=`git describe --tags --long --match v[0-9]\\*` VERSION=`echo $DESCRIBE | awk '{split($0,a,\"-\"); print a[1]}'` BUILD=`echo $DESCRIBE | awk '{split($0,a,\"-\"); print a[2]}'` if [[ \"${DESCRIBE}\" =~ ^[A-Fa-f0-9]+$ ]]; then VERSION=\"0.0.0\" BUILD=`git rev-list HEAD --count` BUILD=${DESCRIBE} fi if [ \"${BUILD}\" = \"\" ]; then BUILD='0' fi echo ${VERSION:1}.${BUILD} Assuming that the script is called get_version.sh, you can set the environment variable using: APP_VERSION=`./ci/get_version.sh` Testing You can test the data that the versioning tool reads from Git using the menu at the top in the Unity editor: The available entries are: Menu Entry Output Example Output i5 Toolkit > Build Versioning > Get Semantic Version Gets the major and minor version from Git tags and the patch version from the number of commits since the last git tag. The calculated version is output as a log message 1.2.3 i5 Toolkit > Build Versioning > Get Git Branch Logs the name of the currently checked out Git branch in the console develop i5 Toolkit > Build Versioning > Get Total Commits on Branch Counts the total number of commits that are tracked on the currently checked out branch and logs them in the console. Total number of commits on branch: 42"
  }
}